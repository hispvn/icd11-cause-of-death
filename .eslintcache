[{"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/index.js":"1","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/store.js":"2","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/App/index.js":"3","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/reducers/index.js":"4","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Translation/const.js":"5","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/locale/i18n.js":"6","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/locale/locale.js":"7","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Translation/index.js":"8","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/RegisteredTeiList/index.js":"9","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/HeaderBar/index.js":"10","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/index.js":"11","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Search/index.js":"12","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Form/index.js":"13","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Export/index.js":"14","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/reducers/data.js":"15","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/reducers/route.js":"16","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/reducers/user.js":"17","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/reducers/metadata.js":"18","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/reducers/admin.js":"19","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/route/index.js":"20","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/metadata/index.js":"21","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/admin/index.js":"22","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/user/index.js":"23","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/ControlBar/index.js":"24","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/index.jsx":"25","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Translation/TranslationTable.js":"26","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Form/Result.js":"27","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Export/Content.js":"28","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/reducers/data-methods.js":"29","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/route/type.js":"30","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/user/type.js":"31","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/utils/excel.utility.js":"32","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/utils/index.js":"33","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/metadata/type.js":"34","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Form/Stage.js":"35","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Form/Profile.js":"36","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Form/DeathCertificate.js":"37","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/admin/type.js":"38","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/data/type.js":"39","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/Selections.jsx":"40","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/AssignOrgUnits.jsx":"41","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/FrameA.jsx":"42","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/Attributes.jsx":"43","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/Certificate.jsx":"44","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/AssignUsers.jsx":"45","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/Review.jsx":"46","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/Finish.jsx":"47","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Search/Result.jsx":"48","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Form/WarningDialog.jsx":"49","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Form/DeleteDialog.jsx":"50","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/run.js":"51","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/utils/generateChildChart.js":"52","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/utils.js":"53","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/WidgetContainer/WidgetContainer.jsx":"54","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/data/index.js":"55","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/InputField/index.js":"56","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/utils/certificate.js":"57","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/hocs/withLoading.js":"58","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/utils/const.js":"59","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/utils/generateMetadata.js":"60","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/CustomCertificate.jsx":"61","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page9/index.js":"62","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page7/index.js":"63","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page5/index.js":"64","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page8/index.js":"65","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page6/index.js":"66","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page3/index.js":"67","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page2/index.js":"68","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page4/index.js":"69","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page1/index.js":"70","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page0/index.js":"71","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/index.js":"72","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page2/stackedBar-chart.js":"73","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/treemap-chart.js":"74","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/pie-chart.js":"75","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/combined-chart.js":"76","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/html-chart.js":"77","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/children-chart.js":"78","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/line-chart.js":"79","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/statistic.js":"80","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/bar-chart.js":"81","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/stacked-bar-chart.js":"82","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page2/line-chart.js":"83","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/utils/generateChildCharts.js":"84","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/index.js":"85","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/IconButton/index.jsx":"86","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/IconButton/const.js":"87","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Nodata.jsx":"88","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Html.jsx":"89","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Treemap.jsx":"90","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Bublemap.jsx":"91","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Pie.jsx":"92","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Statistic.jsx":"93","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Line.jsx":"94","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/DoubleStackedBarChart.jsx":"95","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/CombinedChart.jsx":"96","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Bar.jsx":"97","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/VerticalStackedBarChart.jsx":"98","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/StackedBarChart.jsx":"99","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Map.jsx":"100","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Icd11Tool/EmbeddedIcd11Tool.js":"101","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Icd11Tool/RawCodingTool.js":"102","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/App/UpdateDialog.jsx":"103"},{"size":531,"mtime":1646206459537,"results":"104","hashOfConfig":"105"},{"size":224,"mtime":1631842942146,"results":"106","hashOfConfig":"105"},{"size":21396,"mtime":1753817176194,"results":"107","hashOfConfig":"105"},{"size":540,"mtime":1660864545804,"results":"108","hashOfConfig":"105"},{"size":83908,"mtime":1727983158488,"results":"109","hashOfConfig":"105"},{"size":997,"mtime":1702142510410,"results":"110","hashOfConfig":"105"},{"size":18159,"mtime":1727983084021,"results":"111","hashOfConfig":"105"},{"size":12110,"mtime":1702566498770,"results":"112","hashOfConfig":"105"},{"size":8081,"mtime":1742564940056,"results":"113","hashOfConfig":"105"},{"size":299,"mtime":1649217083116,"results":"114","hashOfConfig":"105"},{"size":14777,"mtime":1743474237264,"results":"115","hashOfConfig":"105"},{"size":22418,"mtime":1742567211659,"results":"116","hashOfConfig":"105"},{"size":19037,"mtime":1743460864154,"results":"117","hashOfConfig":"105"},{"size":7122,"mtime":1716499290488,"results":"118","hashOfConfig":"105"},{"size":1281,"mtime":1737782906462,"results":"119","hashOfConfig":"105"},{"size":270,"mtime":1631842942145,"results":"120","hashOfConfig":"105"},{"size":455,"mtime":1660872326433,"results":"121","hashOfConfig":"105"},{"size":4342,"mtime":1754076601210,"results":"122","hashOfConfig":"105"},{"size":3818,"mtime":1744643879005,"results":"123","hashOfConfig":"105"},{"size":136,"mtime":1631842942144,"results":"124","hashOfConfig":"105"},{"size":3070,"mtime":1745690703800,"results":"125","hashOfConfig":"105"},{"size":2084,"mtime":1736376785857,"results":"126","hashOfConfig":"105"},{"size":132,"mtime":1660927342422,"results":"127","hashOfConfig":"105"},{"size":15180,"mtime":1753825123511,"results":"128","hashOfConfig":"105"},{"size":6587,"mtime":1716491730709,"results":"129","hashOfConfig":"105"},{"size":1283,"mtime":1699502801588,"results":"130","hashOfConfig":"105"},{"size":5369,"mtime":1743786309303,"results":"131","hashOfConfig":"105"},{"size":1445,"mtime":1703186306487,"results":"132","hashOfConfig":"105"},{"size":6655,"mtime":1743800594611,"results":"133","hashOfConfig":"105"},{"size":44,"mtime":1631842942144,"results":"134","hashOfConfig":"105"},{"size":47,"mtime":1660864464967,"results":"135","hashOfConfig":"105"},{"size":1821,"mtime":1702502405763,"results":"136","hashOfConfig":"105"},{"size":8352,"mtime":1724741194628,"results":"137","hashOfConfig":"105"},{"size":1441,"mtime":1745690688444,"results":"138","hashOfConfig":"105"},{"size":72842,"mtime":1747367212531,"results":"139","hashOfConfig":"105"},{"size":16629,"mtime":1753729542076,"results":"140","hashOfConfig":"105"},{"size":10133,"mtime":1745805847643,"results":"141","hashOfConfig":"105"},{"size":834,"mtime":1736376793789,"results":"142","hashOfConfig":"105"},{"size":432,"mtime":1737782906461,"results":"143","hashOfConfig":"105"},{"size":4077,"mtime":1744643853042,"results":"144","hashOfConfig":"105"},{"size":5195,"mtime":1651354871111,"results":"145","hashOfConfig":"105"},{"size":8720,"mtime":1727290131026,"results":"146","hashOfConfig":"105"},{"size":22120,"mtime":1743457548930,"results":"147","hashOfConfig":"105"},{"size":19759,"mtime":1699502613611,"results":"148","hashOfConfig":"105"},{"size":6421,"mtime":1699643125083,"results":"149","hashOfConfig":"105"},{"size":19845,"mtime":1742648325778,"results":"150","hashOfConfig":"105"},{"size":17995,"mtime":1747176531936,"results":"151","hashOfConfig":"105"},{"size":4275,"mtime":1737782906459,"results":"152","hashOfConfig":"105"},{"size":1067,"mtime":1698341038890,"results":"153","hashOfConfig":"105"},{"size":3021,"mtime":1737782906444,"results":"154","hashOfConfig":"105"},{"size":605,"mtime":1657429067301,"results":"155","hashOfConfig":"105"},{"size":1732,"mtime":1695615864380,"results":"156","hashOfConfig":"105"},{"size":4071,"mtime":1647919311472,"results":"157","hashOfConfig":"105"},{"size":7026,"mtime":1740546804008,"results":"158","hashOfConfig":"105"},{"size":1508,"mtime":1737782906460,"results":"159","hashOfConfig":"105"},{"size":6617,"mtime":1754076540725,"results":"160","hashOfConfig":"105"},{"size":5005,"mtime":1745733263997,"results":"161","hashOfConfig":"105"},{"size":507,"mtime":1645495916862,"results":"162","hashOfConfig":"105"},{"size":9337,"mtime":1742649516136,"results":"163","hashOfConfig":"105"},{"size":18667,"mtime":1744837018881,"results":"164","hashOfConfig":"105"},{"size":18343,"mtime":1748981584907,"results":"165","hashOfConfig":"105"},{"size":3435,"mtime":1657429067300,"results":"166","hashOfConfig":"105"},{"size":4564,"mtime":1657429067300,"results":"167","hashOfConfig":"105"},{"size":4318,"mtime":1657429067298,"results":"168","hashOfConfig":"105"},{"size":4458,"mtime":1657429067300,"results":"169","hashOfConfig":"105"},{"size":4495,"mtime":1657429067299,"results":"170","hashOfConfig":"105"},{"size":1919,"mtime":1657429067297,"results":"171","hashOfConfig":"105"},{"size":440,"mtime":1657429067296,"results":"172","hashOfConfig":"105"},{"size":2623,"mtime":1657429067298,"results":"173","hashOfConfig":"105"},{"size":1988,"mtime":1657429067295,"results":"174","hashOfConfig":"105"},{"size":1604,"mtime":1652811881717,"results":"175","hashOfConfig":"105"},{"size":1399,"mtime":1633935164882,"results":"176","hashOfConfig":"105"},{"size":2423,"mtime":1657429067296,"results":"177","hashOfConfig":"105"},{"size":1062,"mtime":1633935164883,"results":"178","hashOfConfig":"105"},{"size":620,"mtime":1633935164883,"results":"179","hashOfConfig":"105"},{"size":958,"mtime":1633935164882,"results":"180","hashOfConfig":"105"},{"size":2787,"mtime":1633935164882,"results":"181","hashOfConfig":"105"},{"size":1794,"mtime":1633935164882,"results":"182","hashOfConfig":"105"},{"size":1055,"mtime":1633935164882,"results":"183","hashOfConfig":"105"},{"size":341,"mtime":1633935164883,"results":"184","hashOfConfig":"105"},{"size":892,"mtime":1633935164882,"results":"185","hashOfConfig":"105"},{"size":921,"mtime":1633935164883,"results":"186","hashOfConfig":"105"},{"size":2405,"mtime":1657429067296,"results":"187","hashOfConfig":"105"},{"size":42886,"mtime":1740550257589,"results":"188","hashOfConfig":"105"},{"size":641,"mtime":1647919311468,"results":"189","hashOfConfig":"105"},{"size":292,"mtime":1633935164878,"results":"190","hashOfConfig":"105"},{"size":184,"mtime":1633935164878,"results":"191","hashOfConfig":"105"},{"size":525,"mtime":1652819440550,"results":"192","hashOfConfig":"105"},{"size":154,"mtime":1633935164879,"results":"193","hashOfConfig":"105"},{"size":1391,"mtime":1633935164880,"results":"194","hashOfConfig":"105"},{"size":2998,"mtime":1653426942973,"results":"195","hashOfConfig":"105"},{"size":438,"mtime":1647919311467,"results":"196","hashOfConfig":"105"},{"size":224,"mtime":1633935164880,"results":"197","hashOfConfig":"105"},{"size":741,"mtime":1653371726038,"results":"198","hashOfConfig":"105"},{"size":953,"mtime":1653420972857,"results":"199","hashOfConfig":"105"},{"size":981,"mtime":1653372924124,"results":"200","hashOfConfig":"105"},{"size":744,"mtime":1653372807669,"results":"201","hashOfConfig":"105"},{"size":858,"mtime":1653372899291,"results":"202","hashOfConfig":"105"},{"size":822,"mtime":1653372882682,"results":"203","hashOfConfig":"105"},{"size":2973,"mtime":1699502555679,"results":"204","hashOfConfig":"105"},{"size":1060,"mtime":1707601235118,"results":"205","hashOfConfig":"105"},{"size":3544,"mtime":1744147826029,"results":"206","hashOfConfig":"105"},{"size":4059,"mtime":1747409110558,"results":"207","hashOfConfig":"105"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},"yus0cv",{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"210"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"210"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"210"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"210"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"210"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"210"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"210"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"210"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"210"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"210"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"210"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"210"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"210"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"210"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"210"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"210"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"210"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"210"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"210"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"308","usedDeprecatedRules":"210"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"210"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"210"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"210"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"210"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"210"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"210"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"210"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"210"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"210"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"210"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"210"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"210"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"210"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"210"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"210"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"210"},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"210"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"210"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"210"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"210"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"210"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"210"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"210"},"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/index.js",[],["458","459"],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/store.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/App/index.js",["460","461"],"import { useEffect, useState, version } from \"react\";\nimport \"./index.css\";\nimport HeaderBarContainer from \"../HeaderBar\";\nimport ControlBar from \"../ControlBar\";\nimport RegisteredTeiList from \"../RegisteredTeiList\";\nimport SearchForm from \"../Search\";\nimport Administration from \"../Administration\";\nimport Form from \"../Form\";\nimport Export from \"../Export\";\nimport Dashboard from \"../Dashboard\";\nimport Translation from \"../Translation\";\nimport UpdateDialog from \"./UpdateDialog\";\nimport { TRANSLATIONS } from \"../Translation/const\";\nimport { Hooks, Components } from \"tracker-capture-app-core\";\nimport { InitTranslation } from \"../../locale/i18n\";\n\n/* REDUX */\nimport { connect } from \"react-redux\";\nimport {\n  setTrackerDataElements,\n  setProgramMetadata,\n  setTeas,\n  setUsers,\n  setOrgUnitGroups,\n  setOrgUnitLevels,\n  setOrgUnits,\n  getICD11Options,\n  getTrackedEntityTypes,\n  setUserGroups,\n  setFormMapping,\n  setCertificateTemplate,\n  setFemaleCode,\n  setFullnameOption,\n  setUILocale,\n  setIcdApiToken,\n  setCustomCertificate,\n  setAllOptionSets,\n  getAllPrograms,\n  getTrackedEntityType\n} from \"../../redux/actions/metadata\";\nimport {\n  setFemaleOption,\n  changeCerticateTemplate,\n  setCertificateLogo,\n} from \"../../redux/actions/admin\";\nimport { setUserRole } from \"../../redux/actions/user\";\nimport { changeRoute } from \"../../redux/actions/route\";\nimport localeFile from \"../../locale/locale\";\n/*       */\n\n\nconst { useApi } = Hooks;\nconst { LoadingMask } = Components;\n\nconst App = ({\n  route,\n  setProgramMetadata,\n  setTeas,\n  setTrackerDataElements,\n  setUsers,\n  setOrgUnitGroups,\n  setOrgUnitLevels,\n  setOrgUnits,\n  getICD11Options,\n  getTrackedEntityTypes,\n  setUserGroups,\n  // setFemaleOption,\n  // changeCerticateTemplate,\n  setCertificateLogo,\n  setFormMapping,\n  setCertificateTemplate,\n  setFemaleCode,\n  setFullnameOption,\n  setUserRole,\n  changeRoute,\n  setUILocale,\n  setIcdApiToken,\n  setCustomCertificate,\n  setAllOptionSets,\n  getAllPrograms,\n  getTrackedEntityType\n}) => {\n  const { metadataApi } = useApi();\n  const [loading, setLoading] = useState(false);\n  const [updatingDialog, setUpdatingDialog] = useState(false);\n  const [metadataUpdatedDate, setMetadataUpdatedDate] = useState(null);\n  useEffect(() => {\n    setLoading(true);\n    (async () => {\n      /** FOR TRANSLATION */\n      let translationData = await metadataApi.get(\"/api/dataStore/WHO_ICD11_COD/translation\");\n      console.log(\"init translation DataStore\");\n      if (translationData.status) {\n        let array = [];\n        let arrayLanguages = [\n          {\n            label: \"English\",\n            key: \"en\",\n          },\n          {\n            label: \"French\",\n            key: \"fr\",\n          },\n        ];\n        \n        Object.entries(localeFile.en.translation).forEach((value) => {\n          const findKey = TRANSLATIONS.find( ({key}) => key === value[0] );\n          let object = {\n            key: value[0],\n            translation: findKey ? {\n              en: findKey.translation.en,\n              fr: findKey.translation.fr\n            } : { en: value[1] }\n          };\n          array.push(object);\n        });\n        await metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/translation\", {\n          translations: array,\n          languages: arrayLanguages,\n        });\n        translationData = {\n          translations: array,\n          languages: arrayLanguages,\n        }\n      }\n      else{\n        console.log(translationData);\n        Object.entries(localeFile.en.translation).forEach((value) => {\n          let findKey = translationData.translations.find(e=>e.key === value[0]);\n          if(!findKey){\n            let object = {\n              key: value[0],\n              translation: { en: value[1] },\n            };\n            translationData.translations.push(object);\n          }\n        })\n        await metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/translation\", {\n          translations: translationData.translations,\n          languages: translationData.languages,\n        },\"PUT\");\n      }\n\n\n\n      Promise.all([\n        metadataApi.get(\"/api/dataStore/WHO_ICD11_COD/program\"),\n        metadataApi.getMe()\n      ]).then( async (results) => {\n\n        // This is for installation\n        Promise.all([\n          metadataApi.getOrgUnitGroups(),\n          metadataApi.getOrgUnitLevels(),\n          metadataApi.get(\n            \"/api/trackedEntityAttributes.json\",\n            { paging: false },\n            [\"fields=id,displayName,valueType,optionSet,formName\"]\n          ),\n          metadataApi.getTrackerDataElements(),\n          metadataApi.get(\"/api/users.json\", { paging: false }, [\n            \"fields=id,displayName,organisationUnits~size\",\n          ]),\n          metadataApi.get(\"/api/organisationUnits.json\", { paging: false }, [\n            \"fields=id,displayName,path,level,code\",\n          ]),\n          metadataApi.get(\"/api/trackedEntityTypes.json\", { paging: false }, [\n            \"fields=id,displayName\",\n          ]),\n          metadataApi.get(\"/api/userGroups.json\", { paging: false }, [\n            \"fields=id,displayName\",\n          ]),\n          metadataApi.get(\n            \"/api/programs.json\",\n            { paging: false },\n            [\n              \"fields=:owner,!created,!lastUpdated,!user,!lastUpdatedBy,!organisationUnits,programTrackedEntityAttributes[:owner,!created,!lastUpdated]\",\n              \"filter=programType:eq:WITH_REGISTRATION\"\n            ]\n          )\n        ]).then(set => {\n          // for admin module\n          setOrgUnitGroups(set[0].organisationUnitGroups);\n          setOrgUnitLevels(set[1].organisationUnitLevels);\n          setTeas(set[2].trackedEntityAttributes);\n          setTrackerDataElements(set[3].dataElements);\n          setUsers(set[4].users);\n          setOrgUnits(set[5].organisationUnits);\n          getTrackedEntityTypes(set[6].trackedEntityTypes);\n          setUserGroups(set[7].userGroups);\n          getAllPrograms(set[8].programs);\n        });\n        \n\n        await InitTranslation(translationData,results[1].settings.keyUiLocale);\n        setUILocale(results[1].settings.keyUiLocale)\n\n        \n\n        // for entry module\n        if (results[0].status) {\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/program\", {\n            id: null,\n          });\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/icdOptionSet\", {\n            id: null,\n          });\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/femaleOption\", {\n            code: null,\n          });\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/fullnameOption\", {\n            fullnameOption: false,\n          });\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/certificateTemplate\", {\n            certificate: null,\n          });\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/customCertificate\", {\n            certificate: null,\n          });\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/formMapping\", {\n            formMapping: null,\n          });\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/fullnameOption\", {\n            fullnameOption: false,\n          });\n          changeRoute(\"administration\");\n          setLoading(false);\n        } else {\n          if (results[0].id !== null) {\n            Promise.all([\n              // metadataApi.getProgramMetadata(results[0].id),\n              metadataApi.get(`/api/programs/${results[0].id}`, { paging: false }, [\n                \"fields=id,displayName,sharing,userGroupAccesses,trackedEntityType,organisationUnits[id,displayName,code,path,attributeValues],programTrackedEntityAttributes[mandatory,displayInList,searchable,trackedEntityAttribute[id,displayName,displayFormName,displayShortName,valueType,optionSet[id],unique]],programStages[id,displayName,programStageDataElements[displayInReports,sortOrder,compulsory,dataElement[id,displayName,displayFormName,displayShortName,description,valueType,optionSet[id]]\"\n              ]),\n              metadataApi.get(\"/api/dataStore/WHO_ICD11_COD/femaleOption\"),\n              metadataApi.get(\"/api/dataStore/WHO_ICD11_COD/icdOptionSet\"),\n              metadataApi.get(\n                \"/api/dataStore/WHO_ICD11_COD/certificateTemplate\"\n              ),\n              metadataApi.get(\"/api/dataStore/WHO_ICD11_COD/formMapping\"),\n              metadataApi.get(\"/api/dataStore/WHO_ICD11_COD/fullnameOption\"),\n              metadataApi.get(\"/api/dataStore/WHO_ICD11_COD/customCertificate\")\n            ]).then( async (res) => {\n              // Set userRoles\n              let roles = {\n                admin: false,\n                data: false,\n                view: false\n              };\n              results[1].userGroups.forEach( userGroup => {\n                const role = res[0].userGroupAccesses ? res[0].userGroupAccesses.find( ({id}) => id === userGroup.id )\n                  : res[0].sharing.userGroups[userGroup.id] ;\n                if ( role ) {\n                  if ( role.access.charAt(1) === 'w' ) {\n                    roles = {\n                      ...roles,\n                      admin: true\n                    }\n                  }\n                  if ( role.access.charAt(3) === 'w' ) {\n                    roles = {\n                      ...roles,\n                      data: true\n                    }\n                  }\n                  if ( role.access.charAt(0) === 'r' && role.access.charAt(2) === 'r'  ) {\n                    roles = {\n                      ...roles,\n                      view: true\n                    }\n                  }\n                }\n              });\n              setUserRole(roles);\n\n\n              // Get TET info\n              // setProgramMetadata(res[0]);\n              Promise.all([\n                metadataApi.get(\"/api/optionSets.json\", { paging: false }, \n                  [\n                    \"fields=id,displayName,options[id,displayName,code,sortOrder]\",\n                    `filter=id:!eq:${res[2].id}`,\n                  ]\n                ),\n                metadataApi.getTrackedEntityType(res[0].trackedEntityType.id),\n              ]).then( async (result) => {\n                setProgramMetadata({\n                  id: res[0].id,\n                  sharing: res[0].sharing,\n                  userGroupAccesses: res[0].userGroupAccesses,\n                  trackedEntityType: res[0].trackedEntityType.id,\n                  organisationUnits: res[0].organisationUnits,\n                  trackedEntityAttributes: res[0].programTrackedEntityAttributes.map((ptea) => {\n                    const tea = {\n                      compulsory: ptea.mandatory,\n                      id: ptea.trackedEntityAttribute.id,\n                      displayName: ptea.trackedEntityAttribute.displayName,\n                      displayFormName: ptea.trackedEntityAttribute.displayFormName\n                        ? ptea.trackedEntityAttribute.displayFormName\n                        : ptea.trackedEntityAttribute.displayShortName,\n                      valueType: ptea.trackedEntityAttribute.valueType,\n                      valueSet: null,\n                      optionSet: ptea.trackedEntityAttribute.optionSet ? ptea.trackedEntityAttribute.optionSet.id : null,\n                      displayInList: ptea.displayInList,\n                      searchable: ptea.searchable,\n                      unique: ptea.trackedEntityAttribute.unique\n                    };\n                    if (ptea.trackedEntityAttribute.optionSet) {\n                      tea.valueSet = result[0].optionSets\n                        .find((os) => os.id === ptea.trackedEntityAttribute.optionSet.id)\n                        .options.map((o) => {\n                          return {\n                            value: o.code,\n                            label: o.displayName\n                          };\n                        });\n                    }\n                    return tea;\n                  }),\n                  programStages: res[0].programStages.map((ps) => {\n                    const programStage = {\n                      id: ps.id,\n                      displayName: ps.displayName,\n                      dataElements: ps.programStageDataElements.map((psde) => {\n                        const dataElement = {\n                          displayInReports: psde.displayInReports,\n                          sortOrder: psde.sortOrder,\n                          compulsory: psde.compulsory,\n                          id: psde.dataElement.id,\n                          displayName: psde.dataElement.displayName,\n                          displayFormName: psde.dataElement.displayFormName\n                            ? psde.dataElement.displayFormName\n                            : psde.dataElement.displayShortName,\n                          description: psde.dataElement.description,\n                          valueType: psde.dataElement.valueType,\n                          valueSet: null,\n                          optionSet: psde.dataElement.optionSet ? psde.dataElement.optionSet.id : null\n                        };\n                        if (psde.dataElement.optionSet && psde.dataElement.optionSet.id !== res[2].id) {\n                          console.log(psde.dataElement);\n                          dataElement.valueSet = result[0].optionSets\n                            .find((os) => os.id === psde.dataElement.optionSet.id)\n                            .options.map((o) => {\n                              return {\n                                value: o.code,\n                                label: o.displayName\n                              };\n                            });\n                        }\n                        return dataElement;\n                      })\n                    };\n                    return programStage;\n                  })\n                });\n                getTrackedEntityType(result[1]);\n\n                await getICD11Options(require(\"../../asset/metadata/icd11_options.json\"));\n                metadataApi.get(\"/api/options.json\", { paging: false }, [\n                  \"fields=id,displayName,code,sortOrder,attributeValues[value,attribute[id]]\",\n                  \"filter=optionSet.id:eq:\" + res[2].id,\n                ])\n                .then(({ options }) => {\n                  getICD11Options(options);\n                  setProgramMetadata({\n                    id: res[0].id,\n                    sharing: res[0].sharing,\n                    userGroupAccesses: res[0].userGroupAccesses,\n                    trackedEntityType: res[0].trackedEntityType.id,\n                    organisationUnits: res[0].organisationUnits,\n                    trackedEntityAttributes: res[0].programTrackedEntityAttributes.map((ptea) => {\n                      const tea = {\n                        compulsory: ptea.mandatory,\n                        id: ptea.trackedEntityAttribute.id,\n                        displayName: ptea.trackedEntityAttribute.displayName,\n                        displayFormName: ptea.trackedEntityAttribute.displayFormName\n                          ? ptea.trackedEntityAttribute.displayFormName\n                          : ptea.trackedEntityAttribute.displayShortName,\n                        valueType: ptea.trackedEntityAttribute.valueType,\n                        valueSet: null,\n                        optionSet: ptea.trackedEntityAttribute.optionSet ? ptea.trackedEntityAttribute.optionSet.id : null,\n                        displayInList: ptea.displayInList,\n                        searchable: ptea.searchable,\n                        unique: ptea.trackedEntityAttribute.unique\n                      };\n                      if (ptea.trackedEntityAttribute.optionSet) {\n                        tea.valueSet = result[0].optionSets\n                          .find((os) => os.id === ptea.trackedEntityAttribute.optionSet.id)\n                          .options.map((o) => {\n                            return {\n                              value: o.code,\n                              label: o.displayName\n                            };\n                          });\n                      }\n                      return tea;\n                    }),\n                    programStages: res[0].programStages.map((ps) => {\n                      const programStage = {\n                        id: ps.id,\n                        displayName: ps.displayName,\n                        dataElements: ps.programStageDataElements.map((psde) => {\n                          const dataElement = {\n                            displayInReports: psde.displayInReports,\n                            sortOrder: psde.sortOrder,\n                            compulsory: psde.compulsory,\n                            id: psde.dataElement.id,\n                            displayName: psde.dataElement.displayName,\n                            displayFormName: psde.dataElement.displayFormName\n                              ? psde.dataElement.displayFormName\n                              : psde.dataElement.displayShortName,\n                            description: psde.dataElement.description,\n                            valueType: psde.dataElement.valueType,\n                            valueSet: null,\n                            optionSet: psde.dataElement.optionSet ? psde.dataElement.optionSet.id : null\n                          };\n                          if (psde.dataElement.optionSet) {\n                            console.log(psde.dataElement);\n                            dataElement.valueSet = psde.dataElement.optionSet.id !== res[2].id ? result[0].optionSets\n                              .find((os) => os.id === psde.dataElement.optionSet.id)\n                              .options.map((o) => {\n                                return {\n                                  value: o.code,\n                                  label: o.displayName\n                                };\n                              }) : options.map((o) => {\n                                return {\n                                  value: o.code,\n                                  label: o.displayName\n                                };\n                              });\n                          }\n                          return dataElement;\n                        })\n                      };\n                      return programStage;\n                    })\n                  })\n                });\n              });\n\n              // Set other states\n              setFemaleCode(res[1].code);\n              setFullnameOption(res[5].fullnameOption);\n              if (res[3].certificate !== null) setCertificateTemplate(res[3].certificate);\n              if (res[6].certificate !== null) setCustomCertificate(res[6].certificate);\n              setFormMapping(res[4]);\n              changeRoute(\"list\");\n              \n\n              // Get Token for ICD11 API\n              await fetch(\"https://dhis2.world/services/icd11\", {\n                method: \"POST\"\n              })\n              .then(response => response.json())\n              .then(result => {\n                setIcdApiToken(result.token);\n              })\n              .catch(error => console.log('error', error));\n\n              setLoading(false);\n\n              if ( results[0].metadataUpdatedDate ) {\n                if ( results[0].metadataUpdatedDate !== \"2025-05-05\" ) {\n                  setMetadataUpdatedDate(results[0]);\n                  setUpdatingDialog(true);\n                }\n              }\n              else {\n                setMetadataUpdatedDate({\n                  ...results[0],\n                  metadataUpdatedDate: \"2025-04-15\", // Not change this date\n                  version: \"2.0.0\"\n                });\n                setUpdatingDialog(true);\n              }\n\n            });\n          } else {\n            changeRoute(\"administration\");\n            setLoading(false);\n          }\n        }\n      });\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"header-bar-container\">\n        <HeaderBarContainer />\n      </div>\n      {loading ? (\n        <LoadingMask />\n      ) : (\n        <div className=\"app-content\">\n          {!loading && <ControlBar />}\n          {route === \"list\" && <RegisteredTeiList />}\n          {route === \"search\" && <SearchForm />}\n          {route === \"form\" && <Form />}\n          {route === \"administration\" && <Administration />}\n          {route === \"export\" && <Export />}\n          {route === \"dashboard\" && <Dashboard />}\n          {route === \"translation\" && <Translation />}\n        </div>\n      )}\n      <UpdateDialog\n        open={updatingDialog}\n        handleCloseUpdate={() => setUpdatingDialog(false)}\n        metadataUpdatedDate={metadataUpdatedDate}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    route: state.route,\n  };\n};\n\nconst mapDispatchToProps = {\n  changeRoute,\n  setUserRole,\n\n  // for admin module\n  setTeas,\n  setTrackerDataElements,\n  setUsers,\n  setUserGroups,\n  setOrgUnitGroups,\n  setOrgUnitLevels,\n  setOrgUnits,\n  getTrackedEntityTypes,\n  setAllOptionSets,\n  getAllPrograms,\n  getTrackedEntityType,\n\n  // for entry module\n  setProgramMetadata,\n  getICD11Options,\n  setFemaleOption,\n  changeCerticateTemplate,\n  setCertificateLogo,\n  setFormMapping,\n  setCertificateTemplate,\n  setCustomCertificate,\n  setFemaleCode,\n  setFullnameOption,\n  setUILocale,\n  setIcdApiToken\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/reducers/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Translation/const.js",["462"],"const LANGUAGES = [\n  { key: \"en\", label: \"English\" },\n  { key: \"fr\", label: \"French\" },\n  { key: \"ar\", label: \"Arabic\" }\n];\n\nconst TRANSLATION_KEYS_MAPPING = {\n  dataEntry: [\n    \"causeOfDeathApp\",\n    \"selectOrgUnit\",\n    \"newRegistration\",\n    \"search\",\n    \"list\",\n    \"exit\",\n    \"page\",\n    \"profile\",\n    \"clear\",\n    \"cancel\",\n    \"exitApp\",\n    \"orgUnit\",\n    \"certificate\",\n    \"causeOfDeath\",\n    \"frameA\",\n    \"frameB\",\n    \"medicalData\",\n    \"results\",\n    \"surgery\",\n    \"mannerOfDeath\",\n    \"fetalOrInfantDeath\",\n    \"lastUpdated\",\n    \"inputSearchText\",\n    \"select\",\n    \"triggerDesc\",\n    \"triggerAsc\",\n    \"cancelSort\",\n    \"print\",\n    \"close\",\n    \"reportedDate\",\n    \"incidentDate\",\n    \"printCertificate\",\n    \"reasonLeadingToDeath\",\n    \"timeFromOnsetToDeath\",\n    \"underlying\",\n    \"immediate\",\n    \"reportDirection\",\n    \"dueTo\",\n    \"otherReasonLeadingToDeath\",\n    \"underlyingCOD\",\n    \"icd11Chapter\",\n    \"icd11Grouping\",\n    \"icd11\",\n    \"surgeryWithin4months\",\n    \"surgeryDate\",\n    \"surgeryReason\",\n    \"autopsy\",\n    \"findings\",\n    \"posisoning\",\n    \"describe\",\n    \"occurrencePlace\",\n    \"occurrenceSpecifyPlace\",\n    \"pregnant\",\n    \"stillborn\",\n    \"hoursSurvived\",\n    \"birthWeight\",\n    \"pregnantWeeks\",\n    \"motherAge\",\n    \"perinatal\",\n    \"maternal\",\n    \"pregnancyLastYear\",\n    \"timePregnancy\",\n    \"pregnancyToDeath\",\n    \"warning\",\n    \"changes_you_made_may_not_be_saved\",\n    \"stay\",\n    \"leave\",\n    \"compute\",\n    \"note_WHO_digital_open_rule_integrated_cause_of_death_selection_Doris\",\n    \"icd11_tool\",\n    \"your_selection\",\n    \"type_to_start_searching\",\n    \"uniqueField\",\n    \"searchableFields\"\n  ],\n  anacodExport: [\"pleaseSelectYear\", \"run\", \"anacodExportExcel\"],\n  dashboard: [\n    \"mortalityLevels\",\n    \"mortalityFromBroadCausesOfDeath\",\n    \"mortalityByCauseAgeAndSex\",\n    \"mortalityFromNcds\",\n    \"mostFrequentCauseOfDeath\",\n    \"deathsByIcd11Chapter\",\n    \"mortalityFromBoardCausesOfDeath\",\n    \"proportionOfDeathFromBroadCausesAll\",\n    \"distributionOfDeathByBroadCausesAndAgeGroups\",\n    \"overViewDistributionOfDeath\",\n    \"clickOnBubleForDetail\",\n    \"communicable\",\n    \"nonCommunicable\",\n    \"externalCauses\",\n    \"illDefined\",\n    \"numberOfDeathBy\",\n    \"tuberculosis\",\n    \"sexuallyTransmittedDiseasesExcludingHiv\",\n    \"hiv\",\n    \"diarrhoealDiseases\",\n    \"pertussis\",\n    \"poliomyelitis\",\n    \"diphtheria\",\n    \"measles\",\n    \"tetanus\",\n    \"meningitis\",\n    \"hepatitisB\",\n    \"hepatitisC\",\n    \"malaria\",\n    \"tropicalClusterDiseases\",\n    \"lowerRespiratoryInfections\",\n    \"maternalConditions\",\n    \"conditionsArisingDuringThePerinatalPeriod\",\n    \"nutritionalDeficiencies\",\n    \"mouthAndOropharynxCancers\",\n    \"oesophagusCancer\",\n    \"stomachCancer\",\n    \"colonAndRectumCancers\",\n    \"liverCancer\",\n    \"pancreasCancer\",\n    \"tracheaBronchusAndLungCancers\",\n    \"melanomaAndOtherSkinCancers\",\n    \"breastCancer\",\n    \"cervixUteriCancer\",\n    \"corpusUteriCancer\",\n    \"ovaryCancer\",\n    \"prostateCancer\",\n    \"bladderCancer\",\n    \"lymphomasAndMultipleMyeloma\",\n    \"leukaemia\",\n    \"alzheimerAndOtherDementias\",\n    \"parkinsonDisease\",\n    \"hypertensiveDisease\",\n    \"ischaemicHeartDisease\",\n    \"cerebrovascularDisease\",\n    \"chronicObstructivePulmonaryDisease\",\n    \"asthma\",\n    \"digestiveDiseases\",\n    \"genitoUrinaryDiseases\",\n    \"congenitalAnomalies\",\n    \"roadTrafficAccidents\",\n    \"suicide\",\n    \"homicide\",\n    \"mortaliryFromNcds\",\n    \"malignantNeoplasms\",\n    \"diabetesMellitus\",\n    \"cardiovascularDiseases\",\n    \"respiratoryDiseases\",\n    \"numberOfDeathBySexAndAge\",\n    \"numberOfDeathByMonth\",\n    \"pneumonia\",\n    \"otherDiseasesOfTheDigestiveSystem\",\n    \"otherDirectObstetricDeaths\",\n    \"prematurity\",\n    \"symptomsSignAndAbnormalClinicalAndLaboratoryFindingsNotElsewhereClassified\",\n    \"otherAndUnspecifiedCongenitalMalformations\",\n    \"otherAndUnspecifiedPerinatalConditions\",\n    \"intrauterineHypoxiaAndBirthAsphyxia\",\n    \"name\",\n    \"points\",\n    \"certainInfectiousOrParasiticDiseases\",\n    \"neoplasms\",\n    \"diseasesOfTheBloodOrBloodFormingOrgans\",\n    \"diseasesOfTheImmuneSystem\",\n    \"endocrineNutritionalOrMetabolicDiseases\",\n    \"mentalBehaviouralOrNeurodevelopmentalDisorders\",\n    \"sleepWakeDisorders\",\n    \"diseasesOfTheNervousSystem\",\n    \"diseasesOfTheVisualSystem\",\n    \"diseasesOfTheEarOrMastoidProcess\",\n    \"diseasesOfTheCirculatorySystem\",\n    \"diseasesOfTheRespiratorySystem\",\n    \"diseasesOfTheDigestiveSystem\",\n    \"diseasesOfTheSkin\",\n    \"diseasesOfTheMusculoskeletalSystemOrConnectiveTissue\",\n    \"diseasesOfTheGenitourinarySystem\",\n    \"conditionsRelatedToSexualHealth\",\n    \"pregnancyChildbirthOrThePuerperium\",\n    \"certainConditionsOriginatingInThePerinatalPeriod\",\n    \"developmentalAnomalies\",\n    \"symptomsSignsOrClinicalFindingsNotElsewhereClassified\",\n    \"injuryPoisoningOrCertainOtherConsequencesOfExternalCauses\",\n    \"externalCausesOfMorbidityOrMortality\",\n    \"factorsInfluencingHealthStatusOrContactWithHealthServices\",\n    \"codesForSpecialPurposes\",\n    \"numberOfMalariaDeathsByMonth\",\n    \"numberOfMalariaDeathsPlaceOfDeath\",\n    \"numberOfMalariaDeathsBySex\",\n    \"numberOfMalariaDeathsBySexAndDetailedAgeGroup\",\n    \"numberOfMalariaDeathsAndPercentOfAllMalariaDeathsByBroadAgeGroup\",\n    \"numberOfMalariaDeathsComparedWithOtherCausesOfDeaths\",\n    \"percentOfTotalMalariaDeaths\",\n    \"numberOfMalariaDeaths\",\n    \"otherCauses\",\n    \"numberOfTuberculosisDeathsByMonth\",\n    \"numberOfTuberculosisDeathsByPlaceOfDeath\",\n    \"numberOfTuberculosisDeathsBySex\",\n    \"numberOfTuberculosisDeathsBySexAndDetailedAgeGroup\",\n    \"numberOfTuberculosisDeathsAndPercentOfAllTuberculosisDeathsByBroadAgeGroup\",\n    \"numberOfTuberculosisDeathsComparedWithOtherCausesOfDeaths\",\n    \"percentOfTotalTuberculosisDeaths\",\n    \"numberOfTuberculosisDeaths\",\n    \"numberOfAidsDeathsByMonth\",\n    \"numberOfAidsDeathsPlaceOfDeath\",\n    \"numberOfAidsDeathsBySex\",\n    \"numberOfAidsDeathsBySexAndDetailedAgeGroup\",\n    \"numberOfAidsDeathsAndPercentOfAllAidsDeathsByBroadAgeGroup\",\n    \"numberOfAidsDeathsComparedWithOtherCausesOfDeaths\",\n    \"aids\",\n    \"percentOfTotalAidsDeaths\",\n    \"numberOfAidsDeaths\",\n    \"tb\",\n    \"other\",\n    \"numberOfDeath\",\n    \"percentOfTotalDeathAllCauses\",\n    \"numberOfDeathsFromTbAidsMalariaAndOtherCausesAgeGroup\",\n    \"distributionOfDeathsByTbAidsAndMalariaBySexAndAge\",\n    \"percentageOfDeathsFromTbAidsAndMalariaOutOfAllDeathsFromCommunicableDiseases\",\n    \"numberOfTbAndAidsDeathsAndPercentOfTheseDeathsOutOfAllDeaths15YearsAndAbove\",\n  ],\n  administration: [\n    \"step1Installation\",\n    \"step2Attribute\",\n    \"step3FrameA\",\n    \"step4FrameB\",\n    \"step5OUs\",\n    \"step6Users\",\n    \"step7Review\",\n    \"errorMissingTET\",\n    \"step1Attributes\",\n    \"step2Certificate\",\n    \"saveSuccessful\",\n    \"selectionTitle\",\n    \"globalICDTool\",\n    \"otherICDTool\",\n    \"defaultInstallation\",\n    \"defaultInstallationInfo\",\n    \"customInstallation\",\n    \"customInstallationInfo\",\n    \"installWithDocker\",\n    \"installationWarning\",\n    \"installationWarningTitle\",\n    \"backToMaintenance\",\n    \"trackedEntityType\",\n    \"systemID\",\n    \"defaultAttribute\",\n    \"otherAttributes\",\n    \"otherAvailableAttributes\",\n    \"otherSelectedAttributes\",\n    \"defaultDEsInFrameA\",\n    \"otherSectionsInFrameA\",\n    \"availableDEs\",\n    \"selectedDEs\",\n    \"add\",\n    \"reload\",\n    \"defaultSectionsInFrameB\",\n    \"otherSectionsInFrameB\",\n    \"OULevel\",\n    \"OUGroup\",\n    \"deselect\",\n    \"selectAll\",\n    \"deselectAll\",\n    \"adminGroup\",\n    \"captureGroup\",\n    \"viewGroup\",\n    \"installing\",\n    \"waitForInstalling\",\n    \"importAttributes\",\n    \"importOptionSets\",\n    \"importTrackedEntityAttributes\",\n    \"importTrackedEntityTypes\",\n    \"importDataElements\",\n    \"importPrograms\",\n    \"importProgramStages\",\n    \"importProgramStageSections\",\n    \"importProgramIndicators\",\n    \"importIndicators\",\n    \"importOptions\",\n    \"complete\",\n    \"programID\",\n    \"defaultCertificate\",\n    \"customCertificate\",\n    \"certificateTitle\",\n    \"certificateLogo\",\n    \"upload\",\n    \"addItemBody\",\n    \"addItemFooter\",\n    \"reviewDefaultCertificate\",\n    \"certificateAddItemTitle\",\n    \"back\",\n    \"install\",\n    \"next\",\n    \"save\",\n    \"selectName\",\n    \"selectNameOption\",\n    \"selectTrackedEntityType\",\n    \"femaleOption\",\n    \"selectOption\",\n    \"noname\",\n    \"fullname\",\n    \"firstlastname\",\n    \"firstmiddlelastname\",\n    \"firstname\",\n    \"middlename\",\n    \"lastname\",\n    \"help\",\n    \"userManual\",\n    \"causeOfDeathVersion\",\n    \"appFeatures\",\n    \"installation\"\n  ],\n  translation: [\n    \"translation\",\n    \"dataEntry\",\n    \"anacodExport\",\n    \"dashboard\",\n    \"administration\",\n    \"addLanguage\",\n    \"pleaseSelectLanguage\",\n  ],\n};\n\nconst TRANSLATIONS = [\n  {\n    key: \"selectOrgUnit\",\n    translation: {\n      ar: \"حدد الوحدة التنظيمية\",\n      en: \"Select organisation unit\",\n      fr: \"Sélectionnez l'unité d'organisation\"\n    }\n  },\n  {\n    key: \"newRegistration\",\n    translation: {\n      ar: \"تسجيل جديد\",\n      en: \"New Registration\",\n      fr: \" Nouvelle inscription\"\n    }\n  },\n  {\n    key: \"search\",\n    translation: { ar: \"بحث\", en: \"Search\", fr: \"Chercher\" }\n  },\n  {\n    key: \"exit\",\n    translation: { ar: \"خروج\", en: \"Exit\", fr: \"Sortir\" }\n  },\n  {\n    key: \"page\",\n    translation: { ar: \"صفحة\", en: \"Page\", fr: \"Page\" }\n  },\n  {\n    key: \"profile\",\n    translation: {\n      ar: \"الملف الشخصي\",\n      en: \"Profile\",\n      fr: \"Le profil\"\n    }\n  },\n  {\n    key: \"save\",\n    translation: { ar: \"حفظ\", en: \"Save\", fr: \"Sauver\" }\n  },\n  {\n    key: \"cancel\",\n    translation: { ar: \"إلغاء\", en: \"Cancel\", fr: \"Annuler\" }\n  },\n  {\n    key: \"certificate\",\n    translation: { ar: \"شهادة\", en: \"Certificate\", fr: \"Certificat\" }\n  },\n  {\n    key: \"causeOfDeath\",\n    translation: {\n      ar: \"سبب الوفاة\",\n      en: \"Cause of Death\",\n      fr: \"Cause de décès\"\n    }\n  },\n  {\n    key: \"frameA\",\n    translation: { ar: \"إطار أ\", en: \"Frame A\", fr: \"Cadre A\" }\n  },\n  {\n    key: \"frameB\",\n    translation: { ar: \"إطار ب\", en: \"Frame B\", fr: \"Cadre B\" }\n  },\n  {\n    key: \"medicalData\",\n    translation: {\n      ar: \"البيانات الطبية\",\n      en: \"Medical data\",\n      fr: \"Données médicales\"\n    }\n  },\n  {\n    key: \"results\",\n    translation: { ar: \"النتائج\", en: \"Results\", fr: \"Résultats\" }\n  },\n  {\n    key: \"surgery\",\n    translation: {\n      ar: \"عملية جراحية\",\n      en: \"Surgery\",\n      fr: \"Opération\"\n    }\n  },\n  {\n    key: \"mannerOfDeath\",\n    translation: {\n      ar: \"طريقة الوفاة\",\n      en: \"Manner of Death\",\n      fr: \"Manière de mourir\"\n    }\n  },\n  {\n    key: \"fetalOrInfantDeath\",\n    translation: {\n      ar: \"موت الجنين أو الرضيع\",\n      en: \"Fetal of Infant Death\",\n      fr: \"Mort fœtale du nourrisson\"\n    }\n  },\n  {\n    key: \"pleaseSelectYear\",\n    translation: {\n      ar: \"الرجاء تحديد السنة\",\n      en: \"Please select year\",\n      fr: \"Veuillez sélectionner l'année\"\n    }\n  },\n  {\n    key: \"run\",\n    translation: { ar: \"تنفيذ\", en: \"RUN\", fr: \"COURS\" }\n  },\n  {\n    key: \"anacodExportExcel\",\n    translation: {\n      ar: \"تصدير تحليل الوفيات وأسبابها بصيغة إكسل\",\n      en: \"Anacod Export (CSV)\",\n      fr: \"Export Anacode (CSV)\"\n    }\n  },\n  {\n    key: \"mortalityLevels\",\n    translation: {\n      ar: \"معدل الوفيات\",\n      en: \"Mortality levels\",\n      fr: \"Niveaux de mortalité\"\n    }\n  },\n  {\n    key: \"mortalityFromBroadCausesOfDeath\",\n    translation: {\n      ar: \"الوفيات الناتجة عن أسباب الوفاه الرئيسية\",\n      en: \"Mortality from broad causes of death\",\n      fr: \"Mortalité due aux causes générales de décès\"\n    }\n  },\n  {\n    key: \"mortalityByCauseAgeAndSex\",\n    translation: {\n      ar: \"الوفيات حسب السبب والعمر والجنس\",\n      en: \"Mortality by cause, age and sex\",\n      fr: \"Mortalité par cause, âge et sexe\"\n    }\n  },\n  {\n    key: \"mortalityFromNcds\",\n    translation: {\n      ar: \"الوفيات من الأمراض غير المعدية\",\n      en: \"Mortality from NCDs\",\n      fr: \"Mortalité due aux MNT\"\n    }\n  },\n  {\n    key: \"mostFrequentCauseOfDeath\",\n    translation: {\n      ar: \"السبب الأكثر شيوعًا للوفاة\",\n      en: \"Most frequent cause of death\",\n      fr: \"Cause de décès la plus fréquente\"\n    }\n  },\n  {\n    key: \"deathsByIcd11Chapter\",\n    translation: {\n      ar: \"الوفيات حسب فصل التصنيف الدولي للأمراض، المراجعة الحادية عشر\",\n      en: \"Deaths by ICD-11 Chapter\",\n      fr: \"Deaths by ICD-11 Chapter\"\n    }\n  },\n  {\n    key: \"next\",\n    translation: { ar: \"التالي\", en: \"Next\", fr: \"Suivante\" }\n  },\n  {\n    key: \"femaleOption\",\n    translation: { ar: \"خيار الأنثى\", en: \"* Female Option\" }\n  },\n  {\n    key: \"add\",\n    translation: { ar: \"إضافة\", en: \"Add\", fr: \"Ajouter\" }\n  },\n  {\n    key: \"reload\",\n    translation: { ar: \"إعادة تحميل\", en: \"Reload\", fr: \"Recharger\" }\n  },\n  {\n    key: \"translation\",\n    translation: { ar: \"ترجمة\", en: \"Translation\", fr: \"Traduction\" }\n  },\n  {\n    key: \"dataEntry\",\n    translation: {\n      ar: \"إدخال البيانات\",\n      en: \"Data Entry\",\n      fr: \"Saisie des données\"\n    }\n  },\n  {\n    key: \"anacodExport\",\n    translation: {\n      ar: \"تصدير تحليل الوفيات وأسبابها\",\n      en: \"Anacod Export\",\n      fr: \"Exportation d'Anacod\"\n    }\n  },\n  {\n    key: \"dashboard\",\n    translation: {\n      ar: \"لوحة المعلومات\",\n      en: \"Dashboard\",\n      fr: \"Tableau de bord\"\n    }\n  },\n  {\n    key: \"administration\",\n    translation: {\n      ar: \"إدارة\",\n      en: \"Administration\",\n      fr: \"Administration\"\n    }\n  },\n  {\n    key: \"exitApp\",\n    translation: {\n      ar: \"الخروج من التطبيق\",\n      en: \"Exit App\",\n      fr: \"Quitter l'application\"\n    }\n  },\n  {\n    key: \"orgUnit\",\n    translation: {\n      ar: \"الوحدة التنظيمية\",\n      en: \"Org Unit\",\n      fr: \"Unité organisationnelle\"\n    }\n  },\n  {\n    key: \"addLanguage\",\n    translation: {\n      ar: \"إضافة لغة\",\n      en: \"Add Language\",\n      fr: \"Ajouter une langue\"\n    }\n  },\n  {\n    key: \"pleaseSelectLanguage\",\n    translation: {\n      ar: \"الرجاء تحديد لغة\",\n      en: \"Please select a language\",\n      fr: \"Veuillez sélectionner une langue\"\n    }\n  },\n  {\n    key: \"lastUpdated\",\n    translation: {\n      ar: \"آخر تحديث\",\n      en: \"Last updated\",\n      fr: \"Dernière mise à jour\"\n    }\n  },\n  {\n    key: \"causeOfDeathApp\",\n    translation: {\n      ar: \"تطبيق أسباب الوفاة\",\n      en: \"Cause Of Death App\",\n      fr: \" Application Cause de décès\"\n    }\n  },\n  {\n    key: \"inputSearchText\",\n    translation: {\n      ar: \"إدخال نص البحث\",\n      en: \"Input search text\",\n      fr: \"Saisir le texte de recherche\"\n    }\n  },\n  {\n    key: \"select\",\n    translation: { ar: \"حدد\", en: \"Select\", fr: \"Sélectionner\" }\n  },\n  {\n    key: \"triggerDesc\",\n    translation: {\n      ar: \"انقر للترتيب تنازليًا\",\n      en: \"Click to sort descending\",\n      fr: \"Cliquez pour trier par ordre décroissant\"\n    }\n  },\n  {\n    key: \"triggerAsc\",\n    translation: {\n      ar: \"انقر للترتيب تصاعدياً\",\n      en: \"Click to sort ascending\",\n      fr: \"Cliquez pour trier par ordre croissant\"\n    }\n  },\n  {\n    key: \"cancelSort\",\n    translation: {\n      ar: \"انقر لإلغاء الترتيب\",\n      en: \"Click to cancel sorting\",\n      fr: \"Cliquez pour annuler le tri\"\n    }\n  },\n  {\n    key: \"step1Installation\",\n    translation: {\n      ar: \"1 - التثبيت\",\n      en: \"1 - Installation\",\n      fr: \"1 - Mise en place\"\n    }\n  },\n  {\n    key: \"step2Attribute\",\n    translation: {\n      ar: \"2 - السمات\",\n      en: \"2 - Attributes\",\n      fr: \"2 - Attributs\"\n    }\n  },\n  {\n    key: \"step3FrameA\",\n    translation: {\n      ar: \"3 - إطار أ\",\n      en: \"3 - Form\",\n      fr: \"3 - Cadre A\"\n    }\n  },\n  {\n    key: \"step4FrameB\",\n    translation: {\n      ar: \"4 - إطار ب\",\n      en: \"4 - Frame B\",\n      fr: \"4 - Cadre B\"\n    }\n  },\n  {\n    key: \"step5OUs\",\n    translation: {\n      ar: \"4 - تعيين وحدات تنظيمية\",\n      en: \"4 - Assign OrgUnits\",\n      fr: \"4 - Attribuer des unités d'organisation\"\n    }\n  },\n  {\n    key: \"step6Users\",\n    translation: {\n      ar: \"5 - تعيين مستخدمين\",\n      en: \"5 - Assign Users\",\n      fr: \"5 - Attribuer des utilisateurs\"\n    }\n  },\n  {\n    key: \"step7Review\",\n    translation: {\n      ar: \"6 - مراجعة وإنهاء\",\n      en: \"6 - Review & Finish\",\n      fr: \"6 - Réviser et terminer\"\n    }\n  },\n  {\n    key: \"errorMissingTET\",\n    translation: {\n      ar: \"خطأ، يرجى تحديد كل السمات الافتراضية ونوع الكيان المتعقب.\",\n      en: \"ERROR Please select ALL default attributes and Tracked Entity Type.\",\n      fr: \"ERREUR Veuillez sélectionner TOUS les attributs par défaut et le type d'entité suivie.\"\n    }\n  },\n  {\n    key: \"step1Attributes\",\n    translation: {\n      ar: \"1 - السمات\",\n      en: \"1 - Attributes\",\n      fr: \"1 - Attributs\"\n    }\n  },\n  {\n    key: \"step2Certificate\",\n    translation: {\n      ar: \"2 - الشهادة\",\n      en: \"2 - Certificate\",\n      fr: \"2 - Certificat\"\n    }\n  },\n  {\n    key: \"saveSuccessful\",\n    translation: {\n      ar: \"تم الحفظ بنجاح!\",\n      en: \"Successfully Save!\",\n      fr: \"Enregistrer avec succès!\"\n    }\n  },\n  {\n    key: \"selectionTitle\",\n    translation: {\n      ar: \"تثبيت حزمة الشهادة الطبية لأسباب الوفاة الخاصة بمنظمة الصحة العالمية\",\n      en: \"INSTALLATION OF WHO MCCD PACKAGE\",\n      fr: \"INSTALLATION DU PACKAGE WHO MCCD\"\n    }\n  },\n  {\n    key: \"globalICDTool\",\n    translation: {\n      ar: \"استخدم رابط أداة التصنيف الدولي للأمراض الخاصة بمنظمة الصحة العالمية\",\n      en: \"Use global WHO ICD Tool url\",\n      fr: \"Utiliser l'URL de l'outil ICD global de l'OMS\"\n    }\n  },\n  {\n    key: \"otherICDTool\",\n    translation: {\n      ar: \"استخدم رابط آخر لأداة التصنيف الدولي للأمراض\",\n      en: \"Use other ICD Tool url\",\n      fr: \"Utiliser une autre URL de l'outil ICD\"\n    }\n  },\n  {\n    key: \"defaultInstallation\",\n    translation: {\n      ar: \"تثبيت افتراضي\",\n      en: \"Default Installation\",\n      fr: \"Installation par défaut\"\n    }\n  },\n  {\n    key: \"defaultInstallationInfo\",\n    translation: {\n      ar: \"استخدم برنامج الشهادة الطبية لأسباب الوفاة الافتراضي مع الحد الأدنى من الاعدادات\",\n      en: \"Use default MCCOD program with minimum configurations\",\n      fr: \"Utiliser le programme MCCOD par défaut avec des configurations minimales\"\n    }\n  },\n  {\n    key: \"customInstallation\",\n    translation: {\n      ar: \"تثبيت مخصص\",\n      en: \"Custom Installation\",\n      fr: \"Installation personnalisée\"\n    }\n  },\n  {\n    key: \"customInstallationInfo\",\n    translation: {\n      ar: \"استخدم برنامج الشهادة الطبية لأسباب الوفاة الافتراضي مع بيانات وصفية إضافية حسب حاجتك\",\n      en: \"Use default MCCOD program with additional metadata as you need\",\n      fr: \"Utilisez le programme MCCOD par défaut avec des métadonnées supplémentaires selon vos besoins\"\n    }\n  },\n  {\n    key: \"installWithDocker\",\n    translation: {\n      ar: \"كيفية تثبيت خادم واجهة برمجة التطبيقات الخاص بالتصنيف الدولي للأمراض، المراجعة الحادية عشر باستخدام دوكر:\",\n      en: \"How to install ICD-11 API Server using Docker:\",\n      fr: \"Comment installer le serveur API ICD-11 à l'aide de Docker:\"\n    }\n  },\n  {\n    key: \"installationWarning\",\n    translation: {\n      ar: \"تعذر على التطبيق بدء عملية التثبيت\",\n      en: \"COD app could not start the installation process.\",\n      fr: \"L'application COD n'a pas pu démarrer le processus d'installation.\"\n    }\n  },\n  {\n    key: \"installationWarningTitle\",\n    translation: {\n      ar: \"يتطلب إعداد التطبيق وحدات تنظيمية وتعيين مستخدمين. يرجى التحقق مما إذا كانوا قد أنشأوا\",\n      en: \"The app setup requires Organisation Units and assigned Users. Please check whether they created.\",\n      fr: \"La configuration de l'application nécessite des unités organisationnelles et des utilisateurs affectés. Veuillez vérifier s'ils ont créé.\"\n    }\n  },\n  {\n    key: \"backToMaintenance\",\n    translation: {\n      ar: \"انتقل إلى تطبيق الضبط\",\n      en: \"Go to Maintenance app\",\n      fr: \"Accédez à l'application Maintenance\"\n    }\n  },\n  {\n    key: \"trackedEntityType\",\n    translation: {\n      ar: \"نوع الكيان المتتبع\",\n      en: \"Tracked Entity Type\",\n      fr: \"Type d'entité suivie\"\n    }\n  },\n  {\n    key: \"systemID\",\n    translation: {\n      ar: \"الرقم التعريفي للنظام (يتم إنشاؤه تلقائياً)\",\n      en: \"COD System ID (auto-generated)\",\n      fr: \"ID système COD (généré automatiquement)\"\n    }\n  },\n  {\n    key: \"defaultAttribute\",\n    translation: {\n      ar: \"السمات الافتراضية\",\n      en: \"Default attributes\",\n      fr: \"Attributs par défaut\"\n    }\n  },\n  {\n    key: \"otherAttributes\",\n    translation: {\n      ar: \"سمات أخرى\",\n      en: \"Other attributes\",\n      fr: \"Autres attributs\"\n    }\n  },\n  {\n    key: \"otherAvailableAttributes\",\n    translation: {\n      ar: \"السمات المتاحة\",\n      en: \"Available attributes\",\n      fr: \"Attributs disponibles\"\n    }\n  },\n  {\n    key: \"otherSelectedAttributes\",\n    translation: {\n      ar: \"السمات المختارة\",\n      en: \"Selected attributes\",\n      fr: \"Attributs sélectionnés\"\n    }\n  },\n  {\n    key: \"defaultDEsInFrameA\",\n    translation: {\n      ar: \"عناصر البيانات الافتراضية (لا يمكن تغييرها)\",\n      en: \"Default data elements (cannot be changed)\",\n      fr: \"Éléments de données par défaut (ne peuvent pas être modifiés)\"\n    }\n  },\n  {\n    key: \"otherSectionsInFrameA\",\n    translation: {\n      ar: \"أقسام أخرى\",\n      en: \"Other sections\",\n      fr: \"Autres rubriques\"\n    }\n  },\n  {\n    key: \"availableDEs\",\n    translation: {\n      ar: \"عناصر البيانات المتاحة\",\n      en: \"Available data elements\",\n      fr: \"Éléments de données disponibles\"\n    }\n  },\n  {\n    key: \"selectedDEs\",\n    translation: {\n      ar: \"عناصر البيانات المختارة\",\n      en: \"Selected data elements\",\n      fr: \"Éléments de données sélectionnés\"\n    }\n  },\n  {\n    key: \"defaultSectionsInFrameB\",\n    translation: {\n      ar: \"الأقسام الافتراضية\",\n      en: \"Default sections\",\n      fr: \"Rubriques par défaut\"\n    }\n  },\n  {\n    key: \"otherSectionsInFrameB\",\n    translation: {\n      ar: \"أقسام أخرى\",\n      en: \"Other sections\",\n      fr: \"Autres rubriques\"\n    }\n  },\n  {\n    key: \"OULevel\",\n    translation: {\n      ar: \"مستوى الوحدة التنظيمية:\",\n      en: \"Organisation unit level:\",\n      fr: \"Niveau de l'unité d'organisation:\"\n    }\n  },\n  {\n    key: \"OUGroup\",\n    translation: {\n      ar: \"مجموعة الوحدة التنظيمية:\",\n      en: \"Organisation unit group:\",\n      fr: \"Groupe d'unités d'organisation:\"\n    }\n  },\n  {\n    key: \"deselect\",\n    translation: {\n      ar: \"إلغاء تحديد\",\n      en: \"Deselect\",\n      fr: \"Désélectionner\"\n    }\n  },\n  {\n    key: \"selectAll\",\n    translation: {\n      ar: \"تحديد الكل\",\n      en: \"Select all\",\n      fr: \"Tout sélectionner\"\n    }\n  },\n  {\n    key: \"deselectAll\",\n    translation: {\n      ar: \"إلغاء تحديد الكل\",\n      en: \"Deselect all\",\n      fr: \"Tout déselectionner\"\n    }\n  },\n  {\n    key: \"adminGroup\",\n    translation: {\n      ar: \"مجموعة الإدارة\",\n      en: \"ADMIN GROUP\",\n      fr: \"GROUPE D'ADMINISTRATION\"\n    }\n  },\n  {\n    key: \"captureGroup\",\n    translation: {\n      ar: \"مجموعة الإدخال\",\n      en: \"CAPTURE GROUP\",\n      fr: \"GROUPE DE CAPTURE\"\n    }\n  },\n  {\n    key: \"viewGroup\",\n    translation: {\n      ar: \"مجموعة الاستعراض\",\n      en: \"VIEW GROUP\",\n      fr: \"VOIR LE GROUPE\"\n    }\n  },\n  {\n    key: \"installing\",\n    translation: {\n      ar: \"تثبيت تطبيق أسباب الوفاة\",\n      en: \"Installing the COD app\",\n      fr: \"22 / 5,000 Translation results Translation result Installation de l'application COD\"\n    }\n  },\n  {\n    key: \"waitForInstalling\",\n    translation: {\n      ar: \"يرجى الانتظار حتى تنتهي العملية.\",\n      en: \"Please wait untill the process done.\",\n      fr: \"Veuillez patienter jusqu'à ce que le processus soit terminé.\"\n    }\n  },\n  {\n    key: \"importAttributes\",\n    translation: {\n      ar: \"استيراد السمات\",\n      en: \"Importing Attributes\",\n      fr: \"Importation d'attributs\"\n    }\n  },\n  {\n    key: \"importOptionSets\",\n    translation: {\n      ar: \"استيراد حزم الخيارات\",\n      en: \"Importing Option Sets\",\n      fr: \"Importation de jeux d'options\"\n    }\n  },\n  {\n    key: \"importTrackedEntityAttributes\",\n    translation: {\n      ar: \"استيراد سمات  الكيانات المتتبعة\",\n      en: \"Importing Tracked Entity Attributes\",\n      fr: \"Importation des attributs d'entité suivie\"\n    }\n  },\n  {\n    key: \"importTrackedEntityTypes\",\n    translation: {\n      ar: \"استيراد أنواع الكيانات المتتبعة\",\n      en: \"Importing Tracked Entity Types\",\n      fr: \"Importation de types d'entités suivies\"\n    }\n  },\n  {\n    key: \"importDataElements\",\n    translation: {\n      ar: \"استيراد عناصر البيانات\",\n      en: \"Importing Data Elements\",\n      fr: \"Importation d'éléments de données\"\n    }\n  },\n  {\n    key: \"importPrograms\",\n    translation: {\n      ar: \"استيراد البرامج\",\n      en: \"Importing Programs\",\n      fr: \"Importation de programmes\"\n    }\n  },\n  {\n    key: \"importProgramStages\",\n    translation: {\n      ar: \"استيراد مراحل البرامج\",\n      en: \"Importing Program Stages\",\n      fr: \"Importation des étapes du programme\"\n    }\n  },\n  {\n    key: \"importProgramStageSections\",\n    translation: {\n      ar: \"استيراد أقسام مراحل البرامج\",\n      en: \"Importing Program Stage Sections\",\n      fr: \"Importation de sections d'étape de programme\"\n    }\n  },\n  {\n    key: \"importProgramIndicators\",\n    translation: {\n      ar: \"استيراد مؤشرات البرامج\",\n      en: \"Importing Program Indicators\",\n      fr: \"Importation des indicateurs de programme\"\n    }\n  },\n  {\n    key: \"importIndicators\",\n    translation: {\n      ar: \"استيراد المؤشرات\",\n      en: \"Importing Indicators\",\n      fr: \"Importation d'indicateurs\"\n    }\n  },\n  {\n    key: \"importOptions\",\n    translation: {\n      ar: \"استيراد الخيارات\",\n      en: \"Importing Options\",\n      fr: \"Options d'importation\"\n    }\n  },\n  {\n    key: \"complete\",\n    translation: {\n      ar: \"اكتمل التثبيت\",\n      en: \"Install Complete\",\n      fr: \"Installation terminée\"\n    }\n  },\n  {\n    key: \"programID\",\n    translation: {\n      ar: \"معرف البرنامج:\",\n      en: \"The program id:\",\n      fr: \"L'identifiant du programme:\"\n    }\n  },\n  {\n    key: \"defaultCertificate\",\n    translation: { ar: \"افتراضي\", en: \"Default\", fr: \"Défaut\" }\n  },\n  {\n    key: \"customCertificate\",\n    translation: { ar: \"مخصص\", en: \"Custom\", fr: \"Personnalisé\" }\n  },\n  {\n    key: \"certificateTitle\",\n    translation: { ar: \"عنوان\", en: \"Title\", fr: \"Titre\" }\n  },\n  {\n    key: \"certificateLogo\",\n    translation: { ar: \"شعار\", en: \"Logo\", fr: \"Logo\" }\n  },\n  {\n    key: \"upload\",\n    translation: { ar: \"رفع/تحميل\", en: \"Upload\", fr: \"Télécharger\" }\n  },\n  {\n    key: \"addItemBody\",\n    translation: {\n      ar: \"إضافة عنصر إلى النص الأساسي\",\n      en: \"Add an item to Body\",\n      fr: \"Ajouter un élément au corps\"\n    }\n  },\n  {\n    key: \"addItemFooter\",\n    translation: {\n      ar: \"إضافة عنصر إلى التذييل\",\n      en: \"Add an item to Footer\",\n      fr: \"Ajouter un élément au pied de page\"\n    }\n  },\n  {\n    key: \"reviewDefaultCertificate\",\n    translation: { ar: \"مراجعة\", en: \"Review\", fr: \"Passer en revue\" }\n  },\n  {\n    key: \"certificateAddItemTitle\",\n    translation: {\n      ar: \"إضافة عنصر إلى\",\n      en: \"Add an item to\",\n      fr: \"Ajouter un élément à\"\n    }\n  },\n  {\n    key: \"print\",\n    translation: { ar: \"طباعة\", en: \"Print\", fr: \"Imprimer\" }\n  },\n  {\n    key: \"close\",\n    translation: { ar: \"إغلاق\", en: \"Close\", fr: \"Proche\" }\n  },\n  {\n    key: \"reportedDate\",\n    translation: {\n      ar: \"تاريخ الإبلاغ\",\n      en: \"Reported Date\",\n      fr: \"Date du rapport\"\n    }\n  },\n  {\n    key: \"incidentDate\",\n    translation: {\n      ar: \"تاريخ الوفاة\",\n      en: \"Date of Death\",\n      fr: \"Date de décès\"\n    }\n  },\n  {\n    key: \"printCertificate\",\n    translation: { ar: \"شهادة\", en: \"Certificate\", fr: \"Certificat\" }\n  },\n  {\n    key: \"reasonLeadingToDeath\",\n    translation: {\n      ar: \"مرض أو حالة تؤدي مباشرة إلى الوفاة\",\n      en: \"Disease or condition directly leading to death\",\n      fr: \"Maladie ou affection entraînant directement la mort\"\n    }\n  },\n  {\n    key: \"timeFromOnsetToDeath\",\n    translation: {\n      ar: \"الوقت من التشخيص إلى الوفاة\",\n      en: \"Time from onset to death\",\n      fr: \"Délai entre le début et la mort\"\n    }\n  },\n  {\n    key: \"underlying\",\n    translation: {\n      ar: \"السبب المؤدي الى الوفاة\",\n      en: \"Underlying\",\n      fr: \"Sous-jacent\"\n    }\n  },\n  {\n    key: \"immediate\",\n    translation: {\n      ar: \"سبب الوفاة المباشر\",\n      en: \"Immediate\",\n      fr: \"Immédiat\"\n    }\n  },\n  {\n    key: \"reportDirection\",\n    translation: {\n      ar: \"قم بالإبلاغ عن تسلسل الأحداث بالترتيب \\\"بسبب\\\" (ب - ج - د) إذا كان ذلك ممكنًا. حدد السبب الأساسي في أدنى سطر مستخدم ، وحدد مربع الاختيار لـ \\\"الأساسي\\\"\",\n      en: \"Report chain of events in 'due to' order (B - C - D) if applicable. State the underlying cause on the lowest used line, and tick the checkbox for 'Underlying'\",\n      fr: \"Indiquez la chaîne d'événements dans l'ordre « dû à » (B - C - D), le cas échéant. Indiquez la cause sous-jacente sur la ligne utilisée la plus basse et cochez la case \\\"Sous-jacent\\\"\"\n    }\n  },\n  {\n    key: \"dueTo\",\n    translation: { ar: \"بسبب\", en: \"Due to\", fr: \"En raison de\" }\n  },\n  {\n    key: \"otherReasonLeadingToDeath\",\n    translation: {\n      ar: \"الحالات المهمة الأخرى التي تساهم في الوفاة (يمكن تضمين الفواصل الزمنية بين قوسين بعد الحالة)\",\n      en: \"Other significant conditions contributing to death (time intervals can be included in brackets after the condition)\",\n      fr: \"Autres affections importantes contribuant au décès (les intervalles de temps peuvent être inclus entre parenthèses après l'affection)\"\n    }\n  },\n  {\n    key: \"underlyingCOD\",\n    translation: {\n      ar: \"سبب الوفاة الأساسي\",\n      en: \"Underlying cause of death\",\n      fr: \"Cause sous-jacente du décès\"\n    }\n  },\n  {\n    key: \"icd11Chapter\",\n    translation: {\n      ar: \"فصل التصنيف الدولي للأمراض، المراجعة الحادية عشر\",\n      en: \"ICD-11 Chapter\",\n      fr: \"Chapitre CIM-11\"\n    }\n  },\n  {\n    key: \"icd11Grouping\",\n    translation: {\n      ar: \"مجموعات التصنيف الدولي للأمراض، المراجعة الحادية عشر\",\n      en: \"ICD-11 Grouping\",\n      fr: \"Groupement CIM-11\"\n    }\n  },\n  {\n    key: \"icd11\",\n    translation: {\n      ar: \"التصنيف الدولي للأمراض، المراجعة الحادية عشر\",\n      en: \"ICD-11\",\n      fr: \"CIM-11\"\n    }\n  },\n  {\n    key: \"surgeryWithin4months\",\n    translation: {\n      ar: \"هل أجريت الجراحة خلال الأسابيع الأربعة الماضية؟\",\n      en: \"Was surgery performed within the last 4 weeks?\",\n      fr: \"La chirurgie a-t-elle été pratiquée au cours des 4 dernières semaines ?\"\n    }\n  },\n  {\n    key: \"surgeryDate\",\n    translation: {\n      ar: \"إذا كانت الإجابة بنعم ، يرجى تحديد تاريخ الجراحة\",\n      en: \"If yes, please specify date of surgery\",\n      fr: \"Si oui, veuillez préciser la date de l'intervention\"\n    }\n  },\n  {\n    key: \"surgeryReason\",\n    translation: {\n      ar: \"إذا كانت الإجابة بنعم ، يرجى تحديد سبب الجراحة (المرض أو الحالة)\",\n      en: \"If yes, please specify reason for surgery (disease or condition)\",\n      fr: \"Si oui, veuillez préciser la raison de la chirurgie (maladie ou affection)\"\n    }\n  },\n  {\n    key: \"autopsy\",\n    translation: {\n      ar: \"هل تم طلب تشريح الجثة؟\",\n      en: \"Was an autopsy requested?\",\n      fr: \"Une autopsie a-t-elle été demandée ?\"\n    }\n  },\n  {\n    key: \"findings\",\n    translation: {\n      ar: \"إذا كانت الإجابة بنعم ، فهل استخدمت النتائج في الشهادة؟\",\n      en: \"If yes, were the findings used in the certification?\",\n      fr: \"Si oui, les résultats ont-ils été utilisés dans la certification ?\"\n    }\n  },\n  {\n    key: \"posisoning\",\n    translation: {\n      ar: \"إذا كان هناك سبب خارجي أو تسمم ، حدد تاريخ الإصابة\",\n      en: \"If external cause or posisoning, date of injury\",\n      fr: \"Si cause externe ou intoxication, date de la blessure\"\n    }\n  },\n  {\n    key: \"describe\",\n    translation: {\n      ar: \"يرجى وصف كيف حدث السبب الخارجي (في حالة التسمم ، يرجى تحديد مسبب التسمم)\",\n      en: \"Please describe how external cause occurred (if poisoning, please specify poisoning agent)\",\n      fr: \"Veuillez décrire comment la cause externe s'est produite (en cas d'empoisonnement, veuillez préciser l'agent empoisonnant)\"\n    }\n  },\n  {\n    key: \"occurrencePlace\",\n    translation: {\n      ar: \"مكان حدوث السبب الخارجي\",\n      en: \"Place of occurrence of the external cause\",\n      fr: \"Lieu de survenance de la cause externe\"\n    }\n  },\n  {\n    key: \"occurrenceSpecifyPlace\",\n    translation: {\n      ar: \"حدد مكان حدوث السبب الخارجي\",\n      en: \"Specify place of occurence of the external cause\",\n      fr: \"Préciser le lieu d'apparition de la cause externe\"\n    }\n  },\n  {\n    key: \"pregnant\",\n    translation: {\n      ar: \"حمل متعدد؟\",\n      en: \"Multiple pregnancy?\",\n      fr: \"Grossesse multiple?\"\n    }\n  },\n  {\n    key: \"stillborn\",\n    translation: {\n      ar: \"مولود ميت قبل أو أثناء الولادة؟\",\n      en: \"Stillborn?\",\n      fr: \"Mort-né?\"\n    }\n  },\n  {\n    key: \"hoursSurvived\",\n    translation: {\n      ar: \"إذا كانت الوفاة في غضون 24 ساعة من الولادة، حدد عدد ساعات البقاء على قيد الحياة\",\n      en: \"If death within 24hrs specify number of hours survived\",\n      fr: \"Si décès dans les 24h précisez le nombre d'heures de survie\"\n    }\n  },\n  {\n    key: \"birthWeight\",\n    translation: {\n      ar: \"الوزن عند الولادة (بالجرام)\",\n      en: \"Birth weight (in grams)\",\n      fr: \"Poids à la naissance (en grammes)\"\n    }\n  },\n  {\n    key: \"pregnantWeeks\",\n    translation: {\n      ar: \"عدد أسابيع الحمل المكتملة\",\n      en: \"Number of completed weeks of pregnancy\",\n      fr: \"Nombre de semaines de grossesse révolues\"\n    }\n  },\n  {\n    key: \"motherAge\",\n    translation: {\n      ar: \"عمر الأم (بالسنوات)\",\n      en: \"Age of mother (in years)\",\n      fr: \"Âge de la mère (en années)\"\n    }\n  },\n  {\n    key: \"perinatal\",\n    translation: {\n      ar: \"إذا كانت الوفاة في فترة حول الولادة، حدد حالة الأم التي أثرت على الجنين والمولود الجديد\",\n      en: \"If death was perinatal, state conditions of mother that affected the fetus and newborn\",\n      fr: \"Si le décès était périnatal, indiquer les conditions de la mère qui ont affecté le fœtus et le nouveau-né\"\n    }\n  },\n  {\n    key: \"maternal\",\n    translation: {\n      ar: \"وفيات الأمهات\",\n      en: \"Maternal death\",\n      fr: \"Décès maternel\"\n    }\n  },\n  {\n    key: \"pregnancyLastYear\",\n    translation: {\n      ar: \"بالنسبة للنساء ، هل كانت المتوفاة حامل خلال العام الماضي؟\",\n      en: \"For women, was the deceased pregnant within the past year?\",\n      fr: \"Pour les femmes, la personne décédée était-elle enceinte au cours de la dernière année?\"\n    }\n  },\n  {\n    key: \"timePregnancy\",\n    translation: {\n      ar: \"إذا كانت الإجابة بنعم ، عمر الحمل عند وفاة الأم\",\n      en: \"If yes, time from pregnancy\",\n      fr: \"Si oui, le temps depuis la grossesse\"\n    }\n  },\n  {\n    key: \"pregnancyToDeath\",\n    translation: {\n      ar: \"هل ساهم الحمل في الوفاة؟\",\n      en: \"Did the pregnancy contribute to the death?\",\n      fr: \"La grossesse a-t-elle contribué au décès?\"\n    }\n  },\n  {\n    key: \"proportionOfDeathFromBroadCausesAll\",\n    translation: {\n      ar: \"نسبة الوفيات من أسباب الوفاة الرئيسية (جميع الأجناس ، جميع الأعمار)\",\n      en: \"Proportion of deaths from broad causes (all sexes, all ages)\",\n      fr: \"Proportion de décès de causes générales (tous sexes, tous âges)\"\n    }\n  },\n  {\n    key: \"mortalityFromBoardCausesOfDeath\",\n    translation: {\n      ar: \"الوفيات من أسباب الوفاة الرئيسية\",\n      en: \"Mortality from broad causes of death\",\n      fr: \"Mortality from broad causes of death\"\n    }\n  },\n  {\n    key: \"distributionOfDeathByBroadCausesAndAgeGroups\",\n    translation: {\n      ar: \"توزيع الوفيات حسب أسباب الوفاة الرئيسية والفئات العمرية\",\n      en: \"Distribution of deaths by broad causes and age groups\",\n      fr: \"Répartition des décès par grandes causes et groupes d'âge\"\n    }\n  },\n  {\n    key: \"overViewDistributionOfDeath\",\n    translation: {\n      ar: \"نظرة عامة عن توزيع أسباب إجمالي الوفيات مجمعة حسب الفئة\",\n      en: \"Overview of the distribution of causes of total deaths grouped by category\",\n      fr: \"Aperçu de la répartition des causes de décès totaux regroupées par catégorie\"\n    }\n  },\n  {\n    key: \"clickOnBubleForDetail\",\n    translation: {\n      ar: \"انقر على كل فقاعات للحصول على التفاصيل\",\n      en: \"Click on each buble for details\",\n      fr: \"Cliquez sur chaque bulle pour plus de détails\"\n    }\n  },\n  {\n    key: \"communicable\",\n    translation: {\n      ar: \"معدي\",\n      en: \"communicable\",\n      fr: \"transmissible\"\n    }\n  },\n  {\n    key: \"nonCommunicable\",\n    translation: {\n      ar: \"غير معدي\",\n      en: \"non-communicable\",\n      fr: \"non communicable\"\n    }\n  },\n  {\n    key: \"externalCauses\",\n    translation: {\n      ar: \"أسباب خارجية\",\n      en: \"external causes\",\n      fr: \"causes externes\"\n    }\n  },\n  {\n    key: \"illDefined\",\n    translation: {\n      ar: \"أسباب وفاة غير محددة\",\n      en: \"ill-defined\",\n      fr: \"mal défini\"\n    }\n  },\n  {\n    key: \"numberOfDeathBy\",\n    translation: {\n      ar: \"عدد الوفيات حسب\",\n      en: \"Number of Death by\",\n      fr: \"Nombre de décès par\"\n    }\n  },\n  {\n    key: \"tuberculosis\",\n    translation: { ar: \"السل\", en: \"Tuberculosis\", fr: \"Tuberculose\" }\n  },\n  {\n    key: \"sexuallyTransmittedDiseasesExcludingHiv\",\n    translation: {\n      ar: \"الأمراض المنقولة جنسياً باستثناء الإيدز\",\n      en: \"Sexually transmitted diseases excluding HIV\",\n      fr: \"Maladies sexuellement transmissibles hors VIH\"\n    }\n  },\n  {\n    key: \"hiv\",\n    translation: { ar: \"الإيدز\", en: \"HIV\", fr: \"VIH\" }\n  },\n  {\n    key: \"diarrhoealDiseases\",\n    translation: {\n      ar: \"أمراض الإسهال\",\n      en: \"Diarrhoeal diseases\",\n      fr: \"Maladies diarrhéiques\"\n    }\n  },\n  {\n    key: \"pertussis\",\n    translation: {\n      ar: \"السعال الديكي\",\n      en: \"Pertussis\",\n      fr: \"Coqueluche\"\n    }\n  },\n  {\n    key: \"poliomyelitis\",\n    translation: {\n      ar: \"شلل الأطفال\",\n      en: \"Poliomyelitis\",\n      fr: \"Poliomyélite\"\n    }\n  },\n  {\n    key: \"diphtheria\",\n    translation: {\n      ar: \"الدفتيريا\",\n      en: \"Diphtheria\",\n      fr: \"Diphtérie\"\n    }\n  },\n  {\n    key: \"measles\",\n    translation: { ar: \"مرض الحصبة\", en: \"Measles\", fr: \"Rougeole\" }\n  },\n  {\n    key: \"tetanus\",\n    translation: { ar: \"كُزاز\", en: \"Tetanus\", fr: \"Tétanos\" }\n  },\n  {\n    key: \"meningitis\",\n    translation: {\n      ar: \"التهاب السحايا\",\n      en: \"Meningitis\",\n      fr: \"Méningite\"\n    }\n  },\n  {\n    key: \"hepatitisB\",\n    translation: {\n      ar: \"التهاب الكبد ب\",\n      en: \"Hepatitis B\",\n      fr: \"Hépatite B\"\n    }\n  },\n  {\n    key: \"hepatitisC\",\n    translation: {\n      ar: \"التهاب الكبد ج\",\n      en: \"Hepatitis C\",\n      fr: \"Hépatite C\"\n    }\n  },\n  {\n    key: \"malaria\",\n    translation: { ar: \"ملاريا\", en: \"Malaria\", fr: \"Paludisme\" }\n  },\n  {\n    key: \"tropicalClusterDiseases\",\n    translation: {\n      ar: \"أمراض المناطق المدارية\",\n      en: \"Tropical-cluster diseases\",\n      fr: \"Maladies du cluster tropical\"\n    }\n  },\n  {\n    key: \"lowerRespiratoryInfections\",\n    translation: {\n      ar: \"التهابات الجهاز التنفسي السفلي\",\n      en: \"Lower respiratory infections\",\n      fr: \"Infections des voies respiratoires inférieures\"\n    }\n  },\n  {\n    key: \"maternalConditions\",\n    translation: {\n      ar: \"ظروف تتعلق بالام  و تؤثر على الحمل و الولادة\",\n      en: \"Maternal conditions\",\n      fr: \"Conditions maternelles\"\n    }\n  },\n  {\n    key: \"conditionsArisingDuringThePerinatalPeriod\",\n    translation: {\n      ar: \"الحالات التي تظهر خلال الفترة المحيطة بالولادة\",\n      en: \"Conditions arising during the perinatal period\",\n      fr: \"Conditions survenant pendant la période périnatale\"\n    }\n  },\n  {\n    key: \"nutritionalDeficiencies\",\n    translation: {\n      ar: \"نقص غذائي\",\n      en: \"Nutritional deficiencies\",\n      fr: \"Déficiences nutritionnelles\"\n    }\n  },\n  {\n    key: \"mouthAndOropharynxCancers\",\n    translation: {\n      ar: \"سرطانات الفم والبلعوم\",\n      en: \"Mouth and oropharynx cancers\",\n      fr: \"Cancers de la bouche et de l'oropharynx\"\n    }\n  },\n  {\n    key: \"oesophagusCancer\",\n    translation: {\n      ar: \"سرطان المريء\",\n      en: \"Oesophagus cancer\",\n      fr: \"Cancer de l'œsophage\"\n    }\n  },\n  {\n    key: \"stomachCancer\",\n    translation: {\n      ar: \"سرطان المعدة\",\n      en: \"Stomach cancer\",\n      fr: \"Cancer de l'estomac\"\n    }\n  },\n  {\n    key: \"colonAndRectumCancers\",\n    translation: {\n      ar: \"سرطانات القولون والمستقيم\",\n      en: \"Colon and rectum cancers\",\n      fr: \"Cancers du côlon et du rectum\"\n    }\n  },\n  {\n    key: \"liverCancer\",\n    translation: {\n      ar: \"سرطان الكبد\",\n      en: \"Liver cancer\",\n      fr: \"Cancer du foie\"\n    }\n  },\n  {\n    key: \"pancreasCancer\",\n    translation: {\n      ar: \"سرطان البنكرياس\",\n      en: \"Pancreas cancer\",\n      fr: \"Cancer du pancréas\"\n    }\n  },\n  {\n    key: \"tracheaBronchusAndLungCancers\",\n    translation: {\n      ar: \"سرطانات القصبة الهوائية والشعب الهوائية والرئة\",\n      en: \"Trachea, bronchus and lung cancers\",\n      fr: \"Cancers de la trachée, des bronches et du poumon\"\n    }\n  },\n  {\n    key: \"melanomaAndOtherSkinCancers\",\n    translation: {\n      ar: \"سرطان الجلد وسرطانات الجلد الأخرى\",\n      en: \"Melanoma and other skin cancers\",\n      fr: \"Mélanome et autres cancers de la peau\"\n    }\n  },\n  {\n    key: \"breastCancer\",\n    translation: {\n      ar: \"سرطان الثدي\",\n      en: \"Breast cancer\",\n      fr: \"Cancer du sein\"\n    }\n  },\n  {\n    key: \"cervixUteriCancer\",\n    translation: {\n      ar: \"سرطان عنق الرحم\",\n      en: \"Cervix uteri cancer\",\n      fr: \"Cancer du col de l'utérus\"\n    }\n  },\n  {\n    key: \"corpusUteriCancer\",\n    translation: {\n      ar: \"سرطان الرحم\",\n      en: \"Corpus uteri cancer\",\n      fr: \"Cancer du corps utérin\"\n    }\n  },\n  {\n    key: \"ovaryCancer\",\n    translation: {\n      ar: \"سرطان المبيض\",\n      en: \"Ovary cancer\",\n      fr: \"Cancer de l'ovaire\"\n    }\n  },\n  {\n    key: \"prostateCancer\",\n    translation: {\n      ar: \"سرطان البروستات\",\n      en: \"Prostate cancer\",\n      fr: \"Cancer de la prostate\"\n    }\n  },\n  {\n    key: \"bladderCancer\",\n    translation: {\n      ar: \"سرطان المثانة\",\n      en: \"Bladder cancer\",\n      fr: \"Cancer de la vessie\"\n    }\n  },\n  {\n    key: \"lymphomasAndMultipleMyeloma\",\n    translation: {\n      ar: \"الأورام اللمفاوية والورم النخاعي المتعدد\",\n      en: \"Lymphomas and multiple myeloma\",\n      fr: \"Lymphomes et myélome multiple\"\n    }\n  },\n  {\n    key: \"leukaemia\",\n    translation: { ar: \"سرطان الدم\", en: \"Leukaemia\", fr: \"Leucémie\" }\n  },\n  {\n    key: \"alzheimerAndOtherDementias\",\n    translation: {\n      ar: \"الزهايمر وأنواع الخرف الأخرى\",\n      en: \"Alzheimer and other dementias\",\n      fr: \"Alzheimer et autres démences\"\n    }\n  },\n  {\n    key: \"parkinsonDisease\",\n    translation: {\n      ar: \"مرض باركنسون\",\n      en: \"Parkinson disease\",\n      fr: \"Maladie de Parkinson\"\n    }\n  },\n  {\n    key: \"hypertensiveDisease\",\n    translation: {\n      ar: \"مرض ارتفاع ضغط الدم\",\n      en: \"Hypertensive disease\",\n      fr: \"Maladie hypertensive\"\n    }\n  },\n  {\n    key: \"ischaemicHeartDisease\",\n    translation: {\n      ar: \"مرض القلب المتعلق بتروية القلب\",\n      en: \"Ischaemic heart disease\",\n      fr: \"Cardiopathie ischémique\"\n    }\n  },\n  {\n    key: \"cerebrovascularDisease\",\n    translation: {\n      ar: \"مرض الأوعية الدموية الدماغية\",\n      en: \"Cerebrovascular disease\",\n      fr: \"Maladie cérébrovasculaire\"\n    }\n  },\n  {\n    key: \"chronicObstructivePulmonaryDisease\",\n    translation: {\n      ar: \"مرض الانسداد الرئوي المزمن\",\n      en: \"Chronic obstructive pulmonary disease\",\n      fr: \"Bronchopneumopathie chronique obstructive\"\n    }\n  },\n  {\n    key: \"asthma\",\n    translation: { ar: \"الربو\", en: \"Asthma\", fr: \"Asthme\" }\n  },\n  {\n    key: \"digestiveDiseases\",\n    translation: {\n      ar: \"أمراض الجهاز الهضمي\",\n      en: \"Digestive diseases\",\n      fr: \"Maladies digestives\"\n    }\n  },\n  {\n    key: \"genitoUrinaryDiseases\",\n    translation: {\n      ar: \"أمراض الجهاز البولي التناسلي\",\n      en: \"Genito-urinary diseases\",\n      fr: \"Maladies génito-urinaires\"\n    }\n  },\n  {\n    key: \"congenitalAnomalies\",\n    translation: {\n      ar: \"التشوهات الخلقية\",\n      en: \"Congenital anomalies\",\n      fr: \"Anomalies congénitales\"\n    }\n  },\n  {\n    key: \"roadTrafficAccidents\",\n    translation: {\n      ar: \"حوادث المرور على الطرق\",\n      en: \"Road traffic accidents\",\n      fr: \"Accidents de la route\"\n    }\n  },\n  {\n    key: \"suicide\",\n    translation: { ar: \"انتحار\", en: \"Suicide\", fr: \"Suicide\" }\n  },\n  {\n    key: \"homicide\",\n    translation: { ar: \"جريمة قتل\", en: \"Homicide\", fr: \"Homicide\" }\n  },\n  {\n    key: \"mortaliryFromNcds\",\n    translation: {\n      ar: \"الوفيات من الأمراض غير المعدية\",\n      en: \"Mortality from NCDs\",\n      fr: \"Mortalité due aux MNT\"\n    }\n  },\n  {\n    key: \"malignantNeoplasms\",\n    translation: {\n      ar: \"الأورام الخبيثة\",\n      en: \"Malignant neoplasms\",\n      fr: \"Néoplasmes malins\"\n    }\n  },\n  {\n    key: \"diabetesMellitus\",\n    translation: {\n      ar: \"داء السكري\",\n      en: \"Diabetes mellitus\",\n      fr: \"Diabète sucré\"\n    }\n  },\n  {\n    key: \"cardiovascularDiseases\",\n    translation: {\n      ar: \"أمراض القلب والأوعية الدموية\",\n      en: \"Cardiovascular diseases\",\n      fr: \"Maladies cardiovasculaires\"\n    }\n  },\n  {\n    key: \"respiratoryDiseases\",\n    translation: {\n      ar: \"أمراض الجهاز التنفسي\",\n      en: \"Respiratory diseases\",\n      fr: \"Maladies respiratoires\"\n    }\n  },\n  {\n    key: \"numberOfDeathBySexAndAge\",\n    translation: {\n      ar: \"عدد الوفيات حسب الجنس والعمر\",\n      en: \"Number of deaths by sex and age\",\n      fr: \"Nombre de décès selon le sexe et l'âge\"\n    }\n  },\n  {\n    key: \"numberOfDeathByMonth\",\n    translation: {\n      ar: \"عدد الوفيات حسب الشهر\",\n      en: \"Number of deaths by month\",\n      fr: \"Nombre de décès par mois\"\n    }\n  },\n  {\n    key: \"pneumonia\",\n    translation: {\n      ar: \"التهاب رئوي\",\n      en: \"Pneumonia\",\n      fr: \"Pneumonie\"\n    }\n  },\n  {\n    key: \"otherDiseasesOfTheDigestiveSystem\",\n    translation: {\n      ar: \"أمراض الجهاز الهضمي الأخرى\",\n      en: \"Other diseases of the digestive system\",\n      fr: \"Autres maladies du système digestif\"\n    }\n  },\n  {\n    key: \"otherDirectObstetricDeaths\",\n    translation: {\n      ar: \"وفيات الولادة المباشرة الأخرى\",\n      en: \"Other direct obstetric deaths\",\n      fr: \"Autres décès obstétricaux directs\"\n    }\n  },\n  {\n    key: \"prematurity\",\n    translation: {\n      ar: \"الخداج\",\n      en: \"Prematurity\",\n      fr: \"Prématurité\"\n    }\n  },\n  {\n    key: \"symptomsSignAndAbnormalClinicalAndLaboratoryFindingsNotElsewhereClassified\",\n    translation: {\n      ar: \"الأعراض والنتائج السريرية والمخبرية الغير طبيعية ، الغير مصنفة في مكان آخر\",\n      en: \"Symptoms sign and abnormal clinical and laboratory findings, not elsewhere classified\",\n      fr: \"Symptômes et résultats cliniques et de laboratoire anormaux, non classés ailleurs\"\n    }\n  },\n  {\n    key: \"otherAndUnspecifiedCongenitalMalformations\",\n    translation: {\n      ar: \"التشوهات الخلقية الأخرى وغير المحددة\",\n      en: \"Other and unspecified congenital malformations\",\n      fr: \"Malformations congénitales autres et non précisées\"\n    }\n  },\n  {\n    key: \"otherAndUnspecifiedPerinatalConditions\",\n    translation: {\n      ar: \"حالات أخرى غير محددة في الفترة المحيطة بالولادة\",\n      en: \"Other and unspecified perinatal conditions\",\n      fr: \"Affections périnatales autres et non précisées\"\n    }\n  },\n  {\n    key: \"intrauterineHypoxiaAndBirthAsphyxia\",\n    translation: {\n      ar: \"نقص الأكسجة داخل الرحم واختناق الولادة\",\n      en: \"Intrauterine hypoxia and birth asphyxia\",\n      fr: \"Hypoxie intra-utérine et asphyxie à la naissance\"\n    }\n  },\n  {\n    key: \"name\",\n    translation: { ar: \"الاسم\", en: \"Name\", fr: \"Nom\" }\n  },\n  {\n    key: \"points\",\n    translation: { ar: \"نقاط\", en: \"Points\", fr: \"Points\" }\n  },\n  {\n    key: \"certainInfectiousOrParasiticDiseases\",\n    translation: {\n      ar: \"بعض الأمراض المعدية أو الطفيلية المعينة\",\n      en: \"Certain infectious or parasitic diseases\",\n      fr: \"Certaines maladies infectieuses ou parasitaires\"\n    }\n  },\n  {\n    key: \"neoplasms\",\n    translation: { ar: \"أورام\", en: \"Neoplasms\", fr: \"Tumeurs\" }\n  },\n  {\n    key: \"diseasesOfTheBloodOrBloodFormingOrgans\",\n    translation: {\n      ar: \"أمراض الدم أو الأعضاء المكونة للدم\",\n      en: \"Diseases of the blood or blood-forming organs\",\n      fr: \"Maladies du sang ou des organes hématopoïétiques\"\n    }\n  },\n  {\n    key: \"diseasesOfTheImmuneSystem\",\n    translation: {\n      ar: \"أمراض جهاز المناعة\",\n      en: \"Diseases of the immune system\",\n      fr: \"Maladies du système immunitaire\"\n    }\n  },\n  {\n    key: \"endocrineNutritionalOrMetabolicDiseases\",\n    translation: {\n      ar: \"أمراض الغدد الصماء، التغذية أو التمثيل الغذائي\",\n      en: \"Endocrine, nutritional or metabolic diseases\",\n      fr: \"Maladies endocriniennes, nutritionnelles ou métaboliques\"\n    }\n  },\n  {\n    key: \"mentalBehaviouralOrNeurodevelopmentalDisorders\",\n    translation: {\n      ar: \"الاضطرابات العقلية أو السلوكية أو النمائية العصبية\",\n      en: \"Mental, behavioural or neurodevelopmental disorders\",\n      fr: \"Troubles mentaux, comportementaux ou neurodéveloppementaux\"\n    }\n  },\n  {\n    key: \"sleepWakeDisorders\",\n    translation: {\n      ar: \"اضطرابات النوم والاستيقاظ\",\n      en: \"Sleep-wake disorders\",\n      fr: \"Troubles veille-sommeil\"\n    }\n  },\n  {\n    key: \"diseasesOfTheNervousSystem\",\n    translation: {\n      ar: \"أمراض الجهاز العصبي\",\n      en: \"Diseases of the nervous system\",\n      fr: \"Maladies du système nerveux\"\n    }\n  },\n  {\n    key: \"diseasesOfTheVisualSystem\",\n    translation: {\n      ar: \"أمراض الجهاز البصري\",\n      en: \"Diseases of the visual system\",\n      fr: \"Maladies du système visuel\"\n    }\n  },\n  {\n    key: \"diseasesOfTheEarOrMastoidProcess\",\n    translation: {\n      ar: \"أمراض الأذن أو عملية الخشاء\",\n      en: \"Diseases of the ear or mastoid process\",\n      fr: \"Maladies de l'oreille ou de l'apophyse mastoïdienne\"\n    }\n  },\n  {\n    key: \"diseasesOfTheCirculatorySystem\",\n    translation: {\n      ar: \"أمراض الدورة الدموية\",\n      en: \"Diseases of the circulatory system\",\n      fr: \"Maladies du système circulatoire\"\n    }\n  },\n  {\n    key: \"diseasesOfTheRespiratorySystem\",\n    translation: {\n      ar: \"أمراض الجهاز التنفسي\",\n      en: \"Diseases of the respiratory system\",\n      fr: \"Maladies du système respiratoire\"\n    }\n  },\n  {\n    key: \"diseasesOfTheDigestiveSystem\",\n    translation: {\n      ar: \"أمراض الجهاز الهضمي\",\n      en: \"Diseases of the digestive system\",\n      fr: \"Maladies du système digestif\"\n    }\n  },\n  {\n    key: \"diseasesOfTheSkin\",\n    translation: {\n      ar: \"أمراض الجلد\",\n      en: \"Diseases of the skin\",\n      fr: \"Maladies de la peau\"\n    }\n  },\n  {\n    key: \"diseasesOfTheMusculoskeletalSystemOrConnectiveTissue\",\n    translation: {\n      ar: \"أمراض الجهاز الحركي أو النسيج الضام\",\n      en: \"Diseases of the musculoskeletal system or connective tissue\",\n      fr: \"Maladies du système musculo-squelettique ou du tissu conjonctif\"\n    }\n  },\n  {\n    key: \"diseasesOfTheGenitourinarySystem\",\n    translation: {\n      ar: \"أمراض الجهاز البولي التناسلي\",\n      en: \"Diseases of the genitourinary system\",\n      fr: \"Maladies de l'appareil génito-urinaire\"\n    }\n  },\n  {\n    key: \"conditionsRelatedToSexualHealth\",\n    translation: {\n      ar: \"الحالات المتعلقة بالصحة الجنسية\",\n      en: \"Conditions related to sexual health\",\n      fr: \"Conditions liées à la santé sexuelle\"\n    }\n  },\n  {\n    key: \"pregnancyChildbirthOrThePuerperium\",\n    translation: {\n      ar: \"الحمل، الولادة أو النفاس\",\n      en: \"Pregnancy, childbirth or the puerperium\",\n      fr: \"Grossesse, accouchement ou puerpéralité\"\n    }\n  },\n  {\n    key: \"certainConditionsOriginatingInThePerinatalPeriod\",\n    translation: {\n      ar: \"حالات معينة تنشأ في فترة ما حول الولادة\",\n      en: \"Certain conditions originating in the perinatal period\",\n      fr: \"Certaines affections originaires de la période périnatale\"\n    }\n  },\n  {\n    key: \"developmentalAnomalies\",\n    translation: {\n      ar: \"تشوهات متعلقه بالتطور الجنيني\",\n      en: \"Developmental anomalies\",\n      fr: \"Anomalies du développement\"\n    }\n  },\n  {\n    key: \"symptomsSignsOrClinicalFindingsNotElsewhereClassified\",\n    translation: {\n      ar: \"أعراض أو علامات أو نتائج سريرية غير مصنفة في مكان آخر\",\n      en: \"Symptoms, signs or clinical findings, not elsewhere classified\",\n      fr: \"Symptômes, signes ou constatations cliniques, non classés ailleurs\"\n    }\n  },\n  {\n    key: \"injuryPoisoningOrCertainOtherConsequencesOfExternalCauses\",\n    translation: {\n      ar: \"الإصابة،التسمم أو عواقب أخرى معينة للأسباب الخارجية\",\n      en: \"Injury, poisoning or certain other consequences of external causes\",\n      fr: \"Blessure, empoisonnement ou certaines autres conséquences de causes externes\"\n    }\n  },\n  {\n    key: \"externalCausesOfMorbidityOrMortality\",\n    translation: {\n      ar: \"الأسباب الخارجية للمرض أو الوفاة\",\n      en: \"External causes of morbidity or mortality\",\n      fr: \"Causes externes de morbidité ou de mortalité\"\n    }\n  },\n  {\n    key: \"factorsInfluencingHealthStatusOrContactWithHealthServices\",\n    translation: {\n      ar: \"العوامل المؤثرة على الحالة الصحية أو الاتصال بالخدمات الصحية\",\n      en: \"Factors influencing health status or contact with health services\",\n      fr: \"Facteurs influençant l'état de santé ou le contact avec les services de santé\"\n    }\n  },\n  {\n    key: \"codesForSpecialPurposes\",\n    translation: {\n      ar: \"رموز لأغراض خاصة\",\n      en: \"Codes for special purposes\",\n      fr: \"Codes à des fins spéciales\"\n    }\n  },\n  {\n    key: \"numberOfMalariaDeathsByMonth\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن الملاريا حسب الشهر\",\n      en: \"Number of malaria deaths by month\",\n      fr: \"Nombre de décès dus au paludisme par mois\"\n    }\n  },\n  {\n    key: \"numberOfMalariaDeathsPlaceOfDeath\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن الملاريا حسب مكان الوفاة\",\n      en: \"Number of malaria deaths - place of death\",\n      fr: \"Nombre de décès dus au paludisme - lieu du décès\"\n    }\n  },\n  {\n    key: \"numberOfMalariaDeathsBySex\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن الملاريا حسب الجنس\",\n      en: \"Number of malaria deaths by sex\",\n      fr: \"Nombre de décès dus au paludisme par sexe\"\n    }\n  },\n  {\n    key: \"numberOfMalariaDeathsBySexAndDetailedAgeGroup\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن الملاريا حسب الجنس والفئات العمرية التفصيلية\",\n      en: \"Number of malaria deaths by sex and detailed age-group\",\n      fr: \"Nombre de décès dus au paludisme par sexe et tranche d'âge détaillée\"\n    }\n  },\n  {\n    key: \"numberOfMalariaDeathsAndPercentOfAllMalariaDeathsByBroadAgeGroup\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن الملاريا والنسبة المئوية لجميع وفيات الملاريا حسب الفئات العمرية الرئيسية\",\n      en: \"Number of malaria deaths and percent of all malaria deaths by broad age-group\",\n      fr: \"Nombre de décès dus au paludisme et pourcentage de tous les décès dus au paludisme par grand groupe d'âge\"\n    }\n  },\n  {\n    key: \"numberOfMalariaDeathsComparedWithOtherCausesOfDeaths\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن الملاريا مقارنة بأسباب الوفاة الأخرى\",\n      en: \"Number of malaria deaths compared with other causes of deaths\",\n      fr: \"Nombre de décès dus au paludisme par rapport aux autres causes de décès\"\n    }\n  },\n  {\n    key: \"percentOfTotalMalariaDeaths\",\n    translation: {\n      ar: \"٪ من إجمالي وفيات الملاريا\",\n      en: \"% of total malaria deaths\",\n      fr: \"% du total des décès dus au paludisme\"\n    }\n  },\n  {\n    key: \"numberOfMalariaDeaths\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن الملاريا\",\n      en: \"Number of malaria deaths\",\n      fr: \"Nombre de décès dus au paludisme\"\n    }\n  },\n  {\n    key: \"otherCauses\",\n    translation: {\n      ar: \"أسباب أخرى\",\n      en: \"Other causes\",\n      fr: \"Autres causes\"\n    }\n  },\n  {\n    key: \"numberOfTuberculosisDeathsByMonth\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن السل حسب الشهر\",\n      en: \"Number of tuberculosis deaths by month\",\n      fr: \"Number of tuberculosis deaths by month\"\n    }\n  },\n  {\n    key: \"numberOfTuberculosisDeathsByPlaceOfDeath\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن السل حسب مكان الوفاة\",\n      en: \"Number of tuberculosis deaths by place of death\",\n      fr: \"Nombre de décès par tuberculose par lieu de décès\"\n    }\n  },\n  {\n    key: \"numberOfTuberculosisDeathsBySex\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن السل حسب الجنس\",\n      en: \"Number of tuberculosis deaths by sex\",\n      fr: \"Nombre de décès dus à la tuberculose par sexe\"\n    }\n  },\n  {\n    key: \"numberOfTuberculosisDeathsBySexAndDetailedAgeGroup\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن السل حسب الجنس والفئات العمرية التفصيلية\",\n      en: \"Number of tuberculosis deaths by sex and detailed age-group\",\n      fr: \"Nombre de décès dus à la tuberculose par sexe et tranche d'âge détaillée\"\n    }\n  },\n  {\n    key: \"numberOfTuberculosisDeathsAndPercentOfAllTuberculosisDeathsByBroadAgeGroup\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن السل والنسبة المئوية لجميع وفيات السل حسب الفئات العمرية الرئيسية\",\n      en: \"Number of tuberculosis deaths and percent of all tuberculosis deaths by broad age-group\",\n      fr: \"Nombre de décès dus à la tuberculose et pourcentage de tous les décès dus à la tuberculose par grand groupe d'âge\"\n    }\n  },\n  {\n    key: \"numberOfTuberculosisDeathsComparedWithOtherCausesOfDeaths\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن السل مقارنة مع أسباب الوفاة الأخرى\",\n      en: \"Number of tuberculosis deaths compared with other causes of deaths\",\n      fr: \"Nombre de décès dus à la tuberculose par rapport aux autres causes de décès\"\n    }\n  },\n  {\n    key: \"percentOfTotalTuberculosisDeaths\",\n    translation: {\n      ar: \"٪ من إجمالي وفيات السل\",\n      en: \"% of total tuberculosis deaths\",\n      fr: \"% du total des décès dus à la tuberculose\"\n    }\n  },\n  {\n    key: \"numberOfTuberculosisDeaths\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن السل\",\n      en: \"Number of tuberculosis deaths\",\n      fr: \"Nombre de décès par tuberculose\"\n    }\n  },\n  {\n    key: \"numberOfAidsDeathsByMonth\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن الإيدز حسب الشهر\",\n      en: \"Number of AIDS deaths by month\",\n      fr: \"Nombre de décès du SIDA par mois\"\n    }\n  },\n  {\n    key: \"numberOfAidsDeathsPlaceOfDeath\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن الإيدز - مكان الوفاة\",\n      en: \"Number of AIDS deaths - place of death\",\n      fr: \"Nombre de décès dus au SIDA - lieu du décès\"\n    }\n  },\n  {\n    key: \"numberOfAidsDeathsBySex\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن الإيدز حسب الجنس\",\n      en: \"Number of AIDS deaths by sex\",\n      fr: \"Nombre de décès dus au SIDA par sexe\"\n    }\n  },\n  {\n    key: \"numberOfAidsDeathsBySexAndDetailedAgeGroup\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن الإيدز حسب الجنس والفئات العمرية التفصيلية\",\n      en: \"Number of AIDS deaths by sex and detailed age-group\",\n      fr: \"Nombre de décès dus au SIDA par sexe et tranche d'âge détaillée\"\n    }\n  },\n  {\n    key: \"numberOfAidsDeathsAndPercentOfAllAidsDeathsByBroadAgeGroup\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن الإيدز والنسبة المئوية لجميع وفيات الإيدز حسب الفئات العمرية الرئيسية\",\n      en: \"Number of AIDS deaths and percent of all AIDS deaths by broad age-group\",\n      fr: \"Nombre de décès dus au sida et pourcentage de tous les décès dus au sida par grand groupe d'âge\"\n    }\n  },\n  {\n    key: \"numberOfAidsDeathsComparedWithOtherCausesOfDeaths\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن الإيدز مقارنة بأسباب الوفاة الأخرى\",\n      en: \"Number of AIDS deaths compared with other causes of deaths\",\n      fr: \"Nombre de décès dus au sida par rapport aux autres causes de décès\"\n    }\n  },\n  {\n    key: \"aids\",\n    translation: { ar: \"الإيدز\", en: \"AIDS\", fr: \"SIDA\" }\n  },\n  {\n    key: \"percentOfTotalAidsDeaths\",\n    translation: {\n      ar: \"٪ من إجمالي وفيات الإيدز\",\n      en: \"% of total AIDS deaths\",\n      fr: \"% du total des décès dus au SIDA\"\n    }\n  },\n  {\n    key: \"numberOfAidsDeaths\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن الإيدز\",\n      en: \"Number of AIDS deaths\",\n      fr: \"Nombre de décès dus au SIDA\"\n    }\n  },\n  { key: \"tb\", translation: { ar: \"السل\", en: \"TB\", fr: \"TB\" } },\n  {\n    key: \"other\",\n    translation: { ar: \"أخرى\", en: \"Other\", fr: \"Autre\" }\n  },\n  {\n    key: \"numberOfDeath\",\n    translation: {\n      ar: \"٪ من الوفيات\",\n      en: \"% of Deaths\",\n      fr: \"% de décès\"\n    }\n  },\n  {\n    key: \"percentOfTotalDeathAllCauses\",\n    translation: {\n      ar: \"٪ من إجمالي الوفيات من جميع الأسباب\",\n      en: \"% of total deaths all causes\",\n      fr: \"% du total des décès toutes causes\"\n    }\n  },\n  {\n    key: \"numberOfDeathsFromTbAidsMalariaAndOtherCausesAgeGroup\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن السل والإيدز والملاريا وأسباب أخرى - الفئة العمرية\",\n      en: \"Number of deaths from TB, AIDS, malaria and other causes - age-group\",\n      fr: \"Nombre de décès dus à la tuberculose, au sida, au paludisme et à d'autres causes - groupe d'âge\"\n    }\n  },\n  {\n    key: \"distributionOfDeathsByTbAidsAndMalariaBySexAndAge\",\n    translation: {\n      ar: \"توزيع الوفيات الناجمة عن السل والإيدز والملاريا حسب الجنس والعمر\",\n      en: \"Distribution of deaths by TB, AIDS and malaria by sex and age\",\n      fr: \"Répartition des décès par tuberculose, sida et paludisme par sexe et âge\"\n    }\n  },\n  {\n    key: \"percentageOfDeathsFromTbAidsAndMalariaOutOfAllDeathsFromCommunicableDiseases\",\n    translation: {\n      ar: \"النسبة المئوية للوفيات الناجمة عن السل والإيدز والملاريا من إجمالي الوفيات الناجمة عن الأمراض المعدية\",\n      en: \"Percentage of deaths from TB, AIDS and malaria out of all deaths from communicable diseases\",\n      fr: \"Pourcentage de décès dus à la tuberculose, au sida et au paludisme sur l'ensemble des décès dus aux maladies transmissibles\"\n    }\n  },\n  {\n    key: \"numberOfTbAndAidsDeathsAndPercentOfTheseDeathsOutOfAllDeaths15YearsAndAbove\",\n    translation: {\n      ar: \"عدد الوفيات الناجمة عن السل والإيدز والنسبة المئوية لهذه الوفيات من إجمالي الوفيات: 15 سنة وما فوق\",\n      en: \"Number of TB and AIDS deaths  and percent of these  deaths out of all deaths: 15 years and above\",\n      fr: \"Nombre de décès dus à la tuberculose et au sida et pourcentage de ces décès sur l'ensemble des décès : 15 ans et plus\"\n    }\n  },\n  { key: \"list\", translation: { en: \"List\", fr: \"Liste\" } },\n  { key: \"uniqueField\", translation: { en: \"Unique Field\" } },\n  { key: \"searchableFields\", translation: { en: \"Searchable fields\" } },\n  { key: \"help\", translation: { en: \"Help\" } },\n  { key: \"userManual\", translation: { en: \"User Manual\" } },\n  {\n    key: \"causeOfDeathVersion\",\n    translation: { en: \"Cause of Death App (version 1.0.1)\" }\n  },\n  { key: \"appFeatures\", translation: { en: \"App features\" } },\n  { key: \"installation\", translation: { en: \"Installation\" } },\n  { key: \"back\", translation: { en: \"Back\", fr: \"Dos\" } },\n  { key: \"install\", translation: { en: \"Install\", fr: \"Installer\" } },\n  { key: \"selectName\", translation: { en: \"Section name\" } },\n  {\n    key: \"selectNameOption\",\n    translation: { en: \"* Select Name Option\" }\n  },\n  {\n    key: \"selectTrackedEntityType\",\n    translation: { en: \"Select tracked entity type\" }\n  },\n  { key: \"selectOption\", translation: { en: \"Select option\" } },\n  { key: \"noname\", translation: { en: \"No Name\" } },\n  { key: \"fullname\", translation: { en: \"Fullname\" } },\n  { key: \"firstlastname\", translation: { en: \"First & Last Name\" } },\n  {\n    key: \"firstmiddlelastname\",\n    translation: { en: \"First, Middle & Last Name\" }\n  },\n  { key: \"firstname\", translation: { en: \"First Name\" } },\n  { key: \"middlename\", translation: { en: \"Middle Name\" } },\n  { key: \"lastname\", translation: { en: \"Last Name\" } },\n  {\n    key: \"warning\",\n    translation: { en: \"Warning!!!\", fr: \"Avertissement!\" }\n  },\n  { key: \"clear\", translation: { en: \"Clear\", fr: \"Claire\" } },\n  { key: \"stay\", translation: { en: \"Stay\", fr: \"Rester\" } },\n  { key: \"leave\", translation: { en: \"Leave\", fr: \"Partir\" } },\n  {\n    key: \"changes_you_made_may_not_be_saved\",\n    translation: {\n      en: \"Changes you made may not be saved.\",\n      fr: \"Les modifications que vous avez apportées ne seront peut-être pas enregistrées.\"\n    }\n  },\n  {\n    key: \"note_WHO_digital_open_rule_integrated_cause_of_death_selection_Doris\",\n    translation: {\n      en: \"* Note: WHO Digital Open Rule Integrated cause of death Selection (DORIS)\"\n    }\n  },\n  { key: \"compute\", translation: { en: \"Process\", fr: \"Calculer\" } },\n  { key: \"icd11_tool\", translation: { en: \"ICD 11 Coding Tool\" } },\n  {\n    key: \"your_selection\",\n    translation: {\n      en: \"Your selection is:\",\n      fr: \"Votre sélection est :\"\n    }\n  },\n  {\n    key: \"type_to_start_searching\",\n    translation: {\n      en: \"Type for start searching\",\n      fr: \"Tapez pour lancer la recherche\"\n    }\n  }\n];\n\nconst LOCALES = {\n  af_NA: \"Afrikaans (Namibia)\",\n  af_ZA: \"Afrikaans (South Africa)\",\n  af: \"Afrikaans\",\n  ak_GH: \"Akan (Ghana)\",\n  ak: \"Akan\",\n  sq_AL: \"Albanian (Albania)\",\n  sq: \"Albanian\",\n  am_ET: \"Amharic (Ethiopia)\",\n  am: \"Amharic\",\n  ar_DZ: \"Arabic (Algeria)\",\n  ar_BH: \"Arabic (Bahrain)\",\n  ar_EG: \"Arabic (Egypt)\",\n  ar_IQ: \"Arabic (Iraq)\",\n  ar_JO: \"Arabic (Jordan)\",\n  ar_KW: \"Arabic (Kuwait)\",\n  ar_LB: \"Arabic (Lebanon)\",\n  ar_LY: \"Arabic (Libya)\",\n  ar_MA: \"Arabic (Morocco)\",\n  ar_OM: \"Arabic (Oman)\",\n  ar_QA: \"Arabic (Qatar)\",\n  ar_SA: \"Arabic (Saudi Arabia)\",\n  ar_SD: \"Arabic (Sudan)\",\n  ar_SY: \"Arabic (Syria)\",\n  ar_TN: \"Arabic (Tunisia)\",\n  ar_AE: \"Arabic (United Arab Emirates)\",\n  ar_YE: \"Arabic (Yemen)\",\n  ar: \"Arabic\",\n  hy_AM: \"Armenian (Armenia)\",\n  hy: \"Armenian\",\n  as_IN: \"Assamese (India)\",\n  as: \"Assamese\",\n  asa_TZ: \"Asu (Tanzania)\",\n  asa: \"Asu\",\n  az_Cyrl: \"Azerbaijani (Cyrillic)\",\n  az_Cyrl_AZ: \"Azerbaijani (Cyrillic, Azerbaijan)\",\n  az_Latn: \"Azerbaijani (Latin)\",\n  az_Latn_AZ: \"Azerbaijani (Latin, Azerbaijan)\",\n  az: \"Azerbaijani\",\n  bm_ML: \"Bambara (Mali)\",\n  bm: \"Bambara\",\n  eu_ES: \"Basque (Spain)\",\n  eu: \"Basque\",\n  be_BY: \"Belarusian (Belarus)\",\n  be: \"Belarusian\",\n  bem_ZM: \"Bemba (Zambia)\",\n  bem: \"Bemba\",\n  bez_TZ: \"Bena (Tanzania)\",\n  bez: \"Bena\",\n  bn_BD: \"Bengali (Bangladesh)\",\n  bn_IN: \"Bengali (India)\",\n  bn: \"Bengali\",\n  bs_BA: \"Bosnian (Bosnia and Herzegovina)\",\n  bs: \"Bosnian\",\n  bg_BG: \"Bulgarian (Bulgaria)\",\n  bg: \"Bulgarian\",\n  my_MM: \"Burmese (Myanmar [Burma])\",\n  my: \"Burmese\",\n  yue_Hant_HK: \"Cantonese (Traditional, Hong Kong SAR China)\",\n  ca_ES: \"Catalan (Spain)\",\n  ca: \"Catalan\",\n  tzm_Latn: \"Central Morocco Tamazight (Latin)\",\n  tzm_Latn_MA: \"Central Morocco Tamazight (Latin, Morocco)\",\n  tzm: \"Central Morocco Tamazight\",\n  chr_US: \"Cherokee (United States)\",\n  chr: \"Cherokee\",\n  cgg_UG: \"Chiga (Uganda)\",\n  cgg: \"Chiga\",\n  zh_Hans: \"Chinese (Simplified Han)\",\n  zh_Hans_CN: \"Chinese (Simplified Han, China)\",\n  zh_Hans_HK: \"Chinese (Simplified Han, Hong Kong SAR China)\",\n  zh_Hans_MO: \"Chinese (Simplified Han, Macau SAR China)\",\n  zh_Hans_SG: \"Chinese (Simplified Han, Singapore)\",\n  zh_Hant: \"Chinese (Traditional Han)\",\n  zh_Hant_HK: \"Chinese (Traditional Han, Hong Kong SAR China)\",\n  zh_Hant_MO: \"Chinese (Traditional Han, Macau SAR China)\",\n  zh_Hant_TW: \"Chinese (Traditional Han, Taiwan)\",\n  zh: \"Chinese\",\n  kw_GB: \"Cornish (United Kingdom)\",\n  kw: \"Cornish\",\n  hr_HR: \"Croatian (Croatia)\",\n  hr: \"Croatian\",\n  cs_CZ: \"Czech (Czech Republic)\",\n  cs: \"Czech\",\n  da_DK: \"Danish (Denmark)\",\n  da: \"Danish\",\n  nl_BE: \"Dutch (Belgium)\",\n  nl_NL: \"Dutch (Netherlands)\",\n  nl: \"Dutch\",\n  dz: \"Dzongkha (Bhutan)\",\n  ebu_KE: \"Embu (Kenya)\",\n  ebu: \"Embu\",\n  en_AS: \"English (American Samoa)\",\n  en_AU: \"English (Australia)\",\n  en_BE: \"English (Belgium)\",\n  en_BZ: \"English (Belize)\",\n  en_BW: \"English (Botswana)\",\n  en_CA: \"English (Canada)\",\n  en_GU: \"English (Guam)\",\n  en_HK: \"English (Hong Kong SAR China)\",\n  en_IN: \"English (India)\",\n  en_IE: \"English (Ireland)\",\n  en_IL: \"English (Israel)\",\n  en_JM: \"English (Jamaica)\",\n  en_MT: \"English (Malta)\",\n  en_MH: \"English (Marshall Islands)\",\n  en_MU: \"English (Mauritius)\",\n  en_NA: \"English (Namibia)\",\n  en_NZ: \"English (New Zealand)\",\n  en_MP: \"English (Northern Mariana Islands)\",\n  en_PK: \"English (Pakistan)\",\n  en_PH: \"English (Philippines)\",\n  en_SG: \"English (Singapore)\",\n  en_ZA: \"English (South Africa)\",\n  en_TT: \"English (Trinidad and Tobago)\",\n  en_UM: \"English (U.S. Minor Outlying Islands)\",\n  en_VI: \"English (U.S. Virgin Islands)\",\n  en_GB: \"English (United Kingdom)\",\n  en_US: \"English (United States)\",\n  en_ZW: \"English (Zimbabwe)\",\n  en: \"English\",\n  eo: \"Esperanto\",\n  et_EE: \"Estonian (Estonia)\",\n  et: \"Estonian\",\n  ee_GH: \"Ewe (Ghana)\",\n  ee_TG: \"Ewe (Togo)\",\n  ee: \"Ewe\",\n  fo_FO: \"Faroese (Faroe Islands)\",\n  fo: \"Faroese\",\n  fil_PH: \"Filipino (Philippines)\",\n  fil: \"Filipino\",\n  fi_FI: \"Finnish (Finland)\",\n  fi: \"Finnish\",\n  fr_BE: \"French (Belgium)\",\n  fr_BJ: \"French (Benin)\",\n  fr_BF: \"French (Burkina Faso)\",\n  fr_BI: \"French (Burundi)\",\n  fr_CM: \"French (Cameroon)\",\n  fr_CA: \"French (Canada)\",\n  fr_CF: \"French (Central African Republic)\",\n  fr_TD: \"French (Chad)\",\n  fr_KM: \"French (Comoros)\",\n  fr_CG: \"French (Congo - Brazzaville)\",\n  fr_CD: \"French (Congo - Kinshasa)\",\n  fr_CI: \"French (Côte d’Ivoire)\",\n  fr_DJ: \"French (Djibouti)\",\n  fr_GQ: \"French (Equatorial Guinea)\",\n  fr_FR: \"French (France)\",\n  fr_GA: \"French (Gabon)\",\n  fr_GP: \"French (Guadeloupe)\",\n  fr_GN: \"French (Guinea)\",\n  fr_LU: \"French (Luxembourg)\",\n  fr_MG: \"French (Madagascar)\",\n  fr_ML: \"French (Mali)\",\n  fr_MQ: \"French (Martinique)\",\n  fr_MC: \"French (Monaco)\",\n  fr_NE: \"French (Niger)\",\n  fr_RW: \"French (Rwanda)\",\n  fr_RE: \"French (Réunion)\",\n  fr_BL: \"French (Saint Barthélemy)\",\n  fr_MF: \"French (Saint Martin)\",\n  fr_SN: \"French (Senegal)\",\n  fr_CH: \"French (Switzerland)\",\n  fr_TG: \"French (Togo)\",\n  fr: \"French\",\n  ff_SN: \"Fulah (Senegal)\",\n  ff: \"Fulah\",\n  gl_ES: \"Galician (Spain)\",\n  gl: \"Galician\",\n  lg_UG: \"Ganda (Uganda)\",\n  lg: \"Ganda\",\n  ka_GE: \"Georgian (Georgia)\",\n  ka: \"Georgian\",\n  de_AT: \"German (Austria)\",\n  de_BE: \"German (Belgium)\",\n  de_DE: \"German (Germany)\",\n  de_LI: \"German (Liechtenstein)\",\n  de_LU: \"German (Luxembourg)\",\n  de_CH: \"German (Switzerland)\",\n  de: \"German\",\n  de: \"German\",\n  el_CY: \"Greek (Cyprus)\",\n  el_GR: \"Greek (Greece)\",\n  el: \"Greek\",\n  gu_IN: \"Gujarati (India)\",\n  gu: \"Gujarati\",\n  guz_KE: \"Gusii (Kenya)\",\n  guz: \"Gusii\",\n  ha_Latn: \"Hausa (Latin)\",\n  ha_Latn_GH: \"Hausa (Latin, Ghana)\",\n  ha_Latn_NE: \"Hausa (Latin, Niger)\",\n  ha_Latn_NG: \"Hausa (Latin, Nigeria)\",\n  ha: \"Hausa\",\n  haw_US: \"Hawaiian (United States)\",\n  haw: \"Hawaiian\",\n  he_IL: \"Hebrew (Israel)\",\n  he: \"Hebrew\",\n  hi_IN: \"Hindi (India)\",\n  hi: \"Hindi\",\n  hu_HU: \"Hungarian (Hungary)\",\n  hu: \"Hungarian\",\n  is_IS: \"Icelandic (Iceland)\",\n  is: \"Icelandic\",\n  ig_NG: \"Igbo (Nigeria)\",\n  ig: \"Igbo\",\n  id_ID: \"Indonesian (Indonesia)\",\n  id: \"Indonesian\",\n  ga_IE: \"Irish (Ireland)\",\n  ga: \"Irish\",\n  it_IT: \"Italian (Italy)\",\n  it_CH: \"Italian (Switzerland)\",\n  it: \"Italian\",\n  ja_JP: \"Japanese (Japan)\",\n  ja: \"Japanese\",\n  kea_CV: \"Kabuverdianu (Cape Verde)\",\n  kea: \"Kabuverdianu\",\n  kab_DZ: \"Kabyle (Algeria)\",\n  kab: \"Kabyle\",\n  kl_GL: \"Kalaallisut (Greenland)\",\n  kl: \"Kalaallisut\",\n  kln_KE: \"Kalenjin (Kenya)\",\n  kln: \"Kalenjin\",\n  kam_KE: \"Kamba (Kenya)\",\n  kam: \"Kamba\",\n  kn_IN: \"Kannada (India)\",\n  kn: \"Kannada\",\n  kk_Cyrl: \"Kazakh (Cyrillic)\",\n  kk_Cyrl_KZ: \"Kazakh (Cyrillic, Kazakhstan)\",\n  kk: \"Kazakh\",\n  km_KH: \"Khmer (Cambodia)\",\n  km: \"Khmer\",\n  ki_KE: \"Kikuyu (Kenya)\",\n  ki: \"Kikuyu\",\n  rw_RW: \"Kinyarwanda (Rwanda)\",\n  rw: \"Kinyarwanda\",\n  kok_IN: \"Konkani (India)\",\n  kok: \"Konkani\",\n  ko_KR: \"Korean (South Korea)\",\n  ko: \"Korean\",\n  khq_ML: \"Koyra Chiini (Mali)\",\n  khq: \"Koyra Chiini\",\n  ses_ML: \"Koyraboro Senni (Mali)\",\n  ses: \"Koyraboro Senni\",\n  lag_TZ: \"Langi (Tanzania)\",\n  lag: \"Langi\",\n  lv_LV: \"Latvian (Latvia)\",\n  lv: \"Latvian\",\n  lt_LT: \"Lithuanian (Lithuania)\",\n  lt: \"Lithuanian\",\n  luo_KE: \"Luo (Kenya)\",\n  luo: \"Luo\",\n  luy_KE: \"Luyia (Kenya)\",\n  luy: \"Luyia\",\n  mk_MK: \"Macedonian (Macedonia)\",\n  mk: \"Macedonian\",\n  jmc_TZ: \"Machame (Tanzania)\",\n  jmc: \"Machame\",\n  kde_TZ: \"Makonde (Tanzania)\",\n  kde: \"Makonde\",\n  mg_MG: \"Malagasy (Madagascar)\",\n  mg: \"Malagasy\",\n  ms_BN: \"Malay (Brunei)\",\n  ms_MY: \"Malay (Malaysia)\",\n  ms: \"Malay\",\n  ml_IN: \"Malayalam (India)\",\n  ml: \"Malayalam\",\n  mt_MT: \"Maltese (Malta)\",\n  mt: \"Maltese\",\n  gv_GB: \"Manx (United Kingdom)\",\n  gv: \"Manx\",\n  mr_IN: \"Marathi (India)\",\n  mr: \"Marathi\",\n  mas_KE: \"Masai (Kenya)\",\n  mas_TZ: \"Masai (Tanzania)\",\n  mas: \"Masai\",\n  mer_KE: \"Meru (Kenya)\",\n  mer: \"Meru\",\n  mfe_MU: \"Morisyen (Mauritius)\",\n  mfe: \"Morisyen\",\n  naq_NA: \"Nama (Namibia)\",\n  naq: \"Nama\",\n  ne_IN: \"Nepali (India)\",\n  ne_NP: \"Nepali (Nepal)\",\n  ne: \"Nepali\",\n  nd_ZW: \"North Ndebele (Zimbabwe)\",\n  nd: \"North Ndebele\",\n  nb_NO: \"Norwegian Bokmål (Norway)\",\n  nb: \"Norwegian Bokmål\",\n  nn_NO: \"Norwegian Nynorsk (Norway)\",\n  nn: \"Norwegian Nynorsk\",\n  nyn_UG: \"Nyankole (Uganda)\",\n  nyn: \"Nyankole\",\n  or_IN: \"Oriya (India)\",\n  or: \"Oriya\",\n  om_ET: \"Oromo (Ethiopia)\",\n  om_KE: \"Oromo (Kenya)\",\n  om: \"Oromo\",\n  ps_AF: \"Pashto (Afghanistan)\",\n  ps: \"Pashto\",\n  fa_AF: \"Persian (Afghanistan)\",\n  fa_IR: \"Persian (Iran)\",\n  fa: \"Persian\",\n  pl_PL: \"Polish (Poland)\",\n  pl: \"Polish\",\n  pt_BR: \"Portuguese (Brazil)\",\n  pt_GW: \"Portuguese (Guinea-Bissau)\",\n  pt_MZ: \"Portuguese (Mozambique)\",\n  pt_PT: \"Portuguese (Portugal)\",\n  pt: \"Portuguese\",\n  pa_Arab: \"Punjabi (Arabic)\",\n  pa_Arab_PK: \"Punjabi (Arabic, Pakistan)\",\n  pa_Guru: \"Punjabi (Gurmukhi)\",\n  pa_Guru_IN: \"Punjabi (Gurmukhi, India)\",\n  pa: \"Punjabi\",\n  ro_MD: \"Romanian (Moldova)\",\n  ro_RO: \"Romanian (Romania)\",\n  ro: \"Romanian\",\n  rm_CH: \"Romansh (Switzerland)\",\n  rm: \"Romansh\",\n  rof_TZ: \"Rombo (Tanzania)\",\n  rof: \"Rombo\",\n  ru_MD: \"Russian (Moldova)\",\n  ru_RU: \"Russian (Russia)\",\n  ru_UA: \"Russian (Ukraine)\",\n  ru: \"Russian\",\n  rwk_TZ: \"Rwa (Tanzania)\",\n  rwk: \"Rwa\",\n  saq_KE: \"Samburu (Kenya)\",\n  saq: \"Samburu\",\n  sg_CF: \"Sango (Central African Republic)\",\n  sg: \"Sango\",\n  seh_MZ: \"Sena (Mozambique)\",\n  seh: \"Sena\",\n  sr_Cyrl: \"Serbian (Cyrillic)\",\n  sr_Cyrl_BA: \"Serbian (Cyrillic, Bosnia and Herzegovina)\",\n  sr_Cyrl_ME: \"Serbian (Cyrillic, Montenegro)\",\n  sr_Cyrl_RS: \"Serbian (Cyrillic, Serbia)\",\n  sr_Latn: \"Serbian (Latin)\",\n  sr_Latn_BA: \"Serbian (Latin, Bosnia and Herzegovina)\",\n  sr_Latn_ME: \"Serbian (Latin, Montenegro)\",\n  sr_Latn_RS: \"Serbian (Latin, Serbia)\",\n  sr: \"Serbian\",\n  sn_ZW: \"Shona (Zimbabwe)\",\n  sn: \"Shona\",\n  ii_CN: \"Sichuan Yi (China)\",\n  ii: \"Sichuan Yi\",\n  si_LK: \"Sinhala (Sri Lanka)\",\n  si: \"Sinhala\",\n  sk_SK: \"Slovak (Slovakia)\",\n  sk: \"Slovak\",\n  sl_SI: \"Slovenian (Slovenia)\",\n  sl: \"Slovenian\",\n  xog_UG: \"Soga (Uganda)\",\n  xog: \"Soga\",\n  so_DJ: \"Somali (Djibouti)\",\n  so_ET: \"Somali (Ethiopia)\",\n  so_KE: \"Somali (Kenya)\",\n  so_SO: \"Somali (Somalia)\",\n  so: \"Somali\",\n  es_AR: \"Spanish (Argentina)\",\n  es_BO: \"Spanish (Bolivia)\",\n  es_CL: \"Spanish (Chile)\",\n  es_CO: \"Spanish (Colombia)\",\n  es_CR: \"Spanish (Costa Rica)\",\n  es_DO: \"Spanish (Dominican Republic)\",\n  es_EC: \"Spanish (Ecuador)\",\n  es_SV: \"Spanish (El Salvador)\",\n  es_GQ: \"Spanish (Equatorial Guinea)\",\n  es_GT: \"Spanish (Guatemala)\",\n  es_HN: \"Spanish (Honduras)\",\n  es_419: \"Spanish (Latin America)\",\n  es_MX: \"Spanish (Mexico)\",\n  es_NI: \"Spanish (Nicaragua)\",\n  es_PA: \"Spanish (Panama)\",\n  es_PY: \"Spanish (Paraguay)\",\n  es_PE: \"Spanish (Peru)\",\n  es_PR: \"Spanish (Puerto Rico)\",\n  es_ES: \"Spanish (Spain)\",\n  es_US: \"Spanish (United States)\",\n  es_UY: \"Spanish (Uruguay)\",\n  es_VE: \"Spanish (Venezuela)\",\n  es: \"Spanish\",\n  sw_KE: \"Swahili (Kenya)\",\n  sw_TZ: \"Swahili (Tanzania)\",\n  sw: \"Swahili\",\n  sv_FI: \"Swedish (Finland)\",\n  sv_SE: \"Swedish (Sweden)\",\n  sv: \"Swedish\",\n  gsw_CH: \"Swiss German (Switzerland)\",\n  gsw: \"Swiss German\",\n  shi_Latn: \"Tachelhit (Latin)\",\n  shi_Latn_MA: \"Tachelhit (Latin, Morocco)\",\n  shi_Tfng: \"Tachelhit (Tifinagh)\",\n  shi_Tfng_MA: \"Tachelhit (Tifinagh, Morocco)\",\n  shi: \"Tachelhit\",\n  dav_KE: \"Taita (Kenya)\",\n  dav: \"Taita\",\n  ta_IN: \"Tamil (India)\",\n  ta_LK: \"Tamil (Sri Lanka)\",\n  ta: \"Tamil\",\n  te_IN: \"Telugu (India)\",\n  te: \"Telugu\",\n  teo_KE: \"Teso (Kenya)\",\n  teo_UG: \"Teso (Uganda)\",\n  teo: \"Teso\",\n  th_TH: \"Thai (Thailand)\",\n  th: \"Thai\",\n  bo_CN: \"Tibetan (China)\",\n  bo_IN: \"Tibetan (India)\",\n  bo: \"Tibetan\",\n  ti_ER: \"Tigrinya (Eritrea)\",\n  ti_ET: \"Tigrinya (Ethiopia)\",\n  ti: \"Tigrinya\",\n  to_TO: \"Tonga (Tonga)\",\n  to: \"Tonga\",\n  tr_TR: \"Turkish (Turkey)\",\n  tr: \"Turkish\",\n  uk_UA: \"Ukrainian (Ukraine)\",\n  uk: \"Ukrainian\",\n  ur_IN: \"Urdu (India)\",\n  ur_PK: \"Urdu (Pakistan)\",\n  ur: \"Urdu\",\n  uz_Arab: \"Uzbek (Arabic)\",\n  uz_Arab_AF: \"Uzbek (Arabic, Afghanistan)\",\n  uz_Cyrl: \"Uzbek (Cyrillic)\",\n  uz_Cyrl_UZ: \"Uzbek (Cyrillic, Uzbekistan)\",\n  uz_Latn: \"Uzbek (Latin)\",\n  uz_Latn_UZ: \"Uzbek (Latin, Uzbekistan)\",\n  uz: \"Uzbek\",\n  vi_VN: \"Vietnamese (Vietnam)\",\n  vi: \"Vietnamese\",\n  vun_TZ: \"Vunjo (Tanzania)\",\n  vun: \"Vunjo\",\n  cy_GB: \"Welsh (United Kingdom)\",\n  cy: \"Welsh\",\n  yo_NG: \"Yoruba (Nigeria)\",\n  yo: \"Yoruba\",\n  zu_ZA: \"Zulu (South Africa)\",\n  zu: \"Zulu\",\n};\nexport { LANGUAGES, TRANSLATION_KEYS_MAPPING, TRANSLATIONS, LOCALES };\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/locale/i18n.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/locale/locale.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Translation/index.js",["463","464"],"import { useState, useEffect } from \"react\";\nimport { Tabs, Button, Upload, Modal, Select, message } from \"antd\";\nimport { UploadOutlined } from '@ant-design/icons';\nimport { Hooks, Components } from \"tracker-capture-app-core\";\nimport TranslationTable from \"./TranslationTable\";\nimport { exportingTranslations, importingTranslations } from \"../../utils/excel.utility\";\nimport \"./index.css\";\nimport { LANGUAGES, TRANSLATIONS, LOCALES } from \"./const\";\nimport localeFile from \"../../locale/locale\";\n// import { InitTranslation } from \"../../locale/i18n\";\nimport { useTranslation } from \"react-i18next\";\nconst { Option } = Select;\nconst { TabPane } = Tabs;\nconst { useApi } = Hooks;\nconst { LoadingMask } = Components;\n\nconst Translation = () => {\n  const { t } = useTranslation();\n  const { metadataApi } = useApi();\n  const [loading, setLoading] = useState(true);\n  const [translations, setTranslations] = useState(null);\n  const [languages, setLanguages] = useState(null);\n  const [addLanguageModal, setAddLanguageModal] = useState(false);\n  const [exportTranslationModal, setExportTranslationModal] = useState(false);\n  const [importTranslationModal, setImportTranslationModal] = useState(false);\n  const [selectedAddLanguage, setSelectedAddLanguage] = useState(null);\n  const [selectedExportLanguage, setSelectedExportLanguage] = useState(null);\n  const [selectedImportTranslations,setSelectedImportTranslations] = useState(null);\n  const [uploadMessage,setUploadMessage] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      let result = await metadataApi.get(\n        \"/api/dataStore/WHO_ICD11_COD/translation\"\n      );\n      if (result.status) {\n        let array = [];\n        let arrayLanguages = [\n          {\n            label: \"English\",\n            key: \"en\",\n          },\n        ];\n        Object.entries(localeFile.en.translation).forEach((value) => {\n          let object = {\n            key: value[0],\n            translation: { en: value[1] },\n          };\n          array.push(object);\n        });\n        setTranslations(array);\n        setLanguages(arrayLanguages);\n        await metadataApi.push(\"setLanguages\", {\n          translations: array,\n          languages: arrayLanguages,\n        });\n        setLoading(false);\n      } else {\n        setTranslations(result.translations);\n        setLanguages(result.languages);\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  const changeTranslation = (key, lang, value) => {\n    const foundIndex = translations.findIndex((t) => t.key === key);\n    translations[foundIndex].translation[lang] = value;\n    setTranslations([...translations]);\n  };\n\n  const addNewLanguage = () => {\n    if (selectedAddLanguage) {\n      let findExistLanguage = languages.find(\n        (e) => e.key === selectedAddLanguage\n      );\n      if (!findExistLanguage) {\n        languages.push({\n          label: LOCALES[selectedAddLanguage],\n          key: selectedAddLanguage,\n        });\n        setLanguages(languages);\n        if ( selectedAddLanguage === \"fr\" || selectedAddLanguage === \"ar\" ) {\n          setTranslations(translations.map( t => {\n            const findTranslation = TRANSLATIONS.find( ({key}) => key === t.key );\n            return findTranslation ? {\n              ...t,\n              translation: {\n                ...t.translation,\n                [selectedAddLanguage]: findTranslation.translation[selectedAddLanguage]\n              }\n            } : t;\n          }))\n        }\n      }\n      setSelectedAddLanguage(null);\n    }\n    setAddLanguageModal(false);\n  };\n\n  const importTranslations = () => {\n    let isValidLanguage = true;\n    let tempLanguages = [];\n\n    const newTranslations = selectedImportTranslations.map( t => {\n      Object.entries(t).forEach( ([key,value]) => {\n        if (!tempLanguages.find( l => l === key)) {\n          if ( key !== \"key\" ) {\n            tempLanguages.push(key);\n          }\n        }\n      });\n      return {\n        key: t.key,\n        translation: (({ key, ...o }) => o)(t)\n      }\n    });\n\n    tempLanguages.forEach( k => {\n      if ( k !== \"key\" && k !== \"en\" ) {\n        isValidLanguage = LOCALES[k] ? true : false;\n      }\n    });\n\n    if (isValidLanguage) {\n      setLanguages(tempLanguages.map( l => ({\n        key: l,\n        label: LOCALES[l]\n      })));\n      setTranslations(newTranslations);\n    }\n    else {\n      message.error(\"ERROR!!! One of the locales in the importing is invalid.\");\n    }\n  }\n\n  const saveTranslation = async () => {\n    setLoading(true);\n    await metadataApi.push(\n      \"/api/dataStore/WHO_ICD11_COD/translation\",\n      {\n        translations: translations,\n        languages: languages,\n      },\n      \"PUT\"\n    );\n    // InitTranslation();\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"translation-wrapper\">\n      {loading ? (\n        <LoadingMask />\n      ) : (\n        <div className=\"translation-container\">\n          <Tabs defaultActiveKey=\"1\">\n            <TabPane tab={t(\"dataEntry\")} key=\"1\">\n              <TranslationTable\n                type=\"dataEntry\"\n                translations={translations}\n                changeTranslation={changeTranslation}\n                languages={languages}\n              />\n            </TabPane>\n            <TabPane tab={t(\"anacodExport\")} key=\"2\">\n              <TranslationTable\n                type=\"anacodExport\"\n                translations={translations}\n                changeTranslation={changeTranslation}\n                languages={languages}\n              />\n            </TabPane>\n            <TabPane tab={t(\"dashboard\")} key=\"3\">\n              <TranslationTable\n                type=\"dashboard\"\n                translations={translations}\n                changeTranslation={changeTranslation}\n                languages={languages}\n              />\n            </TabPane>\n            <TabPane tab={t(\"administration\")} key=\"4\">\n              <TranslationTable\n                type=\"administration\"\n                translations={translations}\n                changeTranslation={changeTranslation}\n                languages={languages}\n              />\n            </TabPane>\n            <TabPane tab={t(\"translation\")} key=\"5\">\n              <TranslationTable\n                type=\"translation\"\n                translations={translations}\n                changeTranslation={changeTranslation}\n                languages={languages}\n              />\n            </TabPane>\n          </Tabs>\n          <div className=\"translation-buttons-container\">\n            <div style={{ paddingRight: \"10px\" }}>\n              <Button type=\"primary\" onClick={saveTranslation}>\n                {t(\"save\")}\n              </Button>\n            </div>\n            <div style={{ paddingRight: \"10px\" }}>\n              <Button onClick={() => { setAddLanguageModal(true); }}>\n                {t(\"addLanguage\")}\n              </Button>\n            </div>\n            <div style={{ paddingRight: \"10px\" }}>\n              <Button onClick={() => { setExportTranslationModal(true) }}>\n                Export Translations\n              </Button>\n            </div>\n            <div style={{ paddingRight: \"10px\" }}>\n              <Button onClick={() => { setImportTranslationModal(true) }}>\n                Import Translations\n              </Button>\n            </div>\n            <Modal\n              title={t(\"addLanguage\")}\n              visible={addLanguageModal}\n              onOk={addNewLanguage}\n              onCancel={() => { setAddLanguageModal(false) }}\n              okText={t(\"add\")}\n              cancelText={t(\"cancel\")}\n              okButtonProps={{\n                disabled: selectedAddLanguage === null\n              }}\n            >\n              <Select\n                placeholder={t(\"pleaseSelectLanguage\")}\n                style={{ width: \"100%\" }}\n                showSearch\n                allowClear\n                onChange={(value) => {\n                  setSelectedAddLanguage(value);\n                }}\n              >\n                {Object.keys(LOCALES).map((key) => {\n                  return <Option value={key}>{LOCALES[key]}</Option>;\n                })}\n              </Select>\n            </Modal>\n            <Modal\n              title=\"Import Translations\"\n              visible={importTranslationModal}\n              onOk={() => { \n                setImportTranslationModal(false); \n                importTranslations();\n                setSelectedImportTranslations(null);\n                setUploadMessage(null);\n              }}\n              onCancel={() => { \n                setImportTranslationModal(false);\n                setSelectedImportTranslations(null);\n                setUploadMessage(null);\n              }}\n              okText={\"Import\"}\n              cancelText={\"Cancel\"}\n              okButtonProps={{\n                disabled: selectedImportTranslations === null\n              }}\n            >\n              <div>\n                <Upload\n                  accept={\".xls, .xlsx, .csv\"}\n                  maxCount={1}\n                  multiple={false}\n                  customRequest={({ file, onSuccess }) => {\n                    // You can perform your custom file upload logic here\n                    // For example, read the file and handle it without a specific action/endpoint\n                    // readXLSXFile(file)\n                    //   .then(fileData => {\n                    //     console.log('Custom file upload logic:', fileData);\n                    //     onSuccess(); // Indicate that the upload was successful\n                    //   })\n                    //   .catch(error => {\n                    //     console.error('Error during custom file upload logic:', error);\n                    //     message.error('File upload failed.');\n                    //   });\n                    onSuccess();\n                  }}\n                  onChange={async info => {\n                    if (info.file.status === 'done') {\n                      try {\n                        const fileData = await importingTranslations(info.file.originFileObj);\n                        // Handle the file data (e.g., display it, send it to the server, etc.)\n                        setSelectedImportTranslations(fileData);\n                        setUploadMessage(info.file.name);\n                      } catch (error) {\n                        setUploadMessage(`Error reading ${info.file.name} file: ${error.message}`);\n                      }\n                    } else if (info.file.status === 'error') {\n                      setUploadMessage(`${info.file.name} file upload failed.`);\n                    }\n                  }}\n                  showUploadList={false}\n                >\n                  <Button icon={<UploadOutlined />}>Upload XLSX</Button>\n                </Upload>\n              </div>\n              <div>\n               <i>{uploadMessage}</i>\n              </div>\n            </Modal>\n            <Modal\n              title=\"Export Translations\"\n              visible={exportTranslationModal}\n              onOk={() => { \n                setExportTranslationModal(false);\n                exportingTranslations(translations,selectedExportLanguage);\n              }}\n              onCancel={() => { setExportTranslationModal(false) }}\n              okText={\"Export\"}\n              cancelText={\"Cancel\"}\n              okButtonProps={{\n                disabled: selectedExportLanguage === null\n              }}\n            >\n              <Select\n                placeholder={t(\"pleaseSelectLanguage\")}\n                style={{ width: \"100%\" }}\n                showSearch\n                allowClear\n                onChange={(value) => {\n                  setSelectedExportLanguage(value);\n                }}\n              >\n                {Object.keys(LOCALES).filter( key => languages.find( ({key: languageKey}) => languageKey === key ) ).map((key) => {\n                  return <Option value={key}>{LOCALES[key]}</Option>;\n                })}\n              </Select>\n            </Modal>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Translation;\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/RegisteredTeiList/index.js",["465","466","467","468","469","470","471"],"import { useRef, useEffect, useState } from \"react\";\nimport { Table, Tag } from \"antd\";\nimport { Hooks, Components } from \"tracker-capture-app-core\";\nimport \"./index.css\";\nimport { generateTableColumns, generateTableFilter } from \"../../utils/index\";\n/* REDUX */\nimport { connect } from \"react-redux\";\nimport { initData } from \"../../redux/actions/data\";\nimport { changeRoute } from \"../../redux/actions/route\";\nimport { useTranslation } from \"react-i18next\";\n/*       */\n\n/* Components */\nimport { SearchOutlined } from \"@ant-design/icons\";\nconst { useApi } = Hooks;\nconst { LoadingMask } = Components;\n\nconst RegisteredTeiList = ({ metadata, data, userRoles, initData, changeRoute }) => {\n  const { t } = useTranslation();\n  const { dataApi } = useApi();\n  const { programMetadata, selectedOrgUnit } = metadata;\n  const tableContainer = useRef(null);\n  const [size, setSize] = useState({ height: 0 });\n  const [loadingTable, setLoadingTable] = useState(true);\n  const [loadingPage, setLoadingPage] = useState(true);\n  const [sortTable, setSortTable] = useState(\"order=created:desc\");\n  const [filterTable, setFilterTable] = useState([]);\n\n  const [tableData, setTableData] = useState({\n    columns: null,\n    data: null,\n    pager: null,\n  });\n\n  useEffect(() => {\n    const tableContainerHeight = tableContainer.current.offsetHeight;\n    setSize({\n      ...size,\n      height: tableContainerHeight,\n    });\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!programMetadata || !selectedOrgUnit) return;\n      setLoadingPage(true);\n      setFilterTable([]);\n      setSortTable(\"order=created:desc\");\n      setTableData({\n        ...tableData,\n        columns: null,\n        data: null,\n        pager: null,\n      });\n      const instanceList = await dataApi.getTrackedEntityInstanceListByQuery(\n        selectedOrgUnit.id,\n        programMetadata.id,\n        10,\n        1,\n        \"\",\n        sortTable\n      );\n      console.log(instanceList);\n      setupUI(instanceList);\n    })();\n  }, [\n    programMetadata ? programMetadata.id : null,\n    selectedOrgUnit ? selectedOrgUnit.id : null,\n  ]);\n\n  useEffect(() => {\n    if (selectedOrgUnit) {\n      (async () => {\n        setLoadingTable(true);\n        const instanceList = await dataApi.getTrackedEntityInstanceListByQuery(\n          selectedOrgUnit.id,\n          programMetadata.id,\n          tableData.pager ? tableData.pager.pageSize : 10,\n          tableData.page ? tableData.pager.page : 1,\n          returnFilterString(filterTable),\n          sortTable\n        );\n        setupUI(instanceList);\n      })();\n    }\n  }, [filterTable, sortTable]);\n\n  const returnFilterString = (arr) => {\n    let filterString = \"\";\n    arr.forEach((e) => {\n      if (e.type === \"select\") {\n        filterString += `&attribute=${e.teiId}:EQ:${e.value}`;\n      } else {\n        filterString += `&attribute=${e.teiId}:LIKE:${e.value}`;\n      }\n    });\n    return filterString;\n  };\n\n  const onSort = async (sorter) => {\n    if (sorter) {\n      let orderString = \"\";\n      if (sorter.order === \"descend\") {\n        orderString = `order=${sorter.columnKey}:desc`;\n      } else {\n        if (sorter.order === \"ascend\") {\n          orderString = `order=${sorter.columnKey}:asc`;\n        } else {\n          orderString = `order=created:desc`;\n        }\n      }\n      setSortTable(orderString);\n    }\n  };\n\n  const onFilter = async (value, teiId, type) => {\n    let arr = [];\n    arr = filterTable;\n    if (value && arr) {\n      let find = arr.findIndex((e) => e.teiId === teiId);\n      if (find >= 0) {\n        arr[find].value = value;\n      } else {\n        arr.push({\n          value,\n          teiId,\n          type: type ? type : null,\n        });\n      }\n    } else {\n      let find = arr.findIndex((e) => e.teiId === teiId);\n      arr.splice(find, 1);\n    }\n    setFilterTable([...arr]);\n  };\n\n  const setupUI = (instanceList) => {\n    let columns = programMetadata.trackedEntityAttributes\n      .filter((tea) => tea.displayInList)\n      .map((tea) => {\n        const teaObject = {\n          title: tea.displayFormName,\n          dataIndex: tea.id,\n          key: tea.id,\n          sorter: true,\n          filterDropdown: generateTableFilter(tea, onFilter),\n          render: generateTableColumns(tea),\n        };\n        return teaObject;\n      });\n    const lastUpdatedObject = {\n      title: t(\"lastUpdated\"),\n      dataIndex: \"lastupdated\",\n      key: \"lastupdated\",\n      sorter: true,\n      // filterDropdown: generateTableFilter(null, onFilter, {\n      //   name: \"lastupdated\",\n      //   type: \"DATE\",\n      // }),\n      render: generateTableColumns(null, { name: \"lastupdated\", type: \"DATE\" }),\n    };\n    columns.unshift(lastUpdatedObject);\n    const data = instanceList.rows.map((row, index) => {\n      const rowObject = {\n        key: index,\n      };\n\n      const teiIdIndex = instanceList.headers.findIndex(\n        (h) => h.name === \"instance\"\n      );\n      rowObject.teiId = row[teiIdIndex];\n\n      columns.forEach((column) => {\n        const columnIndex = instanceList.headers.findIndex((h) => {\n          return h.name === column.dataIndex;\n        });\n        rowObject[column.dataIndex] =\n          columnIndex !== -1 ? row[columnIndex] : \"\";\n      });\n      rowObject[\"rZSVLUfgHlD\"] = (rowObject[\"rZSVLUfgHlD\"] !== \"Completed\") ? \"Pending\" : \"Completed\";\n      return rowObject;\n    });\n\n    setLoadingPage(false);\n    setLoadingTable(false);\n    setTableData({\n      ...tableData,\n      columns,\n      data,\n      pager: instanceList.metaData.pager,\n    });\n  };\n\n  const onChangePage = async (page, pageSize) => {\n    setLoadingTable(true);\n    const instanceList = await dataApi.getTrackedEntityInstanceListByQuery(\n      selectedOrgUnit.id,\n      programMetadata.id,\n      pageSize,\n      page,\n      returnFilterString(filterTable),\n      sortTable\n    );\n    setupUI(instanceList);\n  };\n\n  return (\n    <div className=\"registered-tei-list-wrapper\">\n      <div className=\"registered-tei-list-container\" ref={tableContainer}>\n        {selectedOrgUnit ? (\n          !loadingPage ? (\n            <Table\n              onRow={(record, rowIndex) => {\n                return {\n                  onClick: async (event) => {\n                    if (userRoles.admin || userRoles.data) {\n                      setLoadingPage(true);\n                      const result = await dataApi.getTrackedEntityInstanceById(\n                        record.teiId,\n                        programMetadata.id\n                      );\n                      setLoadingPage(false);\n                      initData(result, programMetadata);\n                      changeRoute(\"form\");\n                    }\n                  },\n                };\n              }}\n              sticky\n              tableLayout={\"fixed\"}\n              pagination={\n                tableData.pager\n                  ? {\n                      position: [\"bottomCenter\"],\n                      showSizeChanger: true,\n                      defaultCurrent: tableData.pager.page,\n                      total: tableData.pager.total,\n                      onChange: onChangePage,\n                    }\n                  : null\n              }\n              columns={tableData.columns}\n              dataSource={tableData.data}\n              scroll={{ y: size.height - 200 }}\n              loading={loadingTable}\n              onChange={(pagination, filters, sorter, extra) => {\n                onSort(sorter);\n              }}\n              bordered={true}\n              locale={{\n                triggerDesc: t(\"triggerDesc\"),\n                triggerAsc: t(\"triggerAsc\"),\n                cancelSort: t(\"cancelSort\"),\n              }}\n            />\n          ) : (\n            <LoadingMask />\n          )\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    metadata: state.metadata,\n    data: state.data,\n    userRoles: state.user.userRoles\n  };\n};\n\nconst mapDispatchToProps = {\n  initData,\n  changeRoute,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisteredTeiList);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/HeaderBar/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/index.js",["472"],"import { useState, useEffect } from \"react\";\nimport Selections from \"./Selections\";\nimport Attributes from \"./Attributes\";\nimport FrameA from \"./FrameA\";\n// import FrameB from \"./FrameB\";\nimport AssignOrgUnits from \"./AssignOrgUnits\";\nimport AssignUsers from \"./AssignUsers\";\nimport Certificate from \"./Certificate\";\nimport Review from \"./Review\";\nimport Finish  from \"./Finish\";\nimport { Steps, Button, message, Spin } from \"antd\";\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { Hooks } from \"tracker-capture-app-core\";\n/* REDUX */\nimport { connect } from \"react-redux\";\nimport { changeStep } from \"../../redux/actions/admin\";\nimport { setFormMapping_TEAs, setProgramMetadata, setCertificateTemplate, setCustomCertificate, setFemaleCode } from \"../../redux/actions/metadata\";\n/*       */\nimport \"./index.css\";\nimport { useTranslation } from \"react-i18next\";\n\nconst { Step } = Steps;\nconst { useApi } = Hooks;\n\nconst Administration = ({ admin, programMetadata, formMapping, metadataFullnameOption, changeStep, setFormMapping_TEAs, setProgramMetadata, setCertificateTemplate, setFemaleCode, setCustomCertificate }) => {\n  const { t } = useTranslation();\n  \n  const [open, setOpen] = useState(false);\n  const [spinning, setSpinning] = useState(false);\n  const { metadataApi } = useApi();\n  const { \n    step, \n    type,\n    trackedEntityAttributes,\n    trackedEntityType,\n    certificateTemplate,\n    femaleOption,\n    fullnameOption,\n    customCertificate\n  } = admin;\n\n  const antIcon = <LoadingOutlined style={{ fontSize: 102 }} />;\n\n  useEffect(() => {\n    if ( programMetadata !== null ) { \n      setOpen(false);\n      changeStep(0);\n    }\n  },[programMetadata])\n\n  return (\n    <div className=\"administration-wrapper\">\n      <Finish open={open} />\n      {\n        (programMetadata === null) ? \n        <div className=\"administration-container\">\n          <div className=\"administration-stepper\">\n            <Steps current={step} size=\"small\">\n              <Step title={t(\"step1Installation\")} disabled={true} />\n              <Step title={t(\"step2Attribute\")} />\n              <Step title={t(\"step3FrameA\")} />\n              {/* <Step title={t(\"step4FrameB\")} /> */}\n              <Step title={t(\"step5OUs\")} />\n              <Step title={t(\"step6Users\")} />\n              <Step title={t(\"step7Review\")} />\n            </Steps>\n          </div>\n          {step !== 0 && (\n            <div className=\"administration-navigation-buttons-container\">\n              <Button\n                onClick={() => {\n                  // changeStep(step === 4 && type === \"default\" ? 0 : step >= 1 ? step - 1 : 0);\n                  changeStep(step === 3 && type === \"default\" ? 0 : step - 1);\n                }}\n              >{\n                t(\"back\")\n              }</Button>\n              { (step===5) ? \n                <Button type=\"primary\"\n                  style={{ marginLeft: 10 }}\n                  onClick={() => setOpen(true)}\n                >{\n                  t(\"install\")\n                }</Button> \n                :\n                <Button\n                  onClick={() => {\n                    if (step === 0) {\n                      if ( type === \"default\" ) {\n                        changeStep(3);\n                      }\n                    }\n                    else if ( step === 1 ) {\n                      if ( type === \"custom\" ) {\n                        if ( trackedEntityType === null || femaleOption === \"\" || femaleOption === null ) {\n                          // Show error\n                          message.error(t(\"errorMissingTET\"));\n                        } \n                        // else if (!fullnameOption && trackedEntityAttributes.filter( ([destination,]) => destination !== '' ).length < 7) {\n                        //   message.error(t(\"errorMissingTET\"));\n                        // }\n                        else if ( fullnameOption === \"noname\" &&  trackedEntityAttributes.filter( ([destination,source]) => destination !== '' && source !== null ).length < 5) {\n                          message.error(t(\"errorMissingTET\"));\n                        }\n                        else if ( fullnameOption === \"fullname\" &&  trackedEntityAttributes.filter( ([destination,source]) => destination !== '' && source !== null ).length < 6) {\n                          message.error(t(\"errorMissingTET\"));\n                        }\n                        else if ( fullnameOption === \"firstlastname\" &&  trackedEntityAttributes.filter( ([destination,source]) => destination !== '' && source !== null ).length < 7) {\n                          message.error(t(\"errorMissingTET\"));\n                        }\n                        else if ( fullnameOption === \"firstmidlastname\" &&  trackedEntityAttributes.filter( ([destination,source]) => destination !== '' && source !== null ).length < 8) {\n                          message.error(t(\"errorMissingTET\"));\n                        }\n                        else changeStep(2);\n                      }\n                    }\n                    else changeStep(step < 6 ? step + 1 : 6);\n                  }}\n                  style={{ marginLeft: 10 }}\n                >{\n                  t(\"next\")\n                }</Button>\n              }\n            </div>\n          )}\n          <div className=\"administration-content-container\">\n            {step === 0 && <Selections />}\n            {step === 1 && <Attributes />}\n            {step === 2 && <FrameA />}\n            {/* {step === 3 && <FrameB />} */}\n            {step === 3 && <AssignOrgUnits />}\n            {step === 4 && <AssignUsers />}\n            {step === 5 && <Review />}\n          </div>\n        </div>\n        : \n        <div className=\"administration-container\">\n          <div className=\"administration-stepper\">\n            <Steps current={step} size=\"small\">\n              <Step title={t(\"step1Attributes\")} />\n              <Step title={t(\"step2Certificate\")} />\n            </Steps>\n          </div>\n          <Spin spinning={spinning} indicator={antIcon} >\n            <div className=\"administration-navigation-buttons-container\">\n              {\n                (step===1) ? \n                  <>\n                    <Button onClick={() => changeStep(step - 1) }>Back</Button>\n                    <Button type=\"primary\"\n                      style={{ marginLeft: 10 }}\n                      onClick={() => {\n                        if ( customCertificate ) {\n                          setSpinning(true);\n                          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/customCertificate\", {certificate: customCertificate}, \"PUT\").then( res => {\n                            setCustomCertificate(customCertificate);\n                            message.success(t(\"saveSuccessful\"));\n                            setSpinning(false);\n                          });\n                        }\n                        setSpinning(true);\n                        metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/certificateTemplate\", {certificate: certificateTemplate}, \"PUT\").then( res => {\n                          setCertificateTemplate(certificateTemplate);\n                          message.success(t(\"saveSuccessful\"));\n                          setSpinning(false);\n                        });\n                      }}\n                    >\n                      {t(\"save\")}\n                    </Button> \n                  </>\n                  :\n                  <>\n                    <Button onClick={() => changeStep(step + 1) }>Next</Button>\n                    <Button type=\"primary\"\n                      style={{ marginLeft: 10 }}\n                      onClick={() => {\n                        setSpinning(true);\n                        // Update formMapping in redux and dataStore\n                        let attributes = {};\n                        admin.trackedEntityAttributes.forEach( defaultAttribute => {\n                          if (defaultAttribute[1] === \"Unique ID\") attributes[\"system_id\"] = defaultAttribute[0];\n                          if (\n                            defaultAttribute[1] === \"First Name\" \n                            && ( \n                              metadataFullnameOption === \"fullname\"\n                              || metadataFullnameOption === \"firstlastname\"\n                              || metadataFullnameOption === \"firstmidlastname\"\n                              || fullnameOption === \"fullname\"\n                              || fullnameOption === \"firstlastname\"\n                              || fullnameOption === \"firstmidlastname\"\n                            )\n                          ) attributes[\"given_name\"] = defaultAttribute[0];\n                          if (\n                            defaultAttribute[1] === \"Middle Name\"\n                            && ( \n                              metadataFullnameOption === \"firstmidlastname\"\n                              || fullnameOption === \"firstmidlastname\"\n                            )\n                          ) attributes[\"middle_name\"] = defaultAttribute[0];\n                          if (\n                            defaultAttribute[1] === \"Last Name\"\n                            && ( \n                              metadataFullnameOption === \"firstlastname\"\n                              || metadataFullnameOption === \"firstmidlastname\"\n                              || fullnameOption === \"firstlastname\"\n                              || fullnameOption === \"firstmidlastname\"\n                            )\n                          ) attributes[\"family_name\"] = defaultAttribute[0];\n                          if (defaultAttribute[1] === \"Date of Birth\") attributes[\"dob\"] = defaultAttribute[0];\n                          if (defaultAttribute[1] === \"Date of Birth is estimated\") attributes[\"estimated_dob\"] = defaultAttribute[0];\n                          if (defaultAttribute[1] === \"Age in years\") attributes[\"age\"] = defaultAttribute[0];\n                          if (defaultAttribute[1] === \"Address\") attributes[\"address\"] = defaultAttribute[0];\n                          if (defaultAttribute[1] === \"Sex\") attributes[\"sex\"] = defaultAttribute[0];\n                          if (defaultAttribute[1] === \"Age unit\") attributes[\"age_unit\"] = defaultAttribute[0];\n                          if (defaultAttribute[1] === \"Estimated age\") attributes[\"estimated_age\"] = defaultAttribute[0];\n                          if (defaultAttribute[1] === \"COD Status\") attributes[\"status\"] = defaultAttribute[0];\n                        });\n                        setFormMapping_TEAs(attributes);\n                        metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/formMapping\", {\n                          ...formMapping,\n                          attributes: attributes\n                        }, \"PUT\");\n\n                        // Update femaleCode\n                        setFemaleCode(femaleOption);\n                        metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/femaleOption\", {code: femaleOption}, \"PUT\");\n                        \n                        // Update program in DHIS2 and programMetadata in Redux\n                        metadataApi.get(\"/api/programs.json\", { paging: false }, [\"fields=:owner\",\"filter=id:eq:\"+programMetadata.id] ).then( programs => {\n                          //default attributes\n                          let program = {\n                            ...programs.programs[0],\n                            trackedEntityType: {\n                              id: admin.trackedEntityType\n                            },\n                            programTrackedEntityAttributes: admin.trackedEntityAttributes.filter( ([destination,]) => destination !== undefined ).map( ([destination,source],index) => \n                              ({\n                                \"mandatory\": source === \"Sex\" || source === \"Age in years\",\n                                \"searchable\": true,\n                                \"renderOptionsAsRadio\": false,\n                                \"displayInList\": true,\n                                \"sortOrder\": index + 1,\n                                \"program\": { \"id\": programMetadata.id },\n                                \"trackedEntityAttribute\": { \"id\": destination },\n                                \"programTrackedEntityAttributeGroups\": []\n                              })\n                            )\n                          };\n                          // //other attributes\n                          // admin.trackedEntityAttributes.slice(10,admin.trackedEntityAttributes.length).forEach( (tea, index) => {\n                          //   program.programTrackedEntityAttributes.push({\n                          //     \"mandatory\": false,\n                          //     \"searchable\": false,\n                          //     \"renderOptionsAsRadio\": false,\n                          //     \"displayInList\": false,\n                          //     \"sortOrder\": program.programTrackedEntityAttributes.length + 1,\n                          //     \"program\": { \"id\": programMetadata.id  },\n                          //     \"trackedEntityAttribute\": { \"id\": tea[0] },\n                          //     \"programTrackedEntityAttributeGroups\": []\n                          //   })\n                          // });\n                          // update program in DHIS2\n                          metadataApi.push(`/api/metadata?importStrategy=IMPORT_AND_UPDATE`, { programs: [program]}).then( res => {\n                            metadataApi.getProgramMetadata(programMetadata.id).then( metadata => {\n                              // update program in dataStore\n                              setProgramMetadata(metadata);\n                              setSpinning(false);\n                              message.success(t(\"saveSuccessful\"));\n                            })\n                          });\n                        })\n                      }}\n                    >{\n                      t(\"save\")\n                    }</Button>\n                  </>\n              }\n            </div>\n            <div className=\"administration-content-container\">\n              {step === 0 && <Attributes />}\n              {step === 1 && <Certificate />}\n            </div>\n          </Spin>\n        </div>\n      }\n      \n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    admin: state.admin,\n    programMetadata: state.metadata.programMetadata,\n    formMapping: state.metadata.formMapping,\n    metadataFullnameOption: state.metadata.fullnameOption\n  };\n};\n\nconst mapDispatchToProps = {\n  changeStep,\n  setFormMapping_TEAs,\n  setProgramMetadata,\n  setCertificateTemplate,\n  setFemaleCode,\n  setCustomCertificate\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Administration);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Search/index.js",["473","474","475"],"import { useState, useEffect } from \"react\";\nimport { Hooks } from \"tracker-capture-app-core\";\nimport { Card, Button, Collapse, Table, message } from \"antd\";\nimport InputField from \"../InputField\";\nimport { connect } from \"react-redux\";\nimport { initNewEnrollment, initData } from \"../../redux/actions/data\";\nimport { changeRoute } from \"../../redux/actions/route\";\nimport SeartResult from \"./Result\";\nimport \"./index.css\";\nimport { useTranslation } from \"react-i18next\";\nconst { Panel } = Collapse;\n\nconst { useApi } = Hooks;\n\nconst SearchForm = ({ programMetadata, trackedEntityType, initData, initNewEnrollment, changeRoute, programs, selectedOrgUnit, userRoles }) => {\n  const { dataApi } = useApi();\n  const { t } = useTranslation();\n\n  const [option, setOption] = useState(\"program\"); // [\"program\",\"person\"]\n  const [filters, setFilters] = useState([]);\n  const [data, setData] = useState([]);\n  const [pager, setPager] = useState({\n      current: 1,\n      pageSize: 10,\n      total: 0,\n  });\n  const [open, setOpen] = useState(false);\n\n  // useEffect(() => {\n  //   console.log(trackedEntityType)\n  // }, [])\n\n  const handleCloseResult = (option) => {\n    setOpen(false);\n    setData([]);\n    setPager({\n      current: 1,\n      pageSize: 10,\n      total: 0,\n    });\n    // if (option === 1) {\n    //   setProgram(undefined);\n    //   setFilters([]);\n    //   onClose();\n    // }\n  };\n\n  const handleChangeCurrentPage = async (page) => {\n    const teis = option === \"program\" ? await dataApi.searchTei(\n      programMetadata.id,\n      filters,\n      pager.pageSize,\n      page\n    )\n    : await dataApi.searchTeiByTet(\n      trackedEntityType.id,\n      filters,\n      pager.pageSize,\n      page\n    );\n    setData({\n      trackedEntityInstances: teis.trackedEntityInstances\n    });\n    setPager({\n      ...pager,\n      current: page,\n      total: teis.pager.total\n    });\n\n    setOpen(true);\n  }\n\n  return (\n    <div className=\"search-wrapper\">\n      {/* <SeartResult\n        open={open}\n        data={data}\n        metadata={option === \"program\" ? programMetadata : trackedEntityType}\n        pager={pager}\n        handleCancel={handleCloseResult}\n        handleChangePage={handleChangeCurrentPage}\n      /> */}\n      <div className=\"search-container\">\n        <div className=\"search-content-container\">\n          <div className=\"search-fulform-container\">\n            <div className=\"search-fulform\">\n              <Card>\n                {/* <Divider orientation=\"left\">Search for</Divider> */}\n                <InputField \n                  label={\"Search for\"}\n                  valueSet={[\n                    {\n                      value: \"program\",\n                      label: `${trackedEntityType.displayName} in program`\n                    },\n                    {\n                      value: \"person\",\n                      label: trackedEntityType.displayName\n                    }\n                  ]}\n                  change={ selected => {\n                    setFilters([]);\n                    setOption(selected);\n                  }}\n                  value={option}\n                />\n                {option === \"program\" && <div style={{ padding: \"5px\" }}>\n                  <Collapse accordion onChange={() => { setFilters([]); }}>\n                    { \n                      programMetadata.trackedEntityAttributes\n                      .filter(({ unique }) => unique)\n                      .map((tea) => \n                      <Panel header={`Search ${tea.displayFormName}`}>\n                        <InputField \n                          label={tea.displayFormName}\n                          valueType={tea.valueType}\n                          style={{ width: \"260px\", textAlign: \"left\" }}\n                          valueSet={tea.valueSet}\n                          change={value => {\n                            if (filters.find(({attribute}) => attribute === tea.id)) {\n                              setFilters(\n                                filters.map( f => ({\n                                  attribute: f.attribute,\n                                  value: f.attribute === tea.id ? value : f.value\n                                }))\n                              )\n                            }\n                            else {\n                              setFilters([\n                                ...filters,\n                                ...[{\n                                  attribute: tea.id,\n                                  value: value\n                                }]\n                              ])\n                            }\n                          }}\n                          value={filters.length === 0 ? \"\" : filters.find(({attribute}) => attribute === tea.id)?.value ?? \"\"}\n                        />\n                        <Button\n                          style={{\n                            margin: \"5px\"\n                          }}\n                          onClick={async () => {\n                            const teis = await dataApi.searchTei(\n                                programMetadata.id,\n                                filters,\n                                pager.pageSize,\n                                pager.current\n                            );\n                            setData({\n                                trackedEntityInstances: teis.trackedEntityInstances\n                            });\n                            setPager({\n                                ...pager,\n                                total: teis.pager.total\n                            });\n                            setOpen(true);\n                          }}\n                        >Search by {tea.displayFormName}</Button>\n                      </Panel>)\n                    }\n                    <Panel header=\"Search by attributes\">\n                      {\n                        programMetadata.trackedEntityAttributes\n                        .filter(({ searchable, unique }) => searchable && !unique)\n                        .map((tea) => <InputField \n                          label={tea.displayFormName}\n                          valueType={tea.valueType}\n                          style={{ width: \"260px\", textAlign: \"left\" }}\n                          valueSet={tea.valueSet}\n                          change={value => {\n                            if (filters.find(({attribute}) => attribute === tea.id)) {\n                              setFilters(\n                                filters.map( f => ({\n                                  attribute: f.attribute,\n                                  value: f.attribute === tea.id ? value : f.value\n                                }))\n                              )\n                            }\n                            else {\n                              setFilters([\n                                ...filters,\n                                ...[{\n                                  attribute: tea.id,\n                                  value: value\n                                }]\n                              ])\n                            }\n                          }}\n                          value={filters.length === 0 ? \"\" : filters.find(({attribute}) => attribute === tea.id)?.value ?? \"\"}\n                        />)\n                      }\n                      <Button\n                        style={{\n                          margin: \"10px 5px 5px 5px\"\n                        }}\n                        onClick={async () => {\n                          const teis = await dataApi.searchTei(\n                              programMetadata.id,\n                              filters,\n                              pager.pageSize,\n                              pager.current\n                          );\n                          setData({\n                              trackedEntityInstances: teis.trackedEntityInstances\n                          });\n                          setPager({\n                              ...pager,\n                              total: teis.pager.total\n                          });\n                          setOpen(true);\n                        }}\n                      >Search by attributes</Button>\n                    </Panel>\n                  </Collapse>\n                </div>}\n                {option === \"person\" && <div style={{ padding: \"5px\" }}>\n                  <Collapse accordion onChange={() => { setFilters([]); }}>\n                  { \n                    trackedEntityType.trackedEntityAttributes\n                      .filter(({ unique }) => unique)\n                      .map((tea) => \n                      <Panel header={`Search ${tea.displayFormName}`}>\n                        <InputField \n                          label={tea.displayFormName}\n                          valueType={tea.valueType}\n                          style={{ width: \"260px\", textAlign: \"left\" }}\n                          valueSet={tea.valueSet}\n                          change={value => {\n                            if (filters.find(({attribute}) => attribute === tea.id)) {\n                              setFilters(\n                                filters.map( f => ({\n                                  attribute: f.attribute,\n                                  value: f.attribute === tea.id ? value : f.value\n                                }))\n                              )\n                            }\n                            else {\n                              setFilters([\n                                ...filters,\n                                ...[{\n                                  attribute: tea.id,\n                                  value: value\n                                }]\n                              ])\n                            }\n                          }}\n                          value={filters.length === 0 ? \"\" : filters.find(({attribute}) => attribute === tea.id)?.value ?? \"\"}\n                        />\n                        <Button\n                          style={{\n                            margin: \"5px\"\n                          }}\n                          onClick={async () => {\n                            const teis = await dataApi.searchTeiByTet(\n                                trackedEntityType.id,\n                                filters,\n                                pager.pageSize,\n                                pager.current\n                            );\n                            setData({\n                                trackedEntityInstances: teis.trackedEntityInstances\n                            });\n                            setPager({\n                                ...pager,\n                                total: teis.pager.total\n                            });\n                            setOpen(true);\n                          }}\n                        >Search by {tea.displayFormName}</Button>\n                      </Panel>)\n                    }\n                    <Panel header=\"Search by attributes\">\n                      {\n                        trackedEntityType.trackedEntityAttributes\n                        .filter(({ searchable, unique }) => searchable && !unique)\n                        .map((tea) => <InputField \n                          label={tea.displayFormName}\n                          valueType={tea.valueType}\n                          style={{ width: \"260px\", textAlign: \"left\" }}\n                          valueSet={tea.valueSet}\n                          change={value => {\n                            if (filters.find(({attribute}) => attribute === tea.id)) {\n                              setFilters(\n                                filters.map( f => ({\n                                  attribute: f.attribute,\n                                  value: f.attribute === tea.id ? value : f.value\n                                }))\n                              )\n                            }\n                            else {\n                              setFilters([\n                                ...filters,\n                                ...[{\n                                  attribute: tea.id,\n                                  value: value\n                                }]\n                              ])\n                            }\n                          }}\n                          value={filters.length === 0 ? \"\" : filters.find(({attribute}) => attribute === tea.id)?.value ?? \"\"}\n                        />)\n                      }\n                      <Button\n                        style={{\n                          margin: \"10px 5px 5px 5px\"\n                        }}\n                        onClick={async () => {\n                          const teis = await dataApi.searchTeiByTet(\n                              trackedEntityType.id,\n                              filters,\n                              pager.pageSize,\n                              pager.current\n                          );\n                          setData({\n                              trackedEntityInstances: teis.trackedEntityInstances\n                          });\n                          setPager({\n                              ...pager,\n                              total: teis.pager.total\n                          });\n                          setOpen(true);\n                        }}\n                      >Search by attributes</Button>\n                    </Panel>\n                  </Collapse>\n                </div>}\n                {\n                  open && <div style={{ padding: \"10px 5px 5px 5px\" }}><Table \n                    size={\"small\"}\n                    pagination={{\n                      ...pager,\n                      showSizeChanger: false\n                    }}\n                    onChange={(newPagination, filters, sorter) => {\n                      handleChangeCurrentPage(newPagination.current);\n                    }}\n                    columns={option === \"program\" ? [\n                      ...[{\n                        title: \"Registering Unit\",\n                        dataIndex: \"ou\",\n                        key: \"ou\"\n                      }, {\n                        title: \"Registration Date\",\n                        dataIndex: \"enrollDate\",\n                        key: \"enrollDate\"\n                      }],\n                      ...programMetadata.trackedEntityAttributes\n                      .filter( ({displayInList}) => displayInList )\n                      .map( (trackedEntityAttribute) => ({\n                        title: trackedEntityAttribute.displayFormName,\n                        dataIndex: trackedEntityAttribute.id,\n                        key: trackedEntityAttribute.id\n                      })),\n                      ...[{\n                        title: \"\",\n                        dataIndex: \"action\",\n                        key: \"action\"\n                      }]\n                    ] : [\n                      ...[{\n                        title: \"Program\",\n                        dataIndex: \"program\",\n                        key: \"program\"\n                      }, {\n                        title: \"Registering Unit\",\n                        dataIndex: \"ou\",\n                        key: \"ou\"\n                      }, {\n                        title: \"Registration Date\",\n                        dataIndex: \"enrollDate\",\n                        key: \"enrollDate\"\n                      }],\n                      ...trackedEntityType.trackedEntityAttributes\n                      .filter( ({displayInList}) => displayInList )\n                      .map( (trackedEntityAttribute) => ({\n                        title: trackedEntityAttribute.displayFormName,\n                        dataIndex: trackedEntityAttribute.id,\n                        key: trackedEntityAttribute.id\n                      })),\n                      ...[{\n                        title: \"\",\n                        dataIndex: \"action\",\n                        key: \"action\"\n                      }]\n                    ]}\n                    dataSource={option === \"program\" ? \n                      data.trackedEntityInstances.map( ({attributes,trackedEntityInstance, enrollments}, index) => \n                        ({\n                          ...programMetadata.trackedEntityAttributes\n                          .filter( ({displayInList}) => displayInList )\n                          .map( (trackedEntityAttribute) => ({\n                              id: trackedEntityAttribute.id,\n                              value: attributes.find( ({attribute}) => attribute === trackedEntityAttribute.id ) ? attributes.find( ({attribute}) => attribute === trackedEntityAttribute.id ).value : \"\"\n                          }) )\n                          .reduce( (pre, cur) => ({\n                              ...pre,\n                              [cur.id]: cur.value\n                          }) , { \n                              key: index, \n                              teiId: trackedEntityInstance,\n                              ou: enrollments.find( ({program}) => program === programMetadata.id )?.orgUnitName,\n                              enrollDate: enrollments.find( ({program}) => program === programMetadata.id )?.enrollmentDate.substring(0,10)\n                          }),\n                          action: (userRoles.data || userRoles.admin) && <Button\n                            onClick={async() => {\n                              const result = await dataApi.getTrackedEntityInstanceById(\n                                trackedEntityInstance,\n                                programMetadata.id\n                              );\n\n                              // Close search\n                              handleCloseResult();\n                              setFilters([]);\n                              setOption(\"program\");\n\n                              initData(result, programMetadata);\n                              // if (result.enrollments.find( ({program}) => program === programMetadata.id )) {\n                              //   initData(result, programMetadata);\n                              // }\n                              // else {\n                              //   initNewEnrollment(selectedOrgUnit, result, programMetadata);\n                              // }\n                              changeRoute(\"form\");\n                            }}\n                          >View</Button>\n                        })\n                      ) : \n                      data.trackedEntityInstances.map( ({attributes,trackedEntityInstance, enrollments}, index) => \n                        ({\n                          ...trackedEntityType.trackedEntityAttributes\n                          .filter( ({displayInList}) => displayInList )\n                          .map( (trackedEntityAttribute) => ({\n                              id: trackedEntityAttribute.id,\n                              value: attributes.find( ({attribute}) => attribute === trackedEntityAttribute.id ) ? attributes.find( ({attribute}) => attribute === trackedEntityAttribute.id ).value : \"\"\n                          }) )\n                          .reduce( (pre, cur) => ({\n                              ...pre,\n                              [cur.id]: cur.value\n                          }) , { \n                              key: index, \n                              teiId: trackedEntityInstance,\n                              program: enrollments.filter(({status}) => status !== \"CANCELLED\").map( ({program}) => programs.find(({id}) => id === program).name ).join(\" | \"),\n                              ou: enrollments.filter(({status}) => status !== \"CANCELLED\").map( ({orgUnitName}) => orgUnitName ).join(\" | \"),\n                              enrollDate: enrollments.filter(({status}) => status !== \"CANCELLED\").map( ({enrollmentDate}) => enrollmentDate.substring(0,10) ).join(\" | \")\n                          }),\n                          action: (userRoles.view && !userRoles.admin && !userRoles.data) ? <></> : enrollments.find(({program, status}) => program === programMetadata.id && status !== \"CANCELLED\") ? <Button\n                            onClick={async() => {\n                              const result = await dataApi.getTrackedEntityInstanceById(\n                                trackedEntityInstance,\n                                programMetadata.id\n                              );\n\n                              // Close search\n                              handleCloseResult();\n                              setFilters([]);\n                              setOption(\"program\");\n\n                              initData(result, programMetadata);\n                              changeRoute(\"form\");\n                            }}\n                          >View</Button>\n                          : <Button\n                            onClick={async() => {\n                              if (selectedOrgUnit) {\n                                const result = await dataApi.getTrackedEntityInstanceById(\n                                  trackedEntityInstance,\n                                  programMetadata.id\n                                );\n  \n                                // Close search\n                                handleCloseResult();\n                                setFilters([]);\n                                setOption(\"program\");\n  \n                                initNewEnrollment(selectedOrgUnit, result, programMetadata);\n                                changeRoute(\"form\");\n                              }\n                              else {\n                                message.error(\"Please select an Otganisation Unit for enrollment.\")\n                              }\n                            }}\n                          >Enroll</Button>\n                        })\n                      )}\n                  /></div>\n                }\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    programMetadata: state.metadata.programMetadata,\n    trackedEntityType: state.metadata.trackedEntityType,\n    programs: state.metadata.programs,\n    selectedOrgUnit: state.metadata.selectedOrgUnit,\n    userRoles: state.user.userRoles\n  };\n};\n\nconst mapDispatchToProps = {\n  initNewEnrollment,\n  changeRoute,\n  initData,\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(SearchForm);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Form/index.js",["476","477"],"import \"./index.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faNotesMedical,\n  faUserEdit,\n  faAngleDoubleUp,\n  faAngleDoubleDown\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { Button, message } from 'antd';\nimport { DoubleLeftOutlined, DoubleRightOutlined } from '@ant-design/icons';\nimport { Backdrop, CircularProgress } from '@mui/material';\n\nimport { connect } from \"react-redux\";\nimport { useState, useEffect } from \"react\";\n\nimport DeathCertificate from \"./DeathCertificate\";\nimport Profile from \"./Profile\";\nimport Stage from \"./Stage\";\nimport Result from \"./Result\";\n\nimport WarningDialog from \"./WarningDialog\";\nimport DeleteDialog from \"./DeleteDialog\";\n\nimport { changeRoute } from \"../../redux/actions/route\";\nimport {\n  mutateTei,\n  mutateAttribute,\n  mutateEnrollment,\n  mutateEvent,\n} from \"../../redux/actions/data\";\n\nimport { Hooks } from \"tracker-capture-app-core\";\nimport { generateDhis2Payload } from \"../../utils\";\nimport { useTranslation } from \"react-i18next\";\n\n\nconst { useApi } = Hooks;\nconst ButtonGroup = Button.Group;\n\nconst Form = ({ \n  changeRoute,\n  mutateTei,\n  mutateAttribute,\n  mutateEnrollment,\n  mutateEvent,\n  data,\n  metadata,\n  userRoles,\n}) => {\n  const { t } = useTranslation();\n  const { dataApi } = useApi();\n\n  const [ sideBar, setSideBar ] = useState(true);\n  const [ profileSection, setProfileSection ] = useState(true); \n  const [ resultSection, setResultSection ] = useState(true); \n\n  const [loading,setLoading]=useState(false);\n  const [exitWarning,setExitWarning]=useState(false);\n  const [deleteWarning,setDeleteWarning]=useState(false);\n\n  const { currentTei, currentEnrollment, currentEvents } = data;\n  const { programMetadata, formMapping } = metadata;\n\n  const [openCertificate, setOpenCertificate] = useState(false);\n  const [certificate, setCertificate] = useState(false);\n\n  // const [doris, setDoris] = useState(false);\n\n  useEffect(() => {\n    setCertificate (\n      currentEvents[0] &&\n      currentEvents[0].dataValues &&\n      currentEvents[0].dataValues[formMapping.dataElements[\"underlyingCOD\"]]\n    );\n    console.log(data)\n  }, [data]);\n\n  return (\n    <div className=\"form-wrapper\">\n      <Backdrop\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={loading}\n      >\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n      <WarningDialog \n        open={exitWarning}\n        handleCancel={() => {\n          setExitWarning(false);\n        }}\n        handleOk={() => {\n          mutateTei(\"isDirty\", false);\n          mutateEnrollment(\"isDirty\", false);\n          mutateEvent(currentEvents[0].event, \"isDirty\", false);\n          changeRoute(\"list\");\n        }}\n      ></WarningDialog>\n      <DeleteDialog \n        open={deleteWarning}\n        handleCancel={() => {\n          setDeleteWarning(false);\n        }}\n        handleDeleteEnrollment={async () => {\n          await dataApi.push(\n            `/api/enrollments/${currentEnrollment.enrollment}`,\n            {},\n            \"DELETE\"\n          );\n          changeRoute(\"list\");\n        }}\n        handleDeleteTEI={async () => {\n          await dataApi.push(\n            `/api/trackedEntityInstances/${currentEnrollment.trackedEntityInstance}`,\n            {},\n            \"DELETE\"\n          );\n          changeRoute(\"list\");\n        }}\n      ></DeleteDialog>\n      <div className=\"form-container\">\n        <DeathCertificate\n          open={openCertificate}\n          onCancel={() => {\n            setOpenCertificate(false);\n          }}\n          onLoading={() => {\n            setLoading(false);\n          }}\n        />\n        <div className={sideBar ? \"profile-section-container\" : \"profile-section-container-hidden\"}>\n          <div className=\"section-title-profile-container\">\n            <div className=\"section-title-profile\">\n              <FontAwesomeIcon icon={faUserEdit} style={{ fontSize: 15 }} />\n              &nbsp; \n              {t(\"profile\")}\n            </div>\n            <ButtonGroup\n              style={{\n                float: \"right\",\n              }}\n            >\n              <Button \n                type=\"text\" \n                style={{ \n                  color: \"#ffffff\", \n                  width: \"300px\",\n                  fontSize: \"15px\", \n                  fontWeight: \"bold\",\n                  lineHeight: \"5px\",\n                  textAlign: \"right\",\n                  padding: \"0px 5px\"\n                }}\n                icon={<FontAwesomeIcon icon={profileSection ? faAngleDoubleUp : faAngleDoubleDown} style={{ fontSize: 15 }} />}\n                onClick={() => {setProfileSection(!profileSection)}}\n              />\n            </ButtonGroup>\n          </div>\n          <div className={profileSection ? \"profile-section\" : \"profile-section-hidden\"}>\n            <div className=\"profile-content\">\n              <Profile />\n            </div>\n            <div className=\"profile-button\">\n              <ButtonGroup\n                style={{\n                  float: \"right\",\n                  padding: \"1.5px\",\n                }}\n              >\n                {currentTei.isNew ? <Button\n                  type=\"primary\" \n                  style={{\n                    width: \"110px\",\n                    marginLeft: \"3px\"\n                  }}\n\n                  onClick={async () => {\n                    if ( \n                      programMetadata.trackedEntityAttributes.filter( ({compulsory}) => compulsory )\n                      .every( ({id}) => currentTei.attributes[id] && currentTei.attributes[id] !== \"\" )\n                      && currentEnrollment['enrollmentDate'] && currentEnrollment.enrollmentDate !== \"\"\n                      && currentEnrollment['incidentDate'] && currentEnrollment['incidentDate'] !== \"\"\n                    ) {\n                      setLoading(true);\n                      const { currentTei, currentEnrollment, currentEvents } = generateDhis2Payload(\n                        data,\n                        programMetadata\n                      );\n                      await dataApi.pushTrackedEntityInstance(\n                        currentTei,\n                        programMetadata.id\n                      );\n                      await dataApi.pushEnrollment(\n                        currentEnrollment,\n                        programMetadata.id\n                      );\n                      await dataApi.pushTrackedEntityInstance(\n                        currentTei,\n                        programMetadata.id\n                      );\n                      mutateTei(\"isSaved\", true);\n                      mutateTei(\"isNew\", false);\n\n                      // Dirty Check\n                      mutateTei(\"isDirty\", false);\n                      mutateEnrollment(\"isDirty\", false);\n\n\n                      // Notification\n                      setLoading(false);\n                      message.success(\"Profile is saved successfully!\")\n                    }\n                    else {\n                      message.error(\"All complusory fields must be fill!\")\n                    }\n                  }}\n                >\n                  Create\n                </Button> : userRoles.admin ? <Button\n                  type=\"primary\" \n                  danger\n                  style={{\n                    width: \"110px\"\n                  }}\n                  disabled={currentTei.isNew && !currentTei.isSaved}\n                  onClick={() => {\n                    setDeleteWarning(true);\n                  }}\n                >\n                  Delete\n                </Button> : <></>}\n              </ButtonGroup>\n            </div>\n          </div>\n\n          <div className=\"section-title-result-container\">\n            <div className=\"section-title-result\">\n              <FontAwesomeIcon icon={faNotesMedical} style={{ fontSize: 15 }} />\n              &nbsp; Output\n            </div>\n            <ButtonGroup\n              style={{\n                float: \"right\",\n              }}\n            >\n              <Button \n                type=\"text\" \n                style={{ \n                  color: \"#ffffff\", \n                  width: \"300px\",\n                  fontSize: \"15px\", \n                  fontWeight: \"bold\",\n                  lineHeight: \"5px\",\n                  textAlign: \"right\",\n                  padding: \"0px 5px\"\n                }}\n                icon={<FontAwesomeIcon icon={resultSection ? faAngleDoubleUp : faAngleDoubleDown} style={{ fontSize: 15 }} />}\n                onClick={() => {setResultSection(!resultSection)}}\n              />\n            </ButtonGroup>\n          </div>\n          <div className={ resultSection ? \"result-section\" : \"result-section-hidden\"}>\n            <div className=\"result-content\">\n              <Result />\n            </div>\n            {/* <div className=\"result-button\">\n              <ButtonGroup\n                style={{\n                  float: \"right\",\n                  padding: \"1.5px\",\n                }}\n              >\n                <Button\n                  type=\"primary\" \n                  style={{\n                    width: \"110px\",\n                  }}\n                  disabled={!certificate}\n                  onClick={() => { setOpenCertificate(true); }}\n                >\n                  Certificate\n                </Button>\n              </ButtonGroup>\n            </div> */}\n          </div>\n        </div>\n        <div className={sideBar ? \"stage-section-container\" : \"stage-section-container-fullscreen\"}>\n          <div className=\"stage-button\">\n            <ButtonGroup\n              style={{\n                // float: \"right\",\n                padding: \"1.5px\",\n              }}\n            >\n              <Button\n                style={{\n                  width: \"110px\"\n                }}\n                disabled={currentTei.isNew}\n                icon={sideBar ? <DoubleLeftOutlined /> : <DoubleRightOutlined />}\n                onClick={() => {setSideBar(!sideBar)}}\n              >\n                {sideBar ? \"Collapse\" : \"Expand\"}\n              </Button>\n              <Button\n                type=\"primary\" \n                style={{\n                  width: \"110px\",\n                  marginLeft: \"3px\",\n                }}\n                disabled={!certificate}\n                onClick={() => { \n                  setOpenCertificate(true);\n                  setLoading(true);\n                }}\n              >\n                Certificate\n              </Button>\n            </ButtonGroup>\n            <ButtonGroup\n                style={{\n                  float: \"right\",\n                  padding: \"1.5px\",\n                }}\n              >\n              <Button\n                style={{\n                  width: \"110px\"\n                }}\n                onClick={async () => {\n                  setLoading(true);\n                  const { currentEvents } = generateDhis2Payload(data, programMetadata);\n                  mutateEvent(currentEvents[0].event,\"dataValues\",{});\n                  setLoading(false);\n                }}\n                disabled={currentTei.isNew}\n              >\n                Clear\n              </Button>\n              {\n                  currentEnrollment.status === \"COMPLETED\" ? <Button\n                    style={{\n                      width: \"110px\",\n                      marginLeft: \"3px\",\n                      backgroundColor: \"#f0ad4e\",\n                      color: \"white\"\n                    }}\n                    onClick={async () => {\n                      setLoading(true);\n\n                      mutateEnrollment(\"status\", \"ACTIVE\");\n                      mutateAttribute(formMapping.attributes[\"status\"], \"Pending\");\n\n                      const { currentTei, currentEnrollment } = generateDhis2Payload(\n                        data,\n                        programMetadata\n                      );\n                      await dataApi.pushEnrollment(\n                        currentEnrollment,\n                        programMetadata.id\n                      );\n                      await dataApi.pushTrackedEntityInstance(\n                        currentTei,\n                        programMetadata.id\n                      );\n                      mutateTei(\"isSaved\", true);\n\n                      // Dirty Check\n                      mutateTei(\"isDirty\", false);\n                      mutateEnrollment(\"isDirty\", false);\n                      \n                      setLoading(false);\n                    }}\n                  >\n                    Reopen\n                  </Button>\n                  :\n                  <Button\n                    style={currentTei.isNew ? {\n                      width: \"110px\",\n                      marginLeft: \"3px\"\n                    } : {\n                      width: \"110px\",\n                      marginLeft: \"3px\",\n                      backgroundColor: \"#f0ad4e\",\n                      color: \"white\"\n                    }}\n                    disabled={currentTei.isNew}\n                    onClick={async () => {\n                      if (\n                        currentEvents[0] &&\n                        currentEvents[0].dataValues &&\n                        currentEvents[0].dataValues[formMapping.dataElements[\"underlyingCOD_processed_by\"]] &&\n                        currentEvents[0].dataValues[formMapping.dataElements[\"underlyingCOD_processed_by\"]] === \"Manual\" &&\n                        (( \n                          currentEvents[0].dataValues[formMapping.dataElements[\"reason_of_manual_COD_selection\"]] && \n                          currentEvents[0].dataValues[formMapping.dataElements[\"reason_of_manual_COD_selection\"]] === \"\" \n                        ) || !currentEvents[0].dataValues[formMapping.dataElements[\"reason_of_manual_COD_selection\"]])\n                      ) {\n                        message.error(\"ERROR!!! Please select reason of not using the result from DORIS tool\");\n                      }\n                      else {\n                        setLoading(true);\n\n                        mutateEnrollment(\"status\", \"COMPLETED\");\n                        mutateAttribute(formMapping.attributes[\"status\"], \"Completed\");\n\n                        const { currentTei, currentEnrollment, currentEvents } = generateDhis2Payload(\n                          data,\n                          programMetadata\n                        );\n                        await dataApi.pushEnrollment(\n                          currentEnrollment,\n                          programMetadata.id\n                        );\n                        await dataApi.pushTrackedEntityInstance(\n                          currentTei,\n                          programMetadata.id\n                        );\n                        await dataApi.pushEvents({ events: currentEvents });\n                        mutateTei(\"isSaved\", true);\n\n                        // Dirty Check\n                        mutateTei(\"isDirty\", false);\n                        mutateEnrollment(\"isDirty\", false);\n                        mutateEvent(currentEvents[0].event,\"isDirty\",false);\n                        \n                        setLoading(false);\n                      }\n                    }}\n                  >\n                    Complete\n                  </Button>\n                }\n                <Button\n                  type=\"primary\" \n                  style={{\n                    width: \"110px\",\n                    marginLeft: \"3px\"\n                  }}\n                  disabled={currentTei.isNew}\n                  onClick={async () => {\n                    if (\n                      currentEvents[0] &&\n                        currentEvents[0].dataValues &&\n                        currentEvents[0].dataValues[formMapping.dataElements[\"underlyingCOD_processed_by\"]] &&\n                        currentEvents[0].dataValues[formMapping.dataElements[\"underlyingCOD_processed_by\"]] === \"Manual\" &&\n                        (( \n                          currentEvents[0].dataValues[formMapping.dataElements[\"reason_of_manual_COD_selection\"]] && \n                          currentEvents[0].dataValues[formMapping.dataElements[\"reason_of_manual_COD_selection\"]] === \"\" \n                        ) || !currentEvents[0].dataValues[formMapping.dataElements[\"reason_of_manual_COD_selection\"]])\n                    ) {\n                      message.error(\"ERROR!!! Please select reason of not using the result from DORIS tool\");\n                    }\n                    else {\n                      setLoading(true);\n                      const { currentTei, currentEnrollment, currentEvents } = generateDhis2Payload(\n                        data,\n                        programMetadata\n                      );\n                      await dataApi.pushTrackedEntityInstance(\n                        currentTei,\n                        programMetadata.id\n                      );\n                      await dataApi.pushEnrollment(\n                        currentEnrollment,\n                        programMetadata.id\n                      );\n                      await dataApi.pushTrackedEntityInstance(\n                        currentTei,\n                        programMetadata.id\n                      );\n                      await dataApi.pushEvents({ events: currentEvents });\n                      mutateTei(\"isSaved\", true);\n      \n                      // Dirty Check\n                      mutateTei(\"isDirty\", false);\n                      mutateEnrollment(\"isDirty\", false);\n                      mutateEvent(currentEvents[0].event,\"isDirty\",false);\n      \n                      // Notification\n                      setLoading(false);\n                      message.success(\"Saved Successfully!\");\n                    }\n                  }}\n                >\n                  Save\n                </Button>\n                <Button\n                  type=\"danger\"\n                  style={{\n                    width: \"110px\",\n                    marginLeft: \"3px\"\n                  }}\n                  onClick={() => {\n                    if ( currentTei.isDirty || currentEnrollment.isDirty || currentEvents[0].isDirty ) {\n                      setExitWarning(true);\n                    }\n                    else {\n                      changeRoute(\"list\");\n                    }\n                  }}\n                >\n                  Close\n                </Button>\n              </ButtonGroup>\n          </div>\n          <div className=\"stage-sections-container\">\n            <div className=\"stage-section\">\n              { !currentTei.isNew ? <Stage /> : currentTei.isSaved ? <Stage />: <></> }\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    metadata: state.metadata,\n    data: state.data,\n    userRoles: state.user.userRoles,\n  };\n};\n\nconst mapDispatchToProps = {\n  changeRoute,\n  mutateTei,\n  mutateAttribute,\n  mutateEnrollment,\n  mutateEvent,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Export/index.js",["478","479","480"],"import moment from \"moment\";\n/* REDUX */\nimport { connect } from \"react-redux\";\n/*       */\nimport { Button, Col, Row, Select, message, Modal } from \"antd\";\nimport { CaretRightOutlined, FileExcelOutlined } from \"@ant-design/icons\";\nimport \"./index.css\";\nimport { useState, useEffect } from \"react\";\nimport { writeFile } from \"../../utils/excel.utility\";\nimport { Hooks } from \"tracker-capture-app-core\";\nimport Content from \"./Content\";\nimport XLSX from \"xlsx\";\nimport { useTranslation } from \"react-i18next\";\n\nconst { useApi } = Hooks;\n\nconst { Option } = Select;\nconst OPTIONS = [];\nfor (let i = moment().year(); i >= 1970; i--) {\n  OPTIONS.push(<Option key={i}>{i}</Option>);\n}\n\nconst countryCodes = require(\"../../asset/metadata/iso3_code.json\");\n\nconst Export = ({ route, orgUnits }) => {\n  const { t } = useTranslation();\n  const { dataApi } = useApi();\n  const getData = async (year) =>\n    dataApi.pull(\n      `/api/sqlViews/XpI2kVApPIH/data?paging=false&var=year:${year}`\n    );\n  const [periodType, setPeriodType] = useState(\"Yearly\");\n  const [selectedPeriods, selectPeriod] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [data, setData] = useState(null);\n  const [isEnableExport, setIsEnableExport] = useState(false);\n  const [countryCode, setCountryCode] = useState(null);\n  const [countryCodeModal,setCountryCodeModal] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      const countryCodeFromDataStore = await dataApi.pull(\"/api/dataStore/WHO_ICD11_COD/countryCode\");\n      if (countryCodeFromDataStore.status) {\n        const cc = orgUnits.find( ({level}) => level === 1 ) ? orgUnits.find( ({level}) => level === 1 ).code : undefined;\n        const isValid = cc && countryCodes.find(({code}) => code === cc);\n        if ( isValid ) {\n          setCountryCode(isValid);\n          await dataApi.push(\"/api/dataStore/WHO_ICD11_COD/countryCode\", isValid);\n        }\n        else {\n          setCountryCodeModal(true);\n        }\n      }\n      else {\n        setCountryCode(countryCodeFromDataStore);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"export-wrapper\">\n      <div className=\"export-container\">\n        <Row style={{ width: \"100%\", padding: 9 }} gutter={5}>\n          <Col>\n            {/* <Select\n              style={{ width: 200 }}\n              value={periodType}\n              placeholder=\"Select period type\"\n              onChange={setPeriodType}\n            >\n              {OPTIONS.map((option) => (\n                <Option value={option.value}>{option.label}</Option>\n              ))}\n            </Select> */}\n            <Select\n              mode=\"multiple\"\n              allowClear\n              style={{ width: \"500px\" }}\n              placeholder={t(\"pleaseSelectYear\")}\n              onChange={(value) => {\n                selectPeriod(value);\n              }}\n            >\n              {OPTIONS}\n            </Select>\n          </Col>\n          <Col>\n            <Button\n              loading={isRunning}\n              disabled={!selectedPeriods || isRunning}\n              onClick={async () => {\n                setIsRunning(true);\n                setData(null);\n                const data = {};\n                let error = false;\n                for (let i = 0; i < selectedPeriods.length; i++) {\n                  const year = selectedPeriods[i];\n                  data[year] = await getData(year);\n                  if ( data[year].status && data[year].status === \"ERROR\" ) {\n                    error = true;\n                  }\n                }\n                if( error ) {\n                  message.error(\"ERROR!!! Please run analytics before using ANACoD\")\n                }\n                else {\n                  setData(data);\n                  setIsEnableExport(true);\n                }\n                setIsRunning(false);\n              }}\n              type=\"primary\"\n              icon={<CaretRightOutlined />}\n            >\n              {t(\"run\")}\n            </Button>\n          </Col>\n          <Col>\n            <Button\n              type=\"primary\"\n              disabled={!isEnableExport}\n              icon={<FileExcelOutlined />}\n              onClick={() => {\n                var wb = XLSX.utils.book_new();\n                Object.entries(data)\n                  .sort(([a], [b]) => b - a)\n                  .map(\n                    ([\n                      year,\n                      {\n                        listGrid: { rows, headers },\n                      },\n                    ]) => {\n                      const heads = headers.map(({ name }) => name);\n                      const ws = XLSX.utils.json_to_sheet(\n                        rows.map((row) =>\n                          row.reduce((result, cell, index) => {\n                            result[heads[index]] = index === 0 ? countryCode.country : index === 1 ? countryCode.code : cell;\n                            return result;\n                          }, {})\n                        ),\n                        {\n                          header: heads,\n                        }\n                      );\n                      return XLSX.utils.book_append_sheet(wb, ws, year);\n                    }\n                  );\n                writeFile(wb, \"ANACOD.csv\");\n              }}\n            >\n              {t(\"anacodExportExcel\")}\n            </Button>\n          </Col>\n        </Row>\n        { countryCode && <Content loading={isRunning} loaded={!!data} data={data} countryCode={countryCode} /> }\n        <Modal\n          title=\"Select the country code\"\n          visible={countryCodeModal}\n          okText={\"Select\"}\n          onOk={() => {\n            dataApi.push(\"/api/dataStore/WHO_ICD11_COD/countryCode\", countryCode);\n            setCountryCodeModal(false);\n          }}\n          okButtonProps={{\n            disabled: countryCode === null\n          }}\n          cancelButtonProps={{\n            disabled: true\n          }}\n        >\n          <p>Can't find the country code from the root orgUnit or the code is invalid.</p>\n          <p>Please select the country code from the list here. This selection will be stored for next times, and this popup won't show again.</p>\n          <div>\n            <Select \n              showSearch\n              style={{\n                width: \"100%\",\n              }}\n              placeholder=\"Select a country code\"\n              options={countryCodes.map( countryCode => ({\n                value: countryCode.code,\n                label: `${countryCode.code} | ${countryCode.country}`\n              }) )}\n              onChange={(value) => {\n                setCountryCode(countryCodes.find(({code}) => code === value));\n              }}\n              optionFilterProp=\"label\"\n              filterOption={(input, option) =>\n                (option?.label ?? '').toLowerCase().includes(input.toLowerCase())\n              }\n            />\n          </div>\n        </Modal>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    route: state.route,\n    orgUnits: state.metadata.orgUnits\n  };\n};\n\nexport default connect(mapStateToProps)(Export);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/reducers/data.js",["481"],"import {\n  MUTATE_TEI,\n  MUTATE_ATTRIBUTE,\n  MUTATE_ENROLLMENT,\n  MUTATE_EVENT,\n  MUTATE_DATAVALUE,\n  INIT_DATA,\n  INIT_NEW_DATA,\n  INIT_NEW_EVENT,\n  INIT_NEW_ENROLLMENT\n} from \"../actions/data/type\";\nimport {\n  mutateTei,\n  mutateAttribute,\n  mutateEnrollment,\n  mutateEvent,\n  mutateDataValue,\n  initData,\n  initNewData,\n  initNewEvent,\n  initNewEnrollment\n} from \"./data-methods\";\n\nconst initialState = {\n  currentTei: null,\n  currentEnrollment: null,\n  currentEvents: []\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case MUTATE_TEI: {\n      return mutateTei(state, action);\n    }\n    case MUTATE_ATTRIBUTE: {\n      return mutateAttribute(state, action);\n    }\n    case MUTATE_ENROLLMENT: {\n      return mutateEnrollment(state, action);\n    }\n    case MUTATE_EVENT: {\n      return mutateEvent(state, action);\n    }\n    case MUTATE_DATAVALUE: {\n      return mutateDataValue(state, action);\n    }\n    case INIT_NEW_DATA: {\n      return initNewData(state, action);\n    }\n    case INIT_DATA: {\n      return initData(state, action);\n    }\n    case INIT_NEW_EVENT: {\n      return initNewEvent(state, action);\n    }\n    case INIT_NEW_ENROLLMENT: {\n      return initNewEnrollment(state, action);\n    }\n    default:\n      return state;\n  }\n}\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/reducers/route.js",["482"],"import { CHANGE_ROUTE } from \"../actions/route/type\";\n\nconst initialState = null;\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_ROUTE: {\n      return action.payload.route;\n    }\n    default:\n      return state;\n  }\n}\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/reducers/user.js",["483"],"import {\n    SET_USER_ROLES\n} from \"../actions/user/type\";\n\nconst initialState = {\n    userRoles: {\n        admin: false,\n        data: false,\n        view: false\n    }\n};\n\nexport default function ( state = initialState, action ) {\n    switch ( action.type ) {\n        case SET_USER_ROLES: {\n            return {\n                ...state,\n                userRoles: action.payload\n            }\n        }\n        default:\n            return state;\n    }\n}","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/reducers/metadata.js",["484","485"],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/reducers/admin.js",["486"],"import {\n  CHANGE_STEP,\n  CHANGE_INSTALLATION_TYPE,\n  CHANGE_TEAS,\n  CHANGE_DATA_ELEMENTS,\n  CHANGE_ASSIGN_USERS,\n  ASSIGN_ORGUNITS,\n  CHANGE_ICD11_TOOL_URL,\n  CHANGE_CERTIFICATE_TEMPLATE,\n  SET_CERTIFICATE_LOGO,\n  CHANGE_TRACKED_ENTITY_TYPE,\n  SET_FEMALE_SECTION,\n  SET_INSTALLING_FILE,\n  CHANGE_FULLNAMEOPTION,\n  CHANGE_CUSTOM_CERTIFICATE\n} from \"../actions/admin/type\";\n\nconst initialState = {\n  step: 0,\n  type: null,\n  trackedEntityAttributes: [],\n  trackedEntityType: null,\n  femaleOption: null,\n  fullnameOption: \"firstlastname\",\n  dataElements: {\n    // frameA: { \n    //   otherSections: [], \n    //   defaultSections: require(`../../asset/metadata/programStageSections.json`).programStageSections.slice(0,6) \n    // },\n    // frameB: { \n    //   otherSections: [], \n    //   defaultSections: require(`../../asset/metadata/programStageSections.json`).programStageSections.slice(6,10) \n    // },\n    form: { \n      otherSections: [], \n      defaultSections: require(`../../asset/metadata/programStageSections.json`).programStageSections\n    }\n  },\n  users: {\n    admin: [],\n    capture: [],\n    view: []\n  },\n  assignedOrgUnits: [],\n  icd11ToolUrl: {\n    type: \"global\",\n    url: \"https://id.who.int/icd/\"\n  },\n  certificateTemplate: null,\n  customCertificate: null,\n  installingFile: null\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_STEP: {\n      return { ...state, step: action.payload.step };\n    }\n    case CHANGE_INSTALLATION_TYPE: {\n      return { ...state, type: action.payload.type };\n    }\n    case CHANGE_TEAS: {\n      return {\n        ...state,\n        trackedEntityAttributes: action.payload.trackedEntityAttributes\n      };\n    }\n    case CHANGE_DATA_ELEMENTS: {\n      return {\n        ...state,\n        dataElements: {\n          ...state.dataElements,\n          [action.payload.frame]: {\n            ...state.dataElements[action.payload.frame],\n            ...action.payload.section\n          }\n        }\n      };\n    }\n\n    case CHANGE_ASSIGN_USERS: {\n      return {\n        ...state,\n        users: {\n          ...state.users,\n          [action.payload.group]: action.payload.users\n        }\n      };\n    }\n\n    case ASSIGN_ORGUNITS: {\n      return { ...state, assignedOrgUnits: action.payload.orgUnits };\n    }\n    case CHANGE_ICD11_TOOL_URL: {\n      if (action.payload.type !== undefined) {\n        return {\n          ...state,\n          icd11ToolUrl: {\n            ...state.icd11ToolUrl,\n            url: action.payload.url,\n            type: action.payload.type\n          }\n        };\n      } else {\n        return {\n          ...state,\n          icd11ToolUrl: {\n            ...state.icd11ToolUrl,\n            url: action.payload.url\n          }\n        };\n      }\n    }\n\n    case CHANGE_CERTIFICATE_TEMPLATE: {\n      return {\n        ...state,\n        certificateTemplate: action.payload.certificateTemplate\n      }\n    }\n\n    case SET_CERTIFICATE_LOGO: {\n      return {\n        ...state,\n        certificateTemplate: {\n          ...state.certificateTemplate,\n          logo: action.payload.image.image\n        }\n      }\n    }\n\n    case CHANGE_CUSTOM_CERTIFICATE: {\n      return {\n        ...state,\n        customCertificate: action.payload.customCertificate\n      }\n    }\n\n    case CHANGE_TRACKED_ENTITY_TYPE: {\n      return {\n        ...state,\n        trackedEntityType: action.payload.trackedEntityType\n      }\n    }\n\n    case SET_FEMALE_SECTION: {\n      return {\n        ...state,\n        femaleOption: action.payload\n      }\n    }\n\n    case CHANGE_FULLNAMEOPTION: {\n      return {\n        ...state,\n        fullnameOption: action.payload\n      }\n    }\n\n    case SET_INSTALLING_FILE: {\n      return {\n        ...state,\n        installingFile: action.payload.installingFile\n      }\n    }\n\n    default:\n      return state;\n  }\n}\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/route/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/metadata/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/admin/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/user/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/ControlBar/index.js",["487","488"],"import { useState, useEffect } from \"react\";\n\nimport { Popover, Input } from \"antd\";\nimport {\n  Button,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  IconButton,\n  Divider,\n  Slide,\n} from \"@mui/material\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCircleQuestion,\n  faCircleInfo,\n  faClose,\n  faArrowLeft,\n} from \"@fortawesome/free-solid-svg-icons\";\n// import Registration from \"../Registration\";\nimport { Components } from \"tracker-capture-app-core\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./index.css\";\n\n/* REDUX */\nimport { connect } from \"react-redux\";\nimport { setSelectedOrgUnit } from \"../../redux/actions/metadata\";\nimport {\n  initNewData,\n  mutateTei,\n  mutateEnrollment,\n  mutateEvent,\n} from \"../../redux/actions/data\";\nimport { changeRoute } from \"../../redux/actions/route\";\n\nimport WarningDialog from \"../Form/WarningDialog\";\n\n/*       */\nconst { OrgUnitSelector } = Components;\n// const { Option } = Select;\n\nconst ControlBar = ({\n  metadata,\n  setSelectedOrgUnit,\n  changeRoute,\n  initNewData,\n  mutateTei,\n  mutateEnrollment,\n  mutateEvent,\n  route,\n  userRoles,\n  currentEventId,\n  isDirty,\n}) => {\n  const [routeText, setRouteText] = useState(\"\");\n\n  const { selectedOrgUnit, programMetadata, orgUnits } = metadata;\n  const { t } = useTranslation();\n\n  const [about, setAbout] = useState(false);\n  const [help, setHelp] = useState(false);\n  // const [registration, setRegistration] = useState(false);\n  const [doc, setDoc] = useState(null);\n  const [exitWarning, setExitWarning] = useState(false);\n  const [searchOU, setSearchOU] = useState(\"\");\n  const [filterOU, setFiterOU] = useState([]);\n\n  useEffect(() => {\n    // if (orgUnits && searchOU.length > 3) {\n    const timeoutId = setTimeout(() => {\n      if (orgUnits && searchOU) {\n        setFiterOU(\n          orgUnits\n            .filter(({ displayName }) =>\n              displayName.toLowerCase().includes(searchOU.toLocaleLowerCase())\n            )\n            .map(({ path }) => path)\n        );\n      }\n      if (!searchOU) {\n        setFiterOU([]);\n      }\n    }, 1000);\n    return () => clearTimeout(timeoutId);\n  }, [searchOU]);\n\n  return (\n    <div className=\"control-bar-container\">\n      <Popover\n        trigger=\"click\"\n        content={\n          <>\n            <Input\n              placeholder=\"Search\"\n              value={searchOU}\n              onChange={(e) => {\n                setSearchOU(e.target.value);\n              }}\n            />\n            <div className=\"orgunit-selector-container\">\n              {orgUnits && orgUnits.length > 0 && (\n                <OrgUnitSelector\n                  selectedOrgUnit={selectedOrgUnit}\n                  handleSelectOrgUnit={(orgUnit) => {\n                    setSelectedOrgUnit(orgUnit);\n                    if (route !== \"search\") {\n                      if (isDirty) {\n                        setRouteText(\"list\");\n                        setExitWarning(true);\n                      } else {\n                        changeRoute(\"list\");\n                      }\n                    }\n                  }}\n                  // filter={searchOU === \"\" ? [] : filterOU}\n                  // filter={orgUnits ? orgUnits.map( ({path}) => path ) : []}\n                  filter={searchOU === \"\" ? [] : filterOU}\n                  // filter={[\"/jjKIShO8MjG\",\"/jjKIShO8MjG/zj9LoeErgkP\"]}\n                />\n              )}\n            </div>\n          </>\n        }\n        // onVisibleChange={(visible) => {\n        //   console.log(visible);\n        // }}\n      >\n        <div className=\"button-container\">\n          <Button variant=\"outlined\" disabled={!programMetadata}>\n            {selectedOrgUnit ? (\n              <>\n                {t(\"orgUnit\")}: <b>{selectedOrgUnit.displayName} </b>\n              </>\n            ) : (\n              t(\"selectOrgUnit\")\n            )}\n          </Button>\n        </div>\n      </Popover>\n      <div className=\"button-container\">\n        <Button\n          variant=\"contained\"\n          // disabled={\n          //   (userRoles.view && !userRoles.admin && !userRoles.data) || (!selectedOrgUnit ||\n          //     !programMetadata.organisationUnits.find(\n          //       (ou) => ou.id === selectedOrgUnit.id\n          //     ))\n          // }\n          onClick={() => {\n            if (isDirty) {\n              setRouteText(\"form\");\n              setExitWarning(true);\n            } else {\n              changeRoute(\"form\");\n              initNewData(selectedOrgUnit, programMetadata);\n              // setRegistration(true);\n            }\n          }}\n        >\n          {t(\"newRegistration\")}\n        </Button>\n      </div>\n      <div className=\"button-container\">\n        <Button\n          disabled={!programMetadata}\n          onClick={() => {\n            if (isDirty) {\n              setRouteText(route === \"search\" ? \"list\" : \"search\");\n              setExitWarning(true);\n            } else {\n              changeRoute(route === \"search\" ? \"list\" : \"search\");\n            }\n          }}\n        >\n          {route === \"search\" ? t(\"list\") : t(\"search\")}\n        </Button>\n      </div>\n      <div className=\"button-container menu-button-container\">\n        <FormControl sx={{ m: 1, minWidth: 120 }} size=\"small\">\n          <InputLabel id=\"demo-select-small-label\">Menu</InputLabel>\n          <Select\n            labelId=\"demo-select-small-label\"\n            id=\"demo-select-small\"\n            value={\n              route\n                ? route === \"form\" || route === \"search\"\n                  ? \"list\"\n                  : route\n                : \"list\"\n            }\n            label=\"Menu\"\n            style={{ width: 150 }}\n            onChange={(value) => {\n              if (isDirty) {\n                setRouteText(value.target.value);\n                setExitWarning(true);\n              } else {\n                changeRoute(value.target.value);\n              }\n            }}\n          >\n            {programMetadata !== null &&\n              (userRoles.data || userRoles.admin) && (\n                <MenuItem value=\"list\">{t(\"dataEntry\")}</MenuItem>\n              )}\n            {programMetadata !== null &&\n              (userRoles.view || userRoles.admin) && (\n                <MenuItem value=\"export\">{t(\"anacodExport\")}</MenuItem>\n              )}\n            {programMetadata !== null &&\n              (userRoles.view || userRoles.admin) && (\n                <MenuItem value=\"dashboard\">{t(\"dashboard\")}</MenuItem>\n              )}\n            {userRoles.admin && (\n              <MenuItem value=\"administration\">{t(\"administration\")}</MenuItem>\n            )}\n            {userRoles.admin && (\n              <MenuItem value=\"translation\">{t(\"translation\")}</MenuItem>\n            )}\n          </Select>\n        </FormControl>\n        {/* <div className=\"exit-app-button\">\n          <Button\n            onClick={() => {\n              window.location.href = \"../../../dhis-web-dashboard/\";\n            }}\n          >\n            {t(\"exitApp\")}\n          </Button>\n        </div> */}\n        <div className=\"exit-app-button\">\n          <IconButton\n            size=\"small\"\n            onClick={() => {\n              setHelp(true);\n            }}\n          >\n            <FontAwesomeIcon icon={faCircleQuestion} />\n          </IconButton>\n        </div>\n        <div className=\"exit-app-button\">\n          <IconButton\n            size=\"small\"\n            onClick={() => {\n              setAbout(true);\n            }}\n          >\n            <FontAwesomeIcon icon={faCircleInfo} />\n          </IconButton>\n        </div>\n      </div>\n      <Dialog\n        open={about}\n        fullWidth\n        maxWidth=\"sm\"\n        onClose={() => {\n          setAbout(false);\n        }}\n      >\n        <DialogTitle>\n          About\n          <IconButton\n            aria-label=\"close\"\n            onClick={() => {\n              setAbout(false);\n            }}\n            sx={{\n              position: \"absolute\",\n              right: 8,\n              top: 12,\n            }}\n          >\n            <FontAwesomeIcon icon={faClose} fontSize={24} />\n          </IconButton>\n        </DialogTitle>\n        <Divider />\n        <DialogContent>\n          <div>\n            <strong>Cause of Death App</strong> <i>(version 2.0.1)</i>\n          </div>\n          <div>\n            Developed of HISP Vietnam in collaboration with University of Oslo\n            and WHO\n          </div>\n          <br />\n          <div>DHIS2 version tested:</div>\n          <ul>\n            <li>2.35</li>\n            <li>2.36</li>\n            <li>2.37</li>\n            <li>2.38</li>\n            <li>2.39</li>\n            <li>2.40</li>\n            <li>2.41</li>\n          </ul>\n        </DialogContent>\n      </Dialog>\n      <Dialog\n        open={help}\n        fullWidth\n        maxWidth=\"xl\"\n        onClose={() => {\n          setHelp(false);\n          setDoc(null);\n        }}\n      >\n        <DialogTitle>\n          {t(\"help\")}\n          <IconButton\n            aria-label=\"close\"\n            onClick={() => {\n              setHelp(false);\n              setDoc(null);\n            }}\n            sx={{\n              position: \"absolute\",\n              right: 8,\n              top: 12,\n            }}\n          >\n            <FontAwesomeIcon icon={faClose} fontSize={24} />\n          </IconButton>\n        </DialogTitle>\n        <Divider />\n        <DialogContent>\n          <div className=\"help-container\">\n            <Slide direction=\"right\" in={!doc} mountOnEnter unmountOnExit>\n              <div className=\"help-homepage\">\n                <div className=\"help-title\">{t(\"userManual\")}</div>\n                <div className=\"help-subtitle\">{t(\"causeOfDeathVersion\")}</div>\n                <br />\n                <br />\n                <br />\n                <div className=\"help-title\">{t(\"appFeatures\")}</div>\n                <ul className=\"help-listing\">\n                  <li\n                    onClick={() => {\n                      setDoc({\n                        label: \"dataentry\",\n                        type: \"googleDoc\",\n                        url: \"https://docs.google.com/document/d/e/2PACX-1vT2EbDPO-O-iLc-at1THnLzKTeYAiH1SAimzBvJNXOg3zL6fBupvT1ByPZ0N51uDH95xLVF54CjnI4D/pub?embedded=true\",\n                      });\n                    }}\n                  >\n                    {t(\"dataEntry\")}\n                  </li>\n                  <li\n                    onClick={() => {\n                      setDoc({\n                        label: \"anacod\",\n                        type: \"googleDoc\",\n                        url: \"https://docs.google.com/document/d/e/2PACX-1vQpE5KDQQ8VdTVC_qbcwTTcZmrOX3hDx_L3tApw9yKGBVfZwIBWcHEluA1kl1bKzPhLSnEyZkOdjZLn/pub?embedded=true\",\n                      });\n                    }}\n                  >\n                    {t(\"anacodExport\")}\n                  </li>\n                  <li\n                    onClick={() => {\n                      setDoc({\n                        label: \"dashboard\",\n                        type: \"googleDoc\",\n                        url: \"https://docs.google.com/document/d/e/2PACX-1vQfDy60msYBy8k3UgqRHaDxe72tfrY6sLw2ggxGClCpnDaV-YzWYLajt9f4ZlqfZnTabKjlYxVKfct4/pub?embedded=true\",\n                      });\n                    }}\n                  >\n                    {t(\"dashboard\")}\n                  </li>\n                  <li\n                    onClick={() => {\n                      setDoc({\n                        label: \"translation\",\n                        type: \"googleDoc\",\n                        url: \"https://docs.google.com/document/d/e/2PACX-1vTMlCwOKSheM906LY7YgKHvbyqxtByq9cpWCcISXBbV0b7TuU7uhqxsRLJxkZKYq-0GGGXXuS4C4Tot/pub?embedded=true\",\n                      });\n                    }}\n                  >\n                    {t(\"translation\")}\n                  </li>\n                  <li\n                    onClick={() => {\n                      setDoc({\n                        label: \"administration\",\n                        type: \"googleDoc\",\n                        url: \"https://docs.google.com/document/d/e/2PACX-1vSLEQHeu-PUH4qZBptfwR7Y1h1VX53iYBVC5ax2G9qe7EI4jQY5aACC2I6lsN6zOOhlHIxisCcCllsv/pub?embedded=true\",\n                      });\n                    }}\n                  >\n                    {t(\"administration\")}\n                  </li>\n                  <li\n                    onClick={() => {\n                      setDoc({\n                        label: \"installation\",\n                        type: \"googleDoc\",\n                        url: \"https://docs.google.com/document/d/e/2PACX-1vSRv9lkjTR-1fYxaBzP3gsoBgsJZNpTEDzROoslAMgmI09H1CDNBh1k5umTnk3slg/pub?embedded=true\",\n                      });\n                    }}\n                  >\n                    {t(\"installation\")}\n                  </li>\n                </ul>\n              </div>\n            </Slide>\n            <Slide direction=\"left\" in={doc} mountOnEnter unmountOnExit>\n              <div className=\"help-content\">\n                {doc && (\n                  <iframe\n                    src={doc.url + `&time=${new Date()}`}\n                    width=\"750px\"\n                    height=\"100%\"\n                    frameBorder=\"0\"\n                  ></iframe>\n                )}\n              </div>\n            </Slide>\n          </div>\n        </DialogContent>\n        <Divider />\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            onClick={() => {\n              setDoc(null);\n            }}\n          >\n            <FontAwesomeIcon icon={faArrowLeft} />\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <WarningDialog\n        open={exitWarning}\n        handleCancel={() => {\n          setExitWarning(false);\n        }}\n        handleOk={() => {\n          if (routeText === \"form\") {\n            initNewData(selectedOrgUnit, programMetadata);\n            // setRegistration(true);\n          } else {\n            mutateTei(\"isDirty\", false);\n            mutateEnrollment(\"isDirty\", false);\n            if (currentEventId) {\n              mutateEvent(currentEventId, \"isDirty\", false);\n            }\n          }\n          setExitWarning(false);\n          changeRoute(routeText);\n        }}\n      ></WarningDialog>\n      {/* <Registration \n        openRegistration={registration} \n        onClose={() => {\n          setRegistration(false);\n        }}\n      /> */}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    metadata: state.metadata,\n    route: state.route,\n    userRoles: state.user.userRoles,\n    isDirty:\n      (state.data.currentEnrollment && state.data.currentEnrollment.isDirty) ||\n      (state.data.currentTei && state.data.currentTei.isDirty) ||\n      (state.data.currentEvents.length > 0 &&\n        state.data.currentEvents[0].isDirty),\n    currentEventId:\n      state.data.currentEvents.length > 0\n        ? state.data.currentEvents[0].event\n        : null,\n  };\n};\n\nconst mapDispatchToProps = {\n  setSelectedOrgUnit,\n  changeRoute,\n  initNewData,\n  mutateTei,\n  mutateEnrollment,\n  mutateEvent,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlBar);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/index.jsx",["489","490"],"import { useEffect, useState } from \"react\";\nimport GridLayout from \"react-grid-layout\";\nimport { WidthProvider } from \"react-grid-layout\";\nimport moment from \"moment\";\nimport WidgetContainer from \"./WidgetContainer/WidgetContainer\";\nimport { Select, Space } from \"antd\";\n\nimport generateChildChart from \"./utils/generateChildChart\";\nimport { AGE_RANGES, SEXES, randomNumber } from \"./pages/utils\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./index.css\";\nimport run from \"./run\";\nconst Layout = WidthProvider(GridLayout);\nconst { Option } = Select;\n\nconst OPTIONS = [];\nfor (let i = moment().year(); i >= 1970; i--) {\n  OPTIONS.push(<Option key={i}>{i}</Option>);\n}\n\nconst ALL_CAUSES = [\n  {label: \"Tuberculosis\", value: \"0030\"},\n  {label: \"Sexually transmitted diseases excluding HIV\", value: \"0040;0050;0060;0070;0080\"},\n  {label: \"HIV\", value: \"0090\"},\n  {label: \"Diarrhoeal diseases\", value: \"0100\"},\n  {label: \"Pertussis\", value: \"0120\"},\n  {label: \"Poliomyelitis\", value: \"0130\"},\n  {label: \"Diphtheria\", value: \"0140\"},\n  {label: \"Measles\", value: \"0150\"},\n  {label: \"Tetanus\", value: \"0160\"},\n  {label: \"Meningitis\", value: \"0170\"},\n  {label: \"Hepatitis B\", value: \"0180\"},\n  {label: \"Hepatitis C\", value: \"0190\"},\n  {label: \"Malaria\", value: \"0200\"},\n  {label: \"Tropical-cluster diseases\", value: \"0210;0220;0230;0240;0250;0260;0270\"},\n  {label: \"Lower respiratory infections\", value: \"0390\"},\n  {label: \"Maternal conditions\", value: \"0420;0430;0440;0450;0460;0470;0480\"},\n  {label: \"Conditions arising during the perinatal period\", value: \"0490;0500;0510;0520\"},\n  {label: \"Nutritional deficiencies\", value: \"0530;0540;0550;0560;0570;0580\"},\n  {label: \"Mouth and oropharynx cancers\", value: \"0610\"},\n  {label: \"Oesophagus cancer\", value: \"0620\"},\n  {label: \"Stomach cancer\", value: \"0630\"},\n  {label: \"Colon and rectum cancers\", value: \"0640\"},\n  {label: \"Liver cancer\", value: \"0650\"},\n  {label: \"Pancreas cancer\", value: \"0660\"},\n  {label: \"Trachea, bronchus and lung cancers\", value: \"0670\"},\n  {label: \"Melanoma and other skin cancers\", value: \"0680\"},\n  {label: \"Breast cancer\", value: \"0690\"},\n  {label: \"Cervix uteri cancer\", value: \"0700\"},\n  {label: \"Corpus uteri cancer\", value: \"0710\"},\n  {label: \"Ovary cancer\", value: \"0720\"},\n  {label: \"Prostate cancer\", value: \"0730\"},\n  {label: \"Bladder cancer\", value: \"0740\"},\n  {label: \"Lymphomas and multiple myeloma\", value: \"0750\"},\n  {label: \"Leukaemia\", value: \"0760\"},\n  {label: \"Alzheimer and other dementias\", value: \"0870\"},\n  {label: \"Parkinson disease\", value: \"0880\"},\n  {label: \"Hypertensive  disease\", value: \"1060\"},\n  {label: \"Ischaemic heart disease\", value: \"1070\"},\n  {label: \"Cerebrovascular disease\", value: \"1080\"},\n  {label: \"Chronic obstructive pulmonary disease\", value: \"1120\"},\n  {label: \"Asthma\", value: \"1130\"},\n  {label: \"Digestive diseases\", value: \"1150\"},\n  {label: \"Genito-urinary diseases\", value: \"1200\"},\n  {label: \"Congenital anomalies\", value: \"1310\"},\n  {label: \"Road traffic accidents\", value: \"1500\"},\n  {label: \"Suicide\", value: \"1570\"},\n  {label: \"Homicide\", value: \"1580\"}\n];\n\nconst Dashboard = () => {\n  const { t } = useTranslation();\n  const [pages, setPages] = useState(run(t));\n  const [selectedPeriods, selectPeriod] = useState(moment().year());\n  const [selectedPage, setSelectedPage] = useState(pages[0] ? pages[0].id : \"\");\n  const page = pages.find((page) => page.id === selectedPage);\n\n  const [causes, setCauses] = useState([\"0030\",\"0090\",\"0390\",\"0670\",\"0690\",\"1070\",\"1080\",\"1500\",\"1570\"]);\n\n  return page ? (\n    <div className=\"dashboard-container\">\n      <div className=\"page-selector\">\n        <Space>\n          <Select\n            allowClear\n            style={{ width: \"500px\" }}\n            placeholder=\"Please select year\"\n            value={selectedPeriods}\n            onChange={(value) => {\n              selectPeriod(value);\n            }}\n          >\n            {OPTIONS}\n          </Select>\n          <Select\n              value={selectedPage}\n              style={{ width: 300 }}\n              options={pages.map((p) => ({ value: p.id, label: p.label }))}\n              onChange={(value) => {\n                setSelectedPage(value);\n              }}\n              disabled={selectedPeriods.length === 0}\n            />\n        </Space>\n      </div>\n      { selectedPage === \"page2\" && <div className=\"page-selector-cod\">\n        <Select\n          mode=\"multiple\"\n          allowClear\n          style={{ width: \"99%\" }}\n          placeholder=\"Search\"\n          options={[...[{ label: \"All\", value: \"all\" }], ...ALL_CAUSES]}\n          value={causes}\n          onChange={(val) => {\n            if (val[val.length - 1] === \"all\") {\n              setCauses(ALL_CAUSES.map(({ value }) => value));\n            } else {\n              setCauses(val);\n            }\n          }}\n        />\n      </div> }\n      <div className=\"layout-container\">\n      { selectedPage === \"page2\" ? \n          <Layout \n            id=\"grid\" \n            className=\"layout\" \n            cols={98} \n            rowHeight={1}\n            layout={ Array(causes.length).fill().map( (o,index) => ({\n              i: `2.${index + 1}`,\n              x: index % 3 === 0 ? 0 : index % 3 === 1 ? 32 : 64,\n              y: Math.floor(index / 3) * 33,\n              w: 32,\n              h: 33\n            }) )} \n          >\n            {\n              causes.map( (code, index) => ({\n                i: `2.${index + 1}`,\n                children: [\n                  generateChildChart(\"line\", {\n                    title: `Number of Death by ${ALL_CAUSES.find( ({value}) => value === code ).label}`,\n                    dataLabels: SEXES,\n                    dataSets: AGE_RANGES.map((name) => ({\n                      name,\n                      data: Array(SEXES.length)\n                        .fill()\n                        .map(() => randomNumber(0, 30))\n                    })),\n                    colors: [\"#4C7FBC\", \"#ED7B2E\"],\n                    codes: code\n                  })\n                ]\n              }))\n              .map((widget) => {\n                return <WidgetContainer key={widget.i} widget={widget} period={selectedPeriods} />;\n              })\n            }\n          </Layout>\n          :\n          <Layout id=\"grid\" className=\"layout\" cols={98} layout={page.layout} rowHeight={1}>\n            {page.widgets.map((widget) => {\n              return <WidgetContainer key={widget.i} widget={widget} period={selectedPeriods} />;\n            })}\n          </Layout>\n      }\n        \n      </div>\n    </div>\n  ) : null;\n};\n\nexport default Dashboard;\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Translation/TranslationTable.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Form/Result.js",["491","492"],"import { connect } from \"react-redux\";\n\nimport { useTranslation } from \"react-i18next\";\n\nimport InputField from \"../InputField\";\nimport { Button } from \"antd\";\nimport \"./stage.css\";\n\nconst Result = ({\n    metadata,\n    data\n}) => {\n    const { t } = useTranslation();\n\n    const { programMetadata, formMapping } = metadata;\n\n  const { currentTei, currentEnrollment, currentEvents } = data;\n\n    const currentEvent = currentEvents.find((event) => {\n        return event.programStage === formMapping.programStage;\n    });\n\n    const programStage = programMetadata.programStages.find(\n        (ps) => ps.id === formMapping.programStage\n    );\n\n    const renderInputField = (de, extraFunction, placeholder) => {\n        const foundDe = programStage.dataElements.find((dataElement) => dataElement.id === de);\n        if(!foundDe){\n          return null;\n        }\n        let disable = false;\n        if (de === formMapping.dataElements[\"underlyingCOD\"] || \n            de === formMapping.dataElements[\"underlyingCOD_chapter\"] || \n            de === formMapping.dataElements[\"underlyingCOD_group\"] || \n            de === formMapping.dataElements[\"underlyingCOD_code\"]) \n        {\n          disable = true;\n        }\n\n        return (\n          <InputField\n            value={currentEvent && currentEvent.dataValues[de] ? currentEvent.dataValues[de] : \"\"}\n            // change={(value) => {\n            //   // check if input is underlying checkbox\n            //   mutateDataValue(currentEvent.event, de, value);\n            // }}\n            valueType={foundDe.valueType}\n            // label={foundDe.displayFormName}\n            valueSet={foundDe.valueSet}\n            disabled={disable}\n            placeholder={placeholder}\n          />\n        );\n    };\n\n    const getUcodResult = () => currentEvent && currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_report\"]] ? currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_report\"]] : \"\";\n    const getUcodWarning = () => currentEvent && currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_warning\"]] ? currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_warning\"]] : \"\";\n\n    return (\n        <div className=\"stage-section\">\n            {/* <div className=\"stage-section-title\">{t(\"results\")}</div> */}\n            <div className=\"stage-section-content\">\n                <table className=\"results-table\">\n                    <tbody>\n                        <tr>\n                        <td>{t(\"icd11\")}</td>\n                        <td className=\"unselectable-field\">\n                            {renderInputField(formMapping.dataElements[\"underlyingCOD_code\"])}\n                        </td>\n                        </tr>\n                        <tr>\n                        <td>{t(\"underlyingCOD\")}</td>\n                        <td className=\"unselectable-field\">\n                            {renderInputField(formMapping.dataElements[\"underlyingCOD\"])}\n                        </td>\n                        </tr>\n                        <tr>\n                        <td>{t(\"icd11Chapter\")}</td>\n                        <td className=\"unselectable-field\">\n                            {renderInputField(formMapping.dataElements[\"underlyingCOD_chapter\"])}\n                        </td>\n                        </tr>\n                        <tr hidden=\"hidden\">\n                        <td>{t(\"icd11Grouping\")}</td>\n                        <td className=\"unselectable-field\">\n                            {renderInputField(formMapping.dataElements[\"underlyingCOD_group\"])}\n                        </td>\n                        </tr>\n                    </tbody>\n                </table>\n                {\n                    (currentEvent && (currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_report\"]] || getUcodWarning() !== \"\")) && <>\n                        <div className=\"result-section-title\">Detailed explanation</div>\n                        <div>\n                            {currentTei.attributes[formMapping.attributes[\"sex\"]] ? currentTei.attributes[formMapping.attributes[\"sex\"]] : \"\"}, {currentTei.attributes[formMapping.attributes[\"age\"]] ? currentTei.attributes[formMapping.attributes[\"age\"]] : \"\"}\n                        </div>\n                        {\n                            getUcodWarning() !== \"\" && <>\n                                <div><strong>Warnings</strong></div>\n                                <div className=\"results-compute\">\n                                    <div><pre style={{whiteSpace: \"pre-wrap\"}}>{getUcodWarning()}</pre></div>\n                                </div>\n                            </>\n                        }\n                        { \n                            getUcodResult() !== \"\" && <>\n                                <div><strong>Short Coding Report</strong></div>\n                                <div className=\"results-compute\">\n                                    <div><pre style={{whiteSpace: \"pre-wrap\"}}>{getUcodResult()}</pre></div>\n                                </div>\n                            </>\n                        }\n                    </>\n                }\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      metadata: state.metadata,\n      data: state.data\n    };\n};\n  \nexport default connect(mapStateToProps)(Result);","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Export/Content.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/reducers/data-methods.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/route/type.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/user/type.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/utils/excel.utility.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/utils/index.js",["493","494","495","496"],"import moment from \"moment\";\nimport InputField from \"../components/InputField\";\nimport { Select, Input, DatePicker } from \"antd\";\nimport i18n from \"i18next\";\nconst { Option } = Select;\nconst { Search } = Input;\n\nconst sample = (d, fn = Math.random) => {\n  if (d.length === 0) {\n    return;\n  }\n  return d[Math.round(fn() * (d.length - 1))];\n};\n\nexport const generateCode = (limit = 11, fn = Math.random) => {\n  const allowedLetters = [\"abcdefghijklmnopqrstuvwxyz\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"].join(\"\");\n  const allowedChars = [\"0123456789\", allowedLetters].join(\"\");\n  const arr = [sample(allowedLetters, fn)]; // sample 1 to make sure it starts with a letter\n  for (let i = 0; i < limit - 1; i++) {\n    arr.push(sample(allowedChars, fn));\n  }\n  return arr.join(\"\");\n};\n\nexport const convertValue = (valueType, value) => {\n  switch (valueType) {\n    case \"TEXT\":\n    case \"INTEGER_POSITIVE\":\n    case \"INTEGER_NEGATIVE\":\n    case \"INTEGER_ZERO_OR_POSITIVE\":\n    case \"PERCENTAGE\":\n    case \"NUMBER\":\n    case \"INTEGER\":\n    case \"PHONE_NUMBER\":\n    case \"EMAIL\":\n    case \"LONG_TEXT\":\n      return value;\n    case \"DATE\":\n      return moment(value).format(\"YYYY-MM-DD\");\n    case \"DATETIME\":\n      return moment(value);\n    case \"TIME\":\n      return moment(value);\n    case \"BOOLEAN\":\n      return value;\n    case \"TRUE_ONLY\":\n      return value;\n    case \"AGE\":\n      return moment(value);\n    default:\n      return <span>UNSUPPORTED VALUE TYPE</span>;\n  }\n};\n\nexport const convertValueBack = (valueType, value) => {\n  switch (valueType) {\n    case \"TEXT\":\n    case \"INTEGER_POSITIVE\":\n    case \"INTEGER_NEGATIVE\":\n    case \"INTEGER_ZERO_OR_POSITIVE\":\n    case \"PERCENTAGE\":\n    case \"NUMBER\":\n    case \"INTEGER\":\n    case \"PHONE_NUMBER\":\n    case \"EMAIL\":\n    case \"LONG_TEXT\":\n      return value;\n    case \"DATE\":\n      return moment(value).format(\"YYYY-MM-DD\");\n    case \"DATETIME\":\n      return moment(value);\n    case \"TIME\":\n      return moment(value);\n    case \"BOOLEAN\":\n      return value + \"\";\n    case \"TRUE_ONLY\":\n      return value ? value + \"\" : \"\";\n    case \"AGE\":\n      return moment(value).format(\"YYYY-MM-DD\");\n    default:\n      return <span>UNSUPPORTED VALUE TYPE</span>;\n  }\n};\n\nexport const generateDhis2Payload = (data, programMetadata) => {\n  const newData = JSON.parse(JSON.stringify(data));\n  let { currentTei, currentEnrollment, currentEvents } = newData;\n  currentTei.attributes = Object.keys(currentTei.attributes)\n    .filter(attribute => programMetadata.trackedEntityAttributes.find((attr) => attr.id === attribute) )\n    .map((attribute) => {\n    const attributeMetadata = programMetadata.trackedEntityAttributes.find((attr) => attr.id === attribute);\n    return {\n      attribute,\n      value: convertValueBack(attributeMetadata.valueType, currentTei.attributes[attribute])\n    };\n  });\n  currentEnrollment.enrollmentDate = moment(currentEnrollment.enrollmentDate).format(\"YYYY-MM-DD\");\n  currentEnrollment.incidentDate = moment(currentEnrollment.incidentDate).format(\"YYYY-MM-DD\");\n\n  currentEvents = currentEvents.map((event) => {\n    const programStage = programMetadata.programStages.find((ps) => ps.id === event.programStage);\n    event.dataValues = Object.keys(event.dataValues).map((dataElement) => {\n      const dataElementMetadata = programStage.dataElements.find((de) => de.id === dataElement);\n      return {\n        dataElement,\n        value: convertValueBack(dataElementMetadata.valueType, event.dataValues[dataElement])\n      };\n    });\n    event.eventDate = moment(event.eventDate).format(\"YYYY-MM-DD\");\n    event.dueDate = moment(event.dueDate).format(\"YYYY-MM-DD\");\n    return event;\n  });\n\n  return { currentTei, currentEnrollment, currentEvents };\n};\n\nexport const generateTableColumns = (metadata, external) => {\n  let render = null;\n  if (external) {\n    switch (external.type) {\n      case \"DATE\":\n        render = (value) => {\n          return value ? moment(value).format(\"YYYY-MM-DD\") : \"\";\n        };\n        break;\n      default:\n        render = (value) => {\n          return value ? value : \"\";\n        };\n        break;\n    }\n  } else {\n    if (metadata.valueSet) {\n      render = (value) => {\n        let find = metadata.valueSet.find((e) => {\n          return e.value === value;\n        });\n        if (find) {\n          value = find.label;\n        }\n        return value;\n      };\n    } else {\n      switch (metadata.valueType) {\n        case \"TRUE_ONLY\":\n        case \"BOOLEAN\":\n          render = (value) => {\n            if (value == true || value == \"true\") {\n              value = \"Yes\";\n            }\n            if (value == false || value == \"false\") {\n              value = \"No\";\n            }\n            return value ? value : \"\";\n          };\n          break;\n        case \"DATE\":\n          render = (value) => {\n            return value ? moment(value).format(\"YYYY-MM-DD\") : \"\";\n          };\n          break;\n        default:\n          render = (value) => {\n            return value ? value : \"\";\n          };\n          break;\n      }\n    }\n  }\n  return render;\n};\n\nexport const generateTableFilter = (metadata, onFilter, external) => {\n  let render = null;\n  if (external) {\n    switch (external.type) {\n      case \"DATE\":\n        render = (\n          <div style={{ padding: \"20px\" }}>\n            <DatePicker\n              id={external.name}\n              style={{ width: 250 }}\n              onChange={(value) => {\n                onFilter(value ? moment(value).format(\"YYYY-MM-DD\") : value, external.name);\n              }}\n            />\n          </div>\n        );\n        break;\n      default:\n        render = (value) => {\n          return value ? value : \"\";\n        };\n        break;\n    }\n  } else {\n    if (metadata.valueSet) {\n      render = (\n        <div style={{ padding: \"20px\" }}>\n          <Select\n            style={{ width: 250 }}\n            allowClear\n            showSearch\n            placeholder={`${i18n.t(\"select\")}...`}\n            onChange={(value) => {\n              onFilter(value, metadata.id, \"select\");\n            }}\n          >\n            {metadata.valueSet.map((option) => {\n              return <Option value={option.value}>{option.label}</Option>;\n            })}\n          </Select>\n        </div>\n      );\n    } else {\n      switch (metadata.valueType) {\n        case \"TRUE_ONLY\":\n        case \"BOOLEAN\":\n          <div style={{ padding: \"20px\" }}>\n            <Select\n              style={{ width: 250 }}\n              allowClear\n              placeholder={`${i18n.t(\"select\")}...`}\n              onChange={(value) => {\n                onFilter(value, metadata.id);\n              }}\n            >\n              <Option value=\"true\">Yes</Option>\n              <Option value=\"false\">No</Option>\n            </Select>\n          </div>;\n\n          break;\n        case \"DATE\":\n          render = (\n            <div style={{ padding: \"20px\" }}>\n              <DatePicker\n                id={metadata.id}\n                style={{ width: 250 }}\n                onChange={(value) => {\n                  onFilter(value ? moment(value).format(\"YYYY-MM-DD\") : value, metadata.id);\n                }}\n              />\n            </div>\n          );\n          break;\n        default:\n          // render = (<Input style={{ width: 200 }} placeholder=\"Text Here...\" allowClear onChange={onFilter}/>)\n          render = (\n            <div style={{ padding: \"20px\" }}>\n              <Search\n                id={metadata.id}\n                placeholder={i18n.t(\"inputSearchText\")}\n                allowClear\n                onSearch={(value) => {\n                  onFilter(value, metadata.id);\n                }}\n                style={{ width: 250 }}\n              />\n            </div>\n          );\n          break;\n      }\n    }\n  }\n  return render;\n};\n\nexport const generateEditableDataValueCells = (metadata, mutateDataValue) => {\n  let render = (value, record) => {\n    return (\n      <InputField\n        value={value}\n        valueSet={metadata.valueSet ? metadata.valueSet : null}\n        // label={metadata.displayFormName}\n        valueType={metadata.valueType}\n        change={(value) => {\n          mutateDataValue(record.eventId, metadata.id, value);\n        }}\n      />\n    );\n  };\n  return render;\n};\nexport const numberWithCommas = (number) => {\n  return number.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/metadata/type.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Form/Stage.js",["497","498","499","500","501","502","503","504","505"],"\n\nimport { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { \n  Button,\n  Modal,\n  Tooltip\n} from \"antd\";\n\n/* Styling tools */\nimport { useTranslation } from \"react-i18next\";\nimport moment from \"moment\";\nimport InputField from \"../InputField\";\nimport Icd11Tool from \"../Icd11Tool/EmbeddedIcd11Tool\";\nimport \"./stage.css\";\n\n/* REDUX */\n\nimport {\n  mutateEvent,\n  mutateDataValue,\n  initNewEvent,\n} from \"../../redux/actions/data\";\n\n/* Utils */\nimport { generateCode } from \"../../utils\";\n\n\nconst Stage = ({\n  metadata,\n  data,\n  mutateEvent,\n  mutateDataValue,\n  initNewEvent\n}) => {\n  const { t } = useTranslation();\n\n  const [icdTool, setIcdTool] = useState(false);\n  const [activeCauseOfDeath, setActiveCauseOfDeath] = useState(\"\");\n  const [causeOfDeaths, setCauseOfDeaths] = useState(null);\n  const [checkBoxUnderlying, setCheckBoxUnderlying] = useState(\"\");\n  const [flagUnderlying, setFlagUnderlying] = useState(false);\n\n  const [underlyingSelections,setUnderlyingSelections] = useState([]);\n  const [underlyingResult, setUnderlyingResult] = useState(\"\");\n  const [underlyingModal, setUnderlyingModal] = useState(false);\n  const [timeToDeath, setTimeToDeath] = useState(null);\n  const [timeToDeathModal, setTimeToDeathModal] = useState(false);\n\n  const {\n    currentEnrollment,\n    currentTei: { attributes },\n    currentEnrollment: { enrollmentDate: currentTeiDateOfDeath },\n    currentEnrollment: { status: enrollmentStatus }\n  } = data;\n  const { programMetadata, formMapping, icd11Options, femaleCode, icdApi_clientToken, keyUiLocale } = metadata;\n  const currentTeiSexAttributeValue = attributes[formMapping.attributes[\"sex\"]];\n  const currentTeiDateOfBirthAttributeValue = attributes[formMapping.attributes[\"dob\"]];\n  const currentTeiAgeAttributeValue = attributes[formMapping.attributes[\"age\"]];\n\n  const age = currentTeiAgeAttributeValue ? currentTeiAgeAttributeValue : Math.abs(\n    moment(currentTeiDateOfDeath, \"YYYY-MM-DD\").diff(\n      moment(currentTeiDateOfBirthAttributeValue, \"YYYY-MM-DD\"),\n      \"years\",\n      true\n    )\n  );\n  const programStage = programMetadata.programStages.find(\n    (ps) => ps.id === formMapping.programStage\n  );\n  const currentEvent = data.currentEvents.find((event) => {\n    return event.programStage === formMapping.programStage;\n  });\n  const returnInitValue = (de) => {\n    return currentEvent ? (currentEvent.dataValues[de] ? currentEvent.dataValues[de] : \"\") : \"\";\n  };\n  const isShowMaternalDeath = () => currentTeiSexAttributeValue === femaleCode && age >= 10;\n  const isShowFetalOrInfantDeath = () => age <= 1;\n\n  useEffect(() => {\n    if (formMapping.sections.find(({name}) => name === \"Fetal or infant death\") && currentEvent && !isShowFetalOrInfantDeath()) {\n      [\n        formMapping.dataElements[\"multiple_pregnancies\"],\n        formMapping.dataElements[\"stillborn\"],\n        formMapping.dataElements[\"hours_newborn_survived\"],\n        formMapping.dataElements[\"birth_weight\"],\n        formMapping.dataElements[\"completedWeeks_pregnancy\"],\n        formMapping.dataElements[\"age_mother\"],\n        formMapping.dataElements[\"pregnancy_conditions\"],\n      ].map((deId) => {\n        mutateDataValue(currentEvent.event, deId, \"\");\n      });\n      mutateEvent(currentEvent.event, \"isDirty\", false);\n    }\n  }, [age]);\n\n  useEffect(() => {\n    if (formMapping.sections.find(({name}) => name === \"Maternal death\") && currentEvent && !isShowMaternalDeath()) {\n      [\n        formMapping.dataElements[\"pregnancy_inLastYear\"], \n        formMapping.dataElements[\"time_from_pregnancy\"], \n        formMapping.dataElements[\"pregnancy_contributed_to_death\"]\n      ].map((deId) => {\n        mutateDataValue(currentEvent.event, deId, \"\");\n      });\n      mutateEvent(currentEvent.event, \"isDirty\", false);\n    }\n  }, [currentTeiSexAttributeValue, age]);\n\n  useEffect(() => {\n    if (!currentEvent) {\n      const eventId = generateCode();\n      initNewEvent(eventId, programStage.id);\n      mutateEvent(eventId, \"eventDate\", currentEnrollment.incidentDate);\n      mutateEvent(eventId, \"dueDate\", currentEnrollment.incidentDate);\n\n      // Dirty Check\n      mutateEvent(eventId, \"isDirty\", false);\n    }\n    setUnderlyingResult(returnInitValue(formMapping.dataElements[\"underlyingCOD\"]));\n    const cods = {\n      [formMapping.dataElements[\"codA\"]]: {\n        code: returnInitValue(formMapping.dataElements[\"codA\"]),\n        // label: returnInitValue(formMapping.dataElements[\"codA_name\"]),\n        underlying: returnInitValue(formMapping.dataElements[\"codA_underlying\"]),\n        entityId: returnInitValue(formMapping.dataElements[\"codA_entityId\"])\n      },\n      [formMapping.dataElements[\"codB\"]]: {\n        code: returnInitValue(formMapping.dataElements[\"codB\"]),\n        // label: returnInitValue(formMapping.dataElements[\"codB_name\"]),\n        underlying: returnInitValue(formMapping.dataElements[\"codB_underlying\"]),\n        entityId: returnInitValue(formMapping.dataElements[\"codB_entityId\"])\n      },\n      [formMapping.dataElements[\"codC\"]]: {\n        code: returnInitValue(formMapping.dataElements[\"codC\"]),\n        // label: returnInitValue(formMapping.dataElements[\"codC_name\"]),\n        underlying: returnInitValue(formMapping.dataElements[\"codC_underlying\"]),\n        entityId: returnInitValue(formMapping.dataElements[\"codC_entityId\"])\n      },\n      [formMapping.dataElements[\"codD\"]]: {\n        code: returnInitValue(formMapping.dataElements[\"codD\"]),\n        // label: returnInitValue(formMapping.dataElements[\"codD_name\"]),\n        underlying: returnInitValue(formMapping.dataElements[\"codD_underlying\"]),\n        entityId: returnInitValue(formMapping.dataElements[\"codD_entityId\"])\n      },\n      [formMapping.dataElements[\"codO\"]]: {\n        code: returnInitValue(formMapping.dataElements[\"codO\"]),\n        // label: returnInitValue(formMapping.dataElements[\"codO_name\"]),\n        underlying: returnInitValue(formMapping.dataElements[\"codO_underlying\"]),\n        entityId: returnInitValue(formMapping.dataElements[\"codO_entityId\"])\n      },\n    };\n    setCauseOfDeaths(cods);\n  }, []);\n\n  useEffect(() => {\n    causeOfDeaths && setCheckBoxUnderlying(\n      causeOfDeaths[formMapping.dataElements[\"codA\"]].underlying\n        ? formMapping.dataElements[\"codA_underlying\"]\n        : causeOfDeaths[formMapping.dataElements[\"codB\"]].underlying\n        ? formMapping.dataElements[\"codB_underlying\"]\n        : causeOfDeaths[formMapping.dataElements[\"codC\"]].underlying\n        ? formMapping.dataElements[\"codC_underlying\"]\n        : causeOfDeaths[formMapping.dataElements[\"codD\"]].underlying\n        ? formMapping.dataElements[\"codD_underlying\"]\n        : causeOfDeaths[formMapping.dataElements[\"codO\"]].underlying\n        ? formMapping.dataElements[\"codO_underlying\"]\n        : \"\"\n    );\n  }, [causeOfDeaths])\n\n  useEffect(() => {\n    setFlagUnderlying(!flagUnderlying);\n  }, [checkBoxUnderlying])\n\n  useEffect(() => {\n    if ( causeOfDeaths ) {\n      fillUpUnderlying(causeOfDeaths);\n    }\n  }, [flagUnderlying]);\n\n  useEffect(() => {\n    if ( underlyingResult !== \"\" ) {\n      fillUpUnderlying(causeOfDeaths);\n    }\n  }, [underlyingResult]);\n\n  const setValueIcdField = (cod) => {\n    if (activeCauseOfDeath !== \"\") {\n      mutateDataValue(currentEvent.event, activeCauseOfDeath.code, cod[activeCauseOfDeath.code].code);\n      // mutateDataValue(currentEvent.event, activeCauseOfDeath.label, cod[activeCauseOfDeath.code].label);\n      mutateDataValue(currentEvent.event, activeCauseOfDeath.underlying, cod[activeCauseOfDeath.code].underlying);\n      mutateDataValue(currentEvent.event, activeCauseOfDeath.entityId, cod[activeCauseOfDeath.code].entityId);\n\n      // RESET activeCauseOfDeath \n      setActiveCauseOfDeath(\"\");\n    }\n  }\n\n  const fillUpUnderlying = (cod) => {\n    let result = null;\n    // for (const [key, value] of Object.entries(cod)) {\n    //   if (value.underlying) {\n        result = underlyingResult;\n    //   }\n    // }\n\n    const currentUnderlyingCoD = currentEvent && currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_code\"]] ? currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_code\"]] : \"\";\n    // Save values of underlying\n    if (currentEvent) {\n      if (result && result !== \"\") {\n        if ( result !== currentUnderlyingCoD ) {\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD\"], result);\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_code\"], result);\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_chapter\"], icd11Options.find( option => option.code === result).attributeValues.find( attrVal => attrVal.attribute.id === formMapping.optionAttributes[\"chapter\"] ).value);\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_group\"], icd11Options.find( option => option.code === result).attributeValues.find( attrVal => attrVal.attribute.id === formMapping.optionAttributes[\"group\"] ).value);\n        }\n      } else {\n        if (currentEvent.isDirty) {\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD\"], \"\");\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_code\"], \"\");\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_chapter\"], \"\");\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_group\"], \"\");\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_report\"], \"\");\n        }\n        else {\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD\"], \"\");\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_code\"], \"\");\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_chapter\"], \"\");\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_group\"], \"\");\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_report\"], \"\");\n          mutateEvent(currentEvent.event, \"isDirty\", false);\n        }\n        \n      }\n    }\n  };\n\n  // Render Inputs ( text, checkbox - note: not for code and label fields)\n  const renderInputField = (de, extraFunction, placeholder) => {\n    const foundDe = programStage.dataElements.find((dataElement) => dataElement.id === de);\n    if(!foundDe){\n      return null;\n    }\n    let disable = false;\n    if (\n      currentEvent \n      && de === formMapping.dataElements[\"reason_of_manual_COD_selection\"]\n      && (\n        (currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_processed_by\"]] \n        && currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_processed_by\"]] === \"DORIS\")\n      || !currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_processed_by\"]] )\n    ) {\n      disable = true;\n    }\n    if (\n      currentEvent \n      && de === formMapping.dataElements[\"underlyingCOD_processed_by\"]\n      && currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_processed_by\"]] !== \"Manual\"\n      && underlyingResult === \"\"\n    ) {\n      disable = true;\n    }\n    if (\n      de === formMapping.dataElements[\"codA_underlying\"] ||\n      de === formMapping.dataElements[\"codB_underlying\"] ||\n      de === formMapping.dataElements[\"codC_underlying\"] ||\n      de === formMapping.dataElements[\"codD_underlying\"] ||\n      de === formMapping.dataElements[\"codO_underlying\"]\n    ) {\n      if (checkBoxUnderlying !== \"\" && checkBoxUnderlying !== de) {\n        disable = true;\n      }\n      if (currentEvent && !currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_processed_by\"]] && checkBoxUnderlying === \"\") {\n        disable = true;\n      }\n      if (currentEvent && currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_processed_by\"]] && currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_processed_by\"]] === \"DORIS\") {\n        disable = true;\n      }\n    }\n    return (\n      <InputField\n        value={currentEvent && currentEvent.dataValues[de] ? currentEvent.dataValues[de] : de === formMapping.dataElements[\"underlyingCOD_processed_by\"] ? \"DORIS\" : \"\"}\n        change={(value) => {\n          // check if input is underlying checkbox\n          if (extraFunction) {\n            let currentCauseOfDeath = causeOfDeaths;\n            let id = null;\n            switch (de) {\n              case formMapping.dataElements[\"codA_underlying\"]:\n                id = formMapping.dataElements[\"codA\"];\n                break;\n              case formMapping.dataElements[\"codB_underlying\"]:\n                id = formMapping.dataElements[\"codB\"];\n                break;\n              case formMapping.dataElements[\"codC_underlying\"]:\n                id = formMapping.dataElements[\"codC\"];\n                break;\n              case formMapping.dataElements[\"codD_underlying\"]:\n                id = formMapping.dataElements[\"codD\"];\n                break;\n              case formMapping.dataElements[\"codO_underlying\"]:\n                id = formMapping.dataElements[\"codO\"];\n                break;\n              default:\n                break;\n            }\n            \n            // set underlying\n            if (value) {\n              if ( currentCauseOfDeath[id].code.split(\",\").length === 1 ) {\n                setUnderlyingResult(currentCauseOfDeath[id].code.split(\" (\")[0]);\n              }\n              else {\n                setUnderlyingSelections(currentCauseOfDeath[id].code.split(\",\").map(selection => ({label: `${selection} - ${icd11Options.find(({code}) => code === selection.split(\" (\")[0])?.name}`, value: selection.split(\" (\")[0]})));\n                setUnderlyingModal(true);\n              }\n            }\n            else {\n              setUnderlyingResult(\"\");\n              setUnderlyingSelections([]);\n            }\n\n            if (id) {\n              for (const [key, val] of Object.entries(currentCauseOfDeath)) {\n                if (key === id) {\n                  val.underlying = value;\n                } else {\n                  val.underlying = false;\n                }\n              }\n              \n              setCauseOfDeaths({\n                ...causeOfDeaths,\n                ...currentCauseOfDeath\n              });\n            }\n\n            \n          }\n          // set DORIS\n          if (currentEvent && de === formMapping.dataElements[\"underlyingCOD_processed_by\"] && value === \"DORIS\") {\n            mutateDataValue(currentEvent.event, formMapping.dataElements[\"reason_of_manual_COD_selection\"], \"\");\n          }\n          mutateDataValue(currentEvent.event, de, value);\n        }}\n        valueType={foundDe.valueType}\n        // label={foundDe.displayFormName}\n        valueSet={foundDe.valueSet}\n        disabled={disable || enrollmentStatus === \"COMPLETED\"}\n        placeholder={placeholder}\n      />\n    );\n  };\n\n  const tagRender = (props) => {\n    const { label, value, closable, onClose } = props;\n    const option = icd11Options.find((item) => item.code === value.split(\" (\")[0]);\n    const time = value.split(\" (\")[1]?.replace(\")\",\"\");\n    const timeString = !time ? \"unknown\" \n      : time[time.length - 1] === \"Y\" ? `${time.substring(1,time.length - 1)} year${parseInt(time.substring(1,time.length - 1)) === 1 ? \"\" : \"s\"}` \n      : time[time.length - 1] === \"W\" ? `${time.substring(1,time.length - 1)} week${parseInt(time.substring(1,time.length - 1)) === 1 ? \"\" : \"s\"}` \n      : time[time.length - 1] === \"D\" ? `${time.substring(1,time.length - 1)} day${parseInt(time.substring(1,time.length - 1)) === 1 ? \"\" : \"s\"}` \n      : time[time.length - 1] === \"H\" ? `${time.substring(2,time.length - 1)} hour${parseInt(time.substring(2,time.length - 1)) === 1 ? \"\" : \"s\"}` \n      : time[time.length - 1] === \"S\" ? `${time.substring(2,time.length - 1)} second${parseInt(time.substring(2,time.length - 1)) === 1 ? \"\" : \"s\"}`\n      : time[time.length - 1] === \"M\" ? \n        ( time.substring(0,2) === \"PT\" ? \n          `${time.substring(2,time.length - 1)} minute${parseInt(time.substring(2,time.length - 1)) === 1 ? \"\" : \"s\"}`\n          : `${time.substring(1,time.length - 1)} month${parseInt(time.substring(1,time.length - 1)) === 1 ? \"\" : \"s\"}` ) \n      : \"unknown\"\n\n    return (\n      <Tooltip title={`${option?.name}\\n${timeString}`} overlayInnerStyle={{ whiteSpace: \"pre-line\" }}>\n        <span\n          style={{\n            display: \"inline-flex\",\n            alignItems: \"center\",\n            background: \"#f0f0f0\",\n            padding: \"4px 8px\",\n            borderRadius: \"4px\",\n            margin: \"2px\",\n          }}\n        >\n          {label}\n          {closable && (\n            <span\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                onClose();\n              }}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              style={{\n                marginLeft: \"8px\",\n                cursor: \"pointer\",\n                color: \"#999\",\n              }}\n            >\n              ×\n            </span>\n          )}\n        </span>\n      </Tooltip>\n    )\n  }\n\n  // const renderCauseOfDeathsInputField = (codCode, codName, codEntityId, codUnderlying) => {\n  const renderCauseOfDeathsInputField = (codCode, codEntityId, codUnderlying) => {\n    return (\n      <InputField\n        // addonBefore={\n        //   currentEvent ? currentEvent.dataValues[codCode] ? <b>{currentEvent.dataValues[codCode]}</b> : \"\" : \"\"\n        // }\n        // value={currentEvent ? (currentEvent.dataValues[codCode] ? currentEvent.dataValues[codCode] : \"\") : \"\"}\n        value={currentEvent ? (currentEvent.dataValues[codCode] ? currentEvent.dataValues[codCode].split(\",\") : []) : []}\n        valueSet={currentEvent ? (currentEvent.dataValues[codCode] ? currentEvent.dataValues[codCode].split(\",\") : []) : []}\n        selectMode={\"multiple\"}\n        tagRender={tagRender}\n        valueType=\"TEXT\"\n        click={() => {\n          setActiveCauseOfDeath({\n            // ...activeCauseOfDeath,\n            // label: codName,\n            code: codCode,\n            entityId: codEntityId,\n            underlying: codUnderlying,\n            // freeText: freeText\n          });\n          setIcdTool(true);\n        }}\n        placeholder={\"ICD-11 Coding Tool\"}\n        // allowClear={true}\n        change={ value => {\n          if ( value === \"\" ) {\n            mutateDataValue(currentEvent.event, codCode, \"\");\n            // mutateDataValue(currentEvent.event, codName, \"\");\n            mutateDataValue(currentEvent.event, codUnderlying, false);\n            causeOfDeaths[codCode].code = \"\";\n            // causeOfDeaths[codCode].label = \"\";\n            causeOfDeaths[codCode].underlying = false;\n            setCauseOfDeaths({ ...causeOfDeaths });\n          }\n\n          let dataValues_codEntityId = currentEvent.dataValues[codEntityId].split(\",\");\n          currentEvent.dataValues[codCode].split(\",\").forEach( (c,i) => {\n            if ( !value.find( v => c === v ) ) {\n              console.log(c,i);\n              // dataValues_codEntityId = dataValues_codEntityId.splice(i,1);\n              console.log(dataValues_codEntityId.splice(i,1));\n            }\n          })\n\n          causeOfDeaths[formMapping.dataElements[\"codA\"]].underlying = false;\n          causeOfDeaths[formMapping.dataElements[\"codB\"]].underlying = false;\n          causeOfDeaths[formMapping.dataElements[\"codC\"]].underlying = false;\n          causeOfDeaths[formMapping.dataElements[\"codD\"]].underlying = false;\n          causeOfDeaths[formMapping.dataElements[\"codO\"]].underlying = false;\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"codA_underlying\"], false);\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"codB_underlying\"], false);\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"codC_underlying\"], false);\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"codD_underlying\"], false);\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"codO_underlying\"], false);\n\n          causeOfDeaths[codCode].code = value.join(\",\");\n          causeOfDeaths[codCode].entityId = dataValues_codEntityId.join(\",\");\n          mutateDataValue(currentEvent.event, codCode, value.join(\",\"));\n          mutateDataValue(currentEvent.event, codEntityId, dataValues_codEntityId.join(\",\"));\n\n          setCauseOfDeaths({ ...causeOfDeaths });\n          setUnderlyingResult(\"\");\n\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_processed_by\"], \"DORIS\");\n        }}\n        disabled={enrollmentStatus === \"COMPLETED\"}\n      />\n    );\n  };\n\n  // This works with the Maternal Death rule once the section has attribute \"programRule\" with value \"MaternalDeath\" in data store\n  const renderOtherSection = section => {\n    return section.programRule !== \"MaternalDeath\" || isShowMaternalDeath() ? <div className=\"stage-section\">\n        <div className=\"stage-section-title\">{section.name}</div>\n        <div className=\"stage-section-content\">\n          <table className=\"other-section-table\">\n            <tbody>\n            {\n              section.dataElements.map( ({id}) => <tr>\n                <td>{programMetadata.programStages[0].dataElements.find( de => de.id === id ).displayFormName}</td>\n                <td>\n                  {renderInputField(id)}\n                </td>\n              </tr>)\n            }\n            </tbody>\n          </table>\n        </div>\n      </div> : <></>\n  }\n\n  const detectUnderlyingCauseOfDeath = async () => {\n\n    let headers = new Headers();\n    headers.append(\"accept\", \"application/json\");\n    headers.append(\"API-Version\", \"v2\");\n    headers.append(\"Accept-Language\", keyUiLocale);\n    headers.append(\"Authorization\", `Bearer ${icdApi_clientToken}`);\n    const icdApiUrl = \"https://id.who.int/icd/release/11/2025-01/doris?\" \n      + \"sex=\" + (!currentTeiSexAttributeValue ? \"9\" : currentTeiSexAttributeValue === \"\" ? \"9\" : currentTeiSexAttributeValue === femaleCode ? \"2\" : \"1\")\n      + (currentTeiAgeAttributeValue ? `&estimatedAge=${attributes[formMapping.attributes[\"age_unit\"]].replace(\"_\",attributes[formMapping.attributes[\"estimated_age\"]])}` : \"\")\n      + (currentTeiDateOfBirthAttributeValue ? `&dateBirth=${currentTeiDateOfBirthAttributeValue}` : \"\")\n      + (currentTeiDateOfDeath ? `&dateDeath=${currentTeiDateOfDeath}` : \"\")\n      + (\"&causeOfDeathCodeA=\" + causeOfDeaths[formMapping.dataElements[\"codA\"]].code.split(\",\").map( c => c.split(\" (\")[0] ).join(\",\"))\n      + (causeOfDeaths[formMapping.dataElements[\"codB\"]].code !== \"\" ? (\"&causeOfDeathCodeB=\" + causeOfDeaths[formMapping.dataElements[\"codB\"]].code.split(\",\").map( c => c.split(\" (\")[0] ).join(\",\")) : \"\") \n      + (causeOfDeaths[formMapping.dataElements[\"codC\"]].code !== \"\" ? (\"&causeOfDeathCodeC=\" + causeOfDeaths[formMapping.dataElements[\"codC\"]].code.split(\",\").map( c => c.split(\" (\")[0] ).join(\",\")) : \"\")  \n      + (causeOfDeaths[formMapping.dataElements[\"codD\"]].code !== \"\" ? (\"&causeOfDeathCodeD=\" + causeOfDeaths[formMapping.dataElements[\"codD\"]].code.split(\",\").map( c => c.split(\" (\")[0] ).join(\",\")) : \"\")  \n      + (causeOfDeaths[formMapping.dataElements[\"codO\"]].code !== \"\" ? (\"&causeOfDeathCodeE=\" + causeOfDeaths[formMapping.dataElements[\"codO\"]].code.split(\",\").map( c => c.split(\" (\")[0] ).join(\",\")) : \"\") \n      + (\"&intervalA=\" + causeOfDeaths[formMapping.dataElements[\"codA\"]].code.split(\",\").map( c => c.split(\" (\")[1]?.replace(\")\",\"\") ?? \"\" ).join(\",\"))\n      + (causeOfDeaths[formMapping.dataElements[\"codB\"]].code !== \"\" ? (\"&intervalB=\" + causeOfDeaths[formMapping.dataElements[\"codB\"]].code.split(\",\").map( c => c.split(\" (\")[1]?.replace(\")\",\"\") ?? \"\" ).join(\",\")) : \"\") \n      + (causeOfDeaths[formMapping.dataElements[\"codC\"]].code !== \"\" ? (\"&intervalC=\" + causeOfDeaths[formMapping.dataElements[\"codC\"]].code.split(\",\").map( c => c.split(\" (\")[1]?.replace(\")\",\"\") ?? \"\" ).join(\",\")) : \"\")  \n      + (causeOfDeaths[formMapping.dataElements[\"codD\"]].code !== \"\" ? (\"&intervalD=\" + causeOfDeaths[formMapping.dataElements[\"codD\"]].code.split(\",\").map( c => c.split(\" (\")[1]?.replace(\")\",\"\") ?? \"\" ).join(\",\")) : \"\")  \n      + (causeOfDeaths[formMapping.dataElements[\"codO\"]].code !== \"\" ? (\"&intervalE=\" + causeOfDeaths[formMapping.dataElements[\"codO\"]].code.split(\",\").map( c => c.split(\" (\")[1]?.replace(\")\",\"\") ?? \"\" ).join(\",\")) : \"\") \n      + (currentEvent.dataValues[formMapping.dataElements[\"surgery\"]] && currentEvent.dataValues[formMapping.dataElements[\"surgery\"]] !== \"\" ? (\"&surgeryWasPerformed=\" + currentEvent.dataValues[formMapping.dataElements[\"surgery\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"surgery_date\"]] && currentEvent.dataValues[formMapping.dataElements[\"surgery_date\"]] !== \"\" ? (\"&surgeryDate=\" + currentEvent.dataValues[formMapping.dataElements[\"surgery_date\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"surgery_reason\"]] && currentEvent.dataValues[formMapping.dataElements[\"surgery_reason\"]] !== \"\" ? (\"&surgeryReason=\" + currentEvent.dataValues[formMapping.dataElements[\"surgery_reason\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"autopsy\"]] && currentEvent.dataValues[formMapping.dataElements[\"autopsy\"]] !== \"\" ? (\"&autopsyWasRequested=\" + currentEvent.dataValues[formMapping.dataElements[\"autopsy\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"autopsy_specified\"]] && currentEvent.dataValues[formMapping.dataElements[\"autopsy_specified\"]] !== \"\" ? (\"&autopsyFindings=\" + currentEvent.dataValues[formMapping.dataElements[\"autopsy_specified\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"mannerOfDeath\"]] && currentEvent.dataValues[formMapping.dataElements[\"mannerOfDeath\"]] !== \"\" ? (\"&mannerOfDeath=\" + currentEvent.dataValues[formMapping.dataElements[\"mannerOfDeath\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"dateOfInjury\"]] && currentEvent.dataValues[formMapping.dataElements[\"dateOfInjury\"]] !== \"\" ? (\"&mannerOfDeathDateOfExternalCauseOrPoisoning=\" + currentEvent.dataValues[formMapping.dataElements[\"dateOfInjury\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"externalCause\"]] && currentEvent.dataValues[formMapping.dataElements[\"externalCause\"]] !== \"\" ? (\"&mannerOfDeathDescriptionExternalCause=\" + currentEvent.dataValues[formMapping.dataElements[\"externalCause\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"externalCause_place\"]] && currentEvent.dataValues[formMapping.dataElements[\"externalCause_place\"]] !== \"\" ? (\"&mannerOfDeathPlaceOfOccuranceExternalCause=\" + currentEvent.dataValues[formMapping.dataElements[\"externalCause_place\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"multiple_pregnancies\"]] && currentEvent.dataValues[formMapping.dataElements[\"multiple_pregnancies\"]] !== \"\" ? (\"&=fetalOrInfantDeathMultiplePregnancy\" + currentEvent.dataValues[formMapping.dataElements[\"multiple_pregnancies\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"stillborn\"]] && currentEvent.dataValues[formMapping.dataElements[\"stillborn\"]] !== \"\" ? (\"&=fetalOrInfantDeathStillborn\" + currentEvent.dataValues[formMapping.dataElements[\"stillborn\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"hours_newborn_survived\"]] && currentEvent.dataValues[formMapping.dataElements[\"hours_newborn_survived\"]] !== \"\" ? (\"&=fetalOrInfantDeathDeathWithin24h\" + currentEvent.dataValues[formMapping.dataElements[\"hours_newborn_survived\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"birth_weight\"]] && currentEvent.dataValues[formMapping.dataElements[\"birth_weight\"]] !== \"\" ? (\"&=fetalOrInfantDeathBirthWeight\" + currentEvent.dataValues[formMapping.dataElements[\"birth_weight\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"completedWeeks_pregnancy\"]] && currentEvent.dataValues[formMapping.dataElements[\"completedWeeks_pregnancy\"]] !== \"\" ? (\"&=fetalOrInfantDeathPregnancyWeeks\" + currentEvent.dataValues[formMapping.dataElements[\"completedWeeks_pregnancy\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"age_mother\"]] && currentEvent.dataValues[formMapping.dataElements[\"age_mother\"]] !== \"\" ? (\"&=fetalOrInfantDeathAgeMother\" + currentEvent.dataValues[formMapping.dataElements[\"age_mother\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"pregnancy_conditions\"]] && currentEvent.dataValues[formMapping.dataElements[\"pregnancy_conditions\"]] !== \"\" ? (\"&=fetalOrInfantDeathPerinatalDescription\" + currentEvent.dataValues[formMapping.dataElements[\"pregnancy_conditions\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"pregnancy_inLastYear\"]] && currentEvent.dataValues[formMapping.dataElements[\"pregnancy_inLastYear\"]] !== \"\" ? (\"&=maternalDeathWasPregnant\" + currentEvent.dataValues[formMapping.dataElements[\"pregnancy_inLastYear\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"time_from_pregnancy\"]] && currentEvent.dataValues[formMapping.dataElements[\"time_from_pregnancy\"]] !== \"\" ? (\"&=maternalDeathTimeFromPregnancy\" + currentEvent.dataValues[formMapping.dataElements[\"time_from_pregnancy\"]]) : \"\")\n      + (currentEvent.dataValues[formMapping.dataElements[\"pregnancy_contributed_to_death\"]] && currentEvent.dataValues[formMapping.dataElements[\"pregnancy_contributed_to_death\"]] !== \"\" ? (\"&=maternalDeathPregnancyContribute\" + currentEvent.dataValues[formMapping.dataElements[\"pregnancy_contributed_to_death\"]]) : \"\");\n    const result = await fetch(icdApiUrl, {\n      headers: headers\n    })\n    .then((result) => {\n      return result.json();\n    })\n    .catch((err) => {\n      return err;\n    });\n    const underlyingCode = result.stemCode;\n\n    if ( underlyingCode !== \"\" ) {\n      const cods = {\n        [formMapping.dataElements[\"codA\"]]: {\n          ...causeOfDeaths[formMapping.dataElements[\"codA\"]],\n          underlying: causeOfDeaths[formMapping.dataElements[\"codA\"]].code.includes(underlyingCode),\n        },\n        [formMapping.dataElements[\"codB\"]]: {\n          ...causeOfDeaths[formMapping.dataElements[\"codB\"]],\n          underlying: causeOfDeaths[formMapping.dataElements[\"codB\"]].code.includes(underlyingCode),\n        },\n        [formMapping.dataElements[\"codC\"]]: {\n          ...causeOfDeaths[formMapping.dataElements[\"codC\"]],\n          underlying: causeOfDeaths[formMapping.dataElements[\"codC\"]].code.includes(underlyingCode),\n        },\n        [formMapping.dataElements[\"codD\"]]: {\n          ...causeOfDeaths[formMapping.dataElements[\"codD\"]],\n          underlying: causeOfDeaths[formMapping.dataElements[\"codD\"]].code.includes(underlyingCode),\n        },\n        [formMapping.dataElements[\"codO\"]]: {\n          ...causeOfDeaths[formMapping.dataElements[\"codO\"]],\n          underlying: causeOfDeaths[formMapping.dataElements[\"codO\"]].code.includes(underlyingCode),\n        }\n      };\n\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"codA_underlying\"], cods[formMapping.dataElements[\"codA\"]].underlying);\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"codB_underlying\"], cods[formMapping.dataElements[\"codB\"]].underlying);\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"codC_underlying\"], cods[formMapping.dataElements[\"codC\"]].underlying);\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"codD_underlying\"], cods[formMapping.dataElements[\"codD\"]].underlying);\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"codO_underlying\"], cods[formMapping.dataElements[\"codO\"]].underlying);\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_report\"], result.report);\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_warning\"], result.warning ?? \"\");\n      // mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_report\"], result.UCComputed?.Report ?? result.UCComputed?.Errors ?? \"\");\n\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_processed_by\"], \"DORIS\");\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"reason_of_manual_COD_selection\"], \"\"); // For clearing the value of reason for the manual selection\n\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_DORIS\"], underlyingCode);\n\n      setUnderlyingResult(underlyingCode);\n      setCauseOfDeaths(cods);\n    }\n    else {\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_warning\"], result.warning ?? \"\");\n    }\n  }\n\n  // const getUcodResult = () => currentEvent && currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_report\"]] ? currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_report\"]] : t(\"note_WHO_digital_open_rule_integrated_cause_of_death_selection_Doris\");\n\n\n  return (\n    <>\n      <Modal \n        style={{ top: 250 }}\n        closable={false}\n        title=\"Select underlying cause of death\" \n        open={underlyingModal} \n        footer={[\n          <Button \n            onClick={() => {\n              setUnderlyingModal(false);\n\n            }}\n            disabled={underlyingResult===\"\"}\n          >\n            Close\n          </Button>\n        ]}\n      >\n        <InputField\n          valueType=\"TEXT\"\n          valueSet={underlyingSelections}\n          value={underlyingResult}\n          change={selected => {\n            setUnderlyingResult(selected);\n          }}\n        />\n      </Modal>\n      <Modal\n        style={{ top: 250 }}\n        closable={false}\n        width={\"40%\"}\n        title={`${timeToDeath?.causeLabel} - Time from onset to death`}\n        open={timeToDeathModal}\n        footer={[\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              mutateDataValue(\n                currentEvent.event,\n                timeToDeath.causeId,\n                timeToDeath.timeInterval.reduce((accumulator, currentValue) => {\n                  return accumulator === \"\" ? `${currentValue.code} (${currentValue.time})` : `${accumulator},${currentValue.code} (${currentValue.time})`\n                }, \"\")\n              );\n              causeOfDeaths[timeToDeath.causeId].code = timeToDeath.timeInterval.reduce((accumulator, currentValue) => {\n                return accumulator === \"\" ? `${currentValue.code} (${currentValue.time})` : `${accumulator},${currentValue.code} (${currentValue.time})`\n              }, \"\");\n              setCauseOfDeaths({...causeOfDeaths});\n              setTimeToDeathModal(false);\n            }}\n            style={{ width: \"100px\"}}\n          >\n            Set\n          </Button>,\n          <Button\n            onClick={() => {\n              setTimeToDeathModal(false);\n            }}\n            style={{ width: \"100px\"}}\n          >\n            Close\n          </Button>\n        ]}\n      >\n        <table width={\"100%\"}>\n        {\n          currentEvent && timeToDeath && timeToDeath.timeInterval.map( ({code, time}) => { \n              // const selection = code.split(\" (\")[0];\n              // let selectionTime = code.split(\" (\")[1]?.replace(\")\",\"\");\n\n              return <tr>\n              <td width={\"50%\"}>{`${code} - ${icd11Options.find((option) => option.code === code)?.name}`}</td>\n              <td width={\"25%\"}>\n                <InputField \n                  valueSet={[\n                    {\n                      label: \"Years\",\n                      value: \"year\"\n                    },\n                    {\n                      label: \"Months\",\n                      value: \"month\"\n                    },\n                    {\n                      label: \"Weeks\",\n                      value: \"week\"\n                    },\n                    {\n                      label: \"Days\",\n                      value: \"day\"\n                    },\n                    {\n                      label: \"Hours\",\n                      value: \"hour\"\n                    },\n                    {\n                      label: \"Minutes\",\n                      value: \"minute\"\n                    },\n                    {\n                      label: \"Seconds\",\n                      value: \"second\"\n                    },\n                    {\n                      label: \"Unknown\",\n                      value: \"unknown\"\n                    }\n                  ]}\n                  placeholder=\"Time unit\"\n                  valueType=\"TEXT\"\n                  change={ value => {\n                    setTimeToDeath({\n                      ...timeToDeath,\n                      timeInterval: timeToDeath.timeInterval.map( t => {\n                        if (t.code === code) {\n                          return {\n                            ...t,\n                            time: value === \"unknown\" ? undefined : \n                              value === \"year\" ? `P${!time ? \"\" : time.substring(0,2) === \"PT\" ? time.substring(2,time.length - 1) : time.substring(1,time.length - 1)}Y` : \n                              value === \"month\" ? `P${!time ? \"\" : time.substring(0,2) === \"PT\" ? time.substring(2,time.length - 1) : time.substring(1,time.length - 1)}M` : \n                              value === \"week\" ? `P${!time ? \"\" : time.substring(0,2) === \"PT\" ? time.substring(2,time.length - 1) : time.substring(1,time.length - 1)}W` : \n                              value === \"day\" ? `P${!time ? \"\" : time.substring(0,2) === \"PT\" ? time.substring(2,time.length - 1) : time.substring(1,time.length - 1)}D` : \n                              value === \"hour\" ? `PT${!time ? \"\" : time.substring(0,2) === \"PT\" ? time.substring(2,time.length - 1) : time.substring(1,time.length - 1)}H` : \n                              value === \"minute\" ? `PT${!time ? \"\" : time.substring(0,2) === \"PT\" ? time.substring(2,time.length - 1) : time.substring(1,time.length - 1)}M` : \n                              value === \"second\" ? `PT${!time ? \"\" : time.substring(0,2) === \"PT\" ? time.substring(2,time.length - 1) : time.substring(1,time.length - 1)}S` : \n                              undefined\n                          }\n                        }\n                        else return t;\n                      })\n                    })\n                  }}\n                  value={!time ? \"unknown\" : time[time.length - 1] === \"Y\" ? \"year\" : time[time.length - 1] === \"W\" ? \"week\" : time[time.length - 1] === \"D\" ? \"day\" : time[time.length - 1] === \"H\" ? \"hour\" : time[time.length - 1] === \"S\" ? \"second\" : time[time.length - 1] === \"M\" ? (time.substring(0,2) === \"PT\" ? \"minute\" : \"month\") : \"unknown\"}\n                />\n              </td>\n              <td width={\"25%\"}>\n                <InputField \n                  valueType=\"INTEGER_POSITIVE\"\n                  placeholder=\"Time interval\"\n                  change={ value => {\n                    setTimeToDeath({\n                      ...timeToDeath,\n                      timeInterval: timeToDeath.timeInterval.map( t => {\n                        if (t.code === code) {\n                          return {\n                            ...t,\n                            time: !time ? undefined :  time.substring(0,2) === \"PT\" ? `PT${value}${time[time.length - 1]}` : `P${value}${time[time.length - 1]}`\n                          }\n                        }\n                        else return t;\n                      })\n                    })\n                  }}\n                  value={!time ? \"\" : time.substring(0,2) === \"PT\" ? time.substring(2,time.length - 1) : time.substring(1,time.length - 1)}\n                />\n              </td>\n            </tr>\n          })\n        }\n        </table>\n      </Modal>\n      <Icd11Tool\n        visible={icdTool}\n        setVisible={setIcdTool}\n        onSelect={(cod) => {\n          const selectedCod = {\n            code: cod.code,\n            // label: cod.title\n            //   .replace(/<em class='found'>/g, \"\")\n            //   .replace(/<em class='nonwbe'>/g, \"\")\n            //   .replace(/<[/]em>/g, \"\"),\n            uri: cod.foundationUri\n          };\n          causeOfDeaths[activeCauseOfDeath.code].code = causeOfDeaths[activeCauseOfDeath.code].code === \"\" ? selectedCod.code : `${causeOfDeaths[activeCauseOfDeath.code].code},${selectedCod.code}`;\n          // causeOfDeaths[activeCauseOfDeath.code].label = selectedCod.label;\n          causeOfDeaths[formMapping.dataElements[\"codA\"]].underlying = false;\n          causeOfDeaths[formMapping.dataElements[\"codB\"]].underlying = false;\n          causeOfDeaths[formMapping.dataElements[\"codC\"]].underlying = false;\n          causeOfDeaths[formMapping.dataElements[\"codD\"]].underlying = false;\n          causeOfDeaths[formMapping.dataElements[\"codO\"]].underlying = false;\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"codA_underlying\"], false);\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"codB_underlying\"], false);\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"codC_underlying\"], false);\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"codD_underlying\"], false);\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"codO_underlying\"], false);\n          causeOfDeaths[activeCauseOfDeath.code].entityId = causeOfDeaths[activeCauseOfDeath.code].entityId === \"\" ? selectedCod.uri.split(\"/\")[selectedCod.uri.split(\"/\").length - 1] : `${causeOfDeaths[activeCauseOfDeath.code].entityId},${selectedCod.uri.split(\"/\")[selectedCod.uri.split(\"/\").length - 1]}`;\n          setValueIcdField(causeOfDeaths);\n          setCauseOfDeaths({ ...causeOfDeaths });\n          setUnderlyingResult(\"\");\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_processed_by\"], \"DORIS\");\n        }}\n        defaultValue={{\n          // title: (currentEvent && currentEvent.dataValues[activeCauseOfDeath.label]) || \"\",\n          // code: (currentEvent && currentEvent.dataValues[activeCauseOfDeath.code]) || \"\"\n          title: \"\",\n          code: \"\"\n        }}\n        // freeText={(currentEvent && currentEvent.dataValues[activeCauseOfDeath.freeText]) || \"\"}\n      />\n      <div>\n        {/* <Tabs defaultActiveKey=\"1\" type=\"card\">\n          <TabPane tab=\"Frame A\" key=\"a\"> */}\n            {/* <div className=\"tab-container\"> */}\n              <div className=\"stage-section\">\n                <div className=\"stage-section-title\">{t(\"medicalData\")}</div>\n                <div className=\"stage-section-content\">\n                  <table className=\"medical-data-table\">\n                    <tbody>\n                      <tr>\n                        <td\n                          colSpan=\"3\"\n                          style={{\n                            fontWeight: \"bold\",\n                            textAlign: \"left\",\n                            backgroundColor: \"#f5f5f5\"\n                          }}\n                        >\n                        {\n                          t(\"reasonLeadingToDeath\")\n                        }\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style={{ width: \"90%\" }}>\n                        {t(\"causeOfDeath\")}\n                        </td>\n                        {/* <td>{t(\"timeFromOnsetToDeath\")}</td> */}\n                        <td>{t(\"underlying\")}</td>\n                      </tr>\n                      <tr>\n                        {/* <td>{t(\"immediate\")}</td>\n                        <td>A</td> */}\n                        <td>\n                          <div className=\"two-fields-container\">\n                            {renderInputField(formMapping.dataElements[\"codA_other_name\"],undefined,\"A (Free Text)\")}\n                            {renderCauseOfDeathsInputField(\n                              formMapping.dataElements[\"codA\"],\n                              // formMapping.dataElements[\"codA_name\"],\n                              formMapping.dataElements[\"codA_entityId\"],\n                              formMapping.dataElements[\"codA_underlying\"],\n                              formMapping.dataElements[\"codA_other_name\"]\n                            )}\n                            <div\n                              style={{\n                                width: \"20%\",\n                                margin: \"5px\",\n                              }}\n                            ><Tooltip className={\"custom-tooltip\"} title={t(\"timeFromOnsetToDeath\")}><Button\n                              style={{\n                                width: \"100%\",\n                              }}\n                              disabled={!currentEvent?.dataValues[formMapping.dataElements[\"codA\"]] || enrollmentStatus === \"COMPLETED\"}\n                              onClick={ () => {\n                                setTimeToDeathModal(true);\n                                setTimeToDeath({\n                                  causeId: formMapping.dataElements[\"codA\"],\n                                  causeLabel: \"Cause of Death A\",\n                                  timeInterval: currentEvent.dataValues[formMapping.dataElements[\"codA\"]].split(\",\").map( codeSelection => { \n                                    return {\n                                      code: codeSelection.split(\" (\")[0],\n                                      time: codeSelection.split(\" (\")[1]?.replace(\")\",\"\")\n                                    }\n                                  })\n                                });\n                              }}\n                            ><span\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                                display: \"inline-block\"\n                              }}\n                            >{t(\"timeFromOnsetToDeath\")}</span></Button></Tooltip></div>\n                          </div>\n                        </td>\n                        {/* <td>\n                          <div className=\"two-fields-container\">\n                            {renderInputField(formMapping.dataElements[\"codA_time\"])}\n                            {renderInputField(formMapping.dataElements[\"codA_periodType\"])}\n                          </div>\n                        </td> */}\n                        <td>{renderInputField(formMapping.dataElements[\"codA_underlying\"], \"underlying\")}</td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <div className=\"two-fields-container\">\n                            {renderInputField(formMapping.dataElements[\"codB_other_name\"],undefined,\"B (Free Text)\")}\n                            {renderCauseOfDeathsInputField(\n                              formMapping.dataElements[\"codB\"],\n                              // formMapping.dataElements[\"codB_name\"],\n                              formMapping.dataElements[\"codB_entityId\"],\n                              formMapping.dataElements[\"codB_underlying\"],\n                              formMapping.dataElements[\"codB_other_name\"]\n                            )}\n                            <div\n                              style={{\n                                width: \"20%\",\n                                margin: \"5px\",\n                              }}\n                            ><Tooltip className={\"custom-tooltip\"} title={t(\"timeFromOnsetToDeath\")}><Button\n                              style={{\n                                width: \"100%\",\n                              }}\n                              disabled={!currentEvent?.dataValues[formMapping.dataElements[\"codB\"]] || enrollmentStatus === \"COMPLETED\"}\n                              onClick={ () => {\n                                setTimeToDeathModal(true);\n                                setTimeToDeath({\n                                  causeId: formMapping.dataElements[\"codB\"],\n                                  causeLabel: \"Cause of Death B\",\n                                  timeInterval: currentEvent.dataValues[formMapping.dataElements[\"codB\"]].split(\",\").map( codeSelection => { \n                                    return {\n                                      code: codeSelection.split(\" (\")[0],\n                                      time: codeSelection.split(\" (\")[1]?.replace(\")\",\"\")\n                                    }\n                                  })\n                                });\n                              }}\n                            ><span\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                                display: \"inline-block\"\n                              }}\n                          >{t(\"timeFromOnsetToDeath\")}</span></Button></Tooltip></div>\n                          </div>\n                        </td>\n                        {/* <td>\n                          <div className=\"two-fields-container\">\n                            {renderInputField(formMapping.dataElements[\"codB_time\"])}\n                            {renderInputField(formMapping.dataElements[\"codB_periodType\"])}\n                          </div>\n                        </td> */}\n                        <td>{renderInputField(formMapping.dataElements[\"codB_underlying\"], \"underlying\")}</td>\n                      </tr>\n                      <tr>\n                        {/* <td>{t(\"dueTo\")}</td>\n                        <td>C</td> */}\n                        <td>\n                          <div className=\"two-fields-container\">\n                            {renderInputField(formMapping.dataElements[\"codC_other_name\"],undefined,\"C (Free Text)\")}\n                            {/* {renderInputField(formMapping.dataElements[\"codC_other_name\"])} */}\n                            {renderCauseOfDeathsInputField(\n                              formMapping.dataElements[\"codC\"],\n                              // formMapping.dataElements[\"codC_name\"],\n                              formMapping.dataElements[\"codC_entityId\"],\n                              formMapping.dataElements[\"codC_underlying\"],\n                              formMapping.dataElements[\"codC_other_name\"]\n                            )}\n                            <div\n                              style={{\n                                width: \"20%\",\n                                margin: \"5px\",\n                              }}\n                            ><Tooltip className={\"custom-tooltip\"} title={t(\"timeFromOnsetToDeath\")}><Button\n                              style={{\n                                width: \"100%\",\n                              }}\n                              disabled={!currentEvent?.dataValues[formMapping.dataElements[\"codC\"]] || enrollmentStatus === \"COMPLETED\"}\n                              onClick={ () => {\n                                setTimeToDeathModal(true);\n                                setTimeToDeath({\n                                  causeId: formMapping.dataElements[\"codC\"],\n                                  causeLabel: \"Cause of Death C\",\n                                  timeInterval: currentEvent.dataValues[formMapping.dataElements[\"codC\"]].split(\",\").map( codeSelection => { \n                                    return {\n                                      code: codeSelection.split(\" (\")[0],\n                                      time: codeSelection.split(\" (\")[1]?.replace(\")\",\"\")\n                                    }\n                                  })\n                                });\n                              }}\n                            ><span\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                                display: \"inline-block\"\n                              }}\n                          >{t(\"timeFromOnsetToDeath\")}</span></Button></Tooltip></div>\n                          </div>\n                        </td>\n                        {/* <td>\n                          <div className=\"two-fields-container\">\n                            {renderInputField(formMapping.dataElements[\"codC_time\"])}\n                            {renderInputField(formMapping.dataElements[\"codC_periodType\"])}\n                          </div>\n                        </td> */}\n                        <td>{renderInputField(formMapping.dataElements[\"codC_underlying\"], \"underlying\")}</td>\n                      </tr>\n                      <tr>\n                        {/* <td>{t(\"dueTo\")}</td>\n                        <td>D</td> */}\n                        <td>\n                          <div className=\"two-fields-container\">\n                            {renderInputField(formMapping.dataElements[\"codD_other_name\"],undefined,\"D (Free Text)\")}\n                            {/* {renderInputField(formMapping.dataElements[\"codD_other_name\"])} */}\n                            {renderCauseOfDeathsInputField(\n                              formMapping.dataElements[\"codD\"],\n                              // formMapping.dataElements[\"codD_name\"],\n                              formMapping.dataElements[\"codD_entityId\"],\n                              formMapping.dataElements[\"codD_underlying\"],\n                              formMapping.dataElements[\"codD_other_name\"]\n                            )}\n                            <div\n                              style={{\n                                width: \"20%\",\n                                margin: \"5px\",\n                              }}\n                            ><Tooltip className={\"custom-tooltip\"} title={t(\"timeFromOnsetToDeath\")}><Button\n                              style={{\n                                width: \"100%\",\n                              }}\n                              disabled={!currentEvent?.dataValues[formMapping.dataElements[\"codD\"]] || enrollmentStatus === \"COMPLETED\"}\n                              onClick={ () => {\n                                setTimeToDeathModal(true);\n                                setTimeToDeath({\n                                  causeId: formMapping.dataElements[\"codD\"],\n                                  causeLabel: \"Cause of Death D\",\n                                  timeInterval: currentEvent.dataValues[formMapping.dataElements[\"codD\"]].split(\",\").map( codeSelection => { \n                                    return {\n                                      code: codeSelection.split(\" (\")[0],\n                                      time: codeSelection.split(\" (\")[1]?.replace(\")\",\"\")\n                                    }\n                                  })\n                                });\n                              }}\n                            ><span\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                                display: \"inline-block\"\n                              }}\n                            >{t(\"timeFromOnsetToDeath\")}</span></Button></Tooltip></div>\n                          </div>\n                        </td>\n                        {/* <td>\n                          <div className=\"two-fields-container\">\n                            {renderInputField(formMapping.dataElements[\"codD_time\"])}\n                            {renderInputField(formMapping.dataElements[\"codD_periodType\"])}\n                          </div>\n                        </td> */}\n                        <td>{renderInputField(formMapping.dataElements[\"codD_underlying\"], \"underlying\")}</td>\n                      </tr>\n                      <tr>\n                        {/* <td>{t(\"dueTo\")}</td>\n                        <td>D</td> */}\n                        <td>\n                          <div className=\"two-fields-container\">\n                            {renderInputField(formMapping.dataElements[\"codO_other_name\"],undefined,\"Other significant conditions contributing to death\")}\n                            {/* {renderInputField(formMapping.dataElements[\"codD_other_name\"])} */}\n                            {renderCauseOfDeathsInputField(\n                              formMapping.dataElements[\"codO\"],\n                              // formMapping.dataElements[\"codO_name\"],\n                              formMapping.dataElements[\"codO_entityId\"],\n                              formMapping.dataElements[\"codO_underlying\"],\n                              formMapping.dataElements[\"codO_other_name\"]\n                            )}\n                            <div\n                              style={{\n                                width: \"20%\",\n                                margin: \"5px\",\n                              }}\n                            ><Tooltip className={\"custom-tooltip\"} title={t(\"timeFromOnsetToDeath\")}><Button\n                              style={{\n                                width: \"100%\",\n                              }}\n                              disabled={!currentEvent?.dataValues[formMapping.dataElements[\"codO\"]] || enrollmentStatus === \"COMPLETED\"}\n                              onClick={ () => {\n                                setTimeToDeathModal(true);\n                                setTimeToDeath({\n                                  causeId: formMapping.dataElements[\"codO\"],\n                                  causeLabel: \"Other Cause of Death\",\n                                  timeInterval: currentEvent.dataValues[formMapping.dataElements[\"codO\"]].split(\",\").map( codeSelection => { \n                                    return {\n                                      code: codeSelection.split(\" (\")[0],\n                                      time: codeSelection.split(\" (\")[1]?.replace(\")\",\"\")\n                                    }\n                                  })\n                                });\n                              }}\n                            ><span\n                              style={{\n                                width: \"100%\",\n                                whiteSpace: \"nowrap\",\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                                display: \"inline-block\"\n                              }}\n                            >{t(\"timeFromOnsetToDeath\")}</span></Button></Tooltip></div>\n                          </div>\n                        </td>\n                        {/* <td>\n                          <div className=\"two-fields-container\">\n                            {renderInputField(formMapping.dataElements[\"codO_time\"])}\n                            {renderInputField(formMapping.dataElements[\"codO_periodType\"])}\n                          </div>\n                        </td> */}\n                        <td>{renderInputField(formMapping.dataElements[\"codO_underlying\"], \"underlying\")}</td>\n                      </tr>\n                      {/* <tr>\n                        <td\n                          colSpan=\"5\"\n                          style={{\n                            fontWeight: \"bold\",\n                            textAlign: \"left\",\n                            backgroundColor: \"#f5f5f5\"\n                          }}\n                        >\n                        {\n                          t(\"otherReasonLeadingToDeath\")\n                        }\n                        </td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"5\">{renderInputField(formMapping.dataElements[\"codOther\"])}</td>\n                      </tr> */}\n\n                      <tr>\n                        <td\n                          // colSpan=\"2\"\n                          style={{\n                            // fontWeight: \"bold\",\n                            backgroundColor: \"#f5f5f5\",\n                            textAlign: \"right\",\n                          }}>\n                          <strong>Underlying Cause of Death processed by:</strong> </td>\n                        <td\n                          style={{\n                            // fontWeight: \"bold\",\n                            backgroundColor: \"#f5f5f5\"\n                          }}\n                        >\n                          {renderInputField(formMapping.dataElements[\"underlyingCOD_processed_by\"])}\n                        </td>\n                      </tr>\n                      <tr>\n                      <td\n                          // colSpan=\"2\"\n                          style={{\n                            // fontWeight: \"bold\",\n                            textAlign: \"right\",\n                            backgroundColor: \"#f5f5f5\"\n                          }}\n                        >\n                          <strong>DORIS tool:</strong>\n                        </td>\n                        <td\n                          style={{\n                            backgroundColor: \"#f5f5f5\"\n                          }}\n                        >\n                          <Button\n                            onClick={() => {\n                              detectUnderlyingCauseOfDeath();\n                            }}\n                            disabled={(currentEvent \n                              && currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_processed_by\"]] \n                              && currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_processed_by\"]] === \"Manual\") || enrollmentStatus === \"COMPLETED\"}\n                          > \n                          {t(\"compute\")}\n                          </Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td\n                          colSpan=\"2\"\n                          style={{\n                            // fontWeight: \"bold\",\n                            textAlign: \"right\",\n                            backgroundColor: \"#f5f5f5\"\n                          }}\n                        >\n                          Reason for Manual Code: \n                          {renderInputField(formMapping.dataElements[\"reason_of_manual_COD_selection\"])}\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n              {/* <div className=\"stage-section\">\n                <div className=\"stage-section-title\">{t(\"results\")}</div>\n                <div className=\"stage-section-content\">\n                  <table className=\"results-table\">\n                    <tbody>\n                      <tr>\n                        <td>{t(\"icd11\")}</td>\n                        <td className=\"unselectable-field\">\n                          {renderInputField(formMapping.dataElements[\"underlyingCOD_code\"])}\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>{t(\"underlyingCOD\")}</td>\n                        <td className=\"unselectable-field\">\n                          {renderInputField(formMapping.dataElements[\"underlyingCOD\"])}\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>{t(\"icd11Chapter\")}</td>\n                        <td className=\"unselectable-field\">\n                          {renderInputField(formMapping.dataElements[\"underlyingCOD_chapter\"])}\n                        </td>\n                      </tr>\n                      <tr hidden=\"hidden\">\n                        <td>{t(\"icd11Grouping\")}</td>\n                        <td className=\"unselectable-field\">\n                          {renderInputField(formMapping.dataElements[\"underlyingCOD_group\"])}\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                  <div className=\"results-compute\">\n                    <p>\n                      <Button onClick={() => detectUnderlyingCauseOfDeath()}>{\n                        t(\"compute\")\n                      }</Button> \n                    </p>\n                    <p>\n                      <Button onClick={() => detectUnderlyingCauseOfDeath()}>{\n                        t(\"compute\")\n                      }</Button> \n                    </p>\n                    <div><pre>{getUcodResult()}</pre></div>\n                  </div>\n                </div>\n              </div> */}\n              {formMapping.otherSections.frameA && formMapping.otherSections.frameA.map( section => renderOtherSection(section) )}\n            {/* </div> */}\n          {/* </TabPane>\n          <TabPane tab=\"Frame B\" key=\"b\"> */}\n            {/* <div className=\"tab-container\"> */}\n              {formMapping.sections.find(({name}) => name === \"Surgery\") && (<div className=\"stage-section\">\n                <div className=\"stage-section-title\">{t(\"surgery\")}</div>\n                <div className=\"stage-section-content\">\n                  <table className=\"surgery-table\">\n                    <tbody>\n                      <tr>\n                        <td>{t(\"surgeryWithin4months\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"surgery\"])}</td>\n                        <td>{t(\"surgeryDate\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"surgery_date\"])}</td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"1\">\n                        {\n                          t(\"surgeryReason\")\n                        }\n                        </td>\n                        <td colSpan=\"3\">{renderInputField(formMapping.dataElements[\"surgery_reason\"])}</td>\n                      </tr>\n                      <tr>\n                        <td>{t(\"autopsy\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"autopsy\"])}</td>\n                        <td>\n                        {\n                          t(\"findings\")\n                        }\n                        </td>\n                        <td>{renderInputField(formMapping.dataElements[\"autopsy_specified\"])}</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>)}\n              {formMapping.sections.find(({name}) => name === \"Manner of death\") && (<div className=\"stage-section\">\n                <div className=\"stage-section-title\">{t(\"mannerOfDeath\")}</div>\n                <div className=\"stage-section-content\">\n                  <table className=\"manner-death-table\">\n                    <tbody>\n                      <tr>\n                        <td>{t(\"mannerOfDeath\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"mannerOfDeath\"])}</td>\n                      </tr>\n                      <tr>\n                        <td>{t(\"posisoning\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"dateOfInjury\"])}</td>\n                      </tr>\n                      <tr>\n                        <td>{t(\"describe\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"externalCause\"])}</td>\n                      </tr>\n                      <tr>\n                        <td>{t(\"occurrencePlace\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"externalCause_place\"])}</td>\n                      </tr>\n                      <tr>\n                        <td>{t(\"occurrenceSpecifyPlace\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"externalCause_specifiedPlace\"])}</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>)}\n              {(formMapping.sections.find(({name}) => name === \"Fetal or infant death\") && isShowFetalOrInfantDeath()) && (<div className=\"stage-section\">\n                <div className=\"stage-section-title\">{t(\"fetalOrInfantDeath\")}</div>\n                <div className=\"stage-section-content\">\n                  <table className=\"infant-death-table\">\n                    <tbody>\n                      <tr>\n                        <td>{t(\"pregnant\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"multiple_pregnancies\"])}</td>\n                        <td>{t(\"stillborn\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"stillborn\"])}</td>\n                      </tr>\n                      <tr>\n                        <td>{t(\"hoursSurvived\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"hours_newborn_survived\"])}</td>\n                        <td>{t(\"birthWeight\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"birth_weight\"])}</td>\n                      </tr>\n                      <tr>\n                        <td>{t(\"pregnantWeeks\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"completedWeeks_pregnancy\"])}</td>\n                        <td>{t(\"motherAge\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"age_mother\"])}</td>\n                      </tr>\n                      <tr>\n                        <td colSpan=\"1\">{t(\"perinatal\")}</td>\n                        <td colSpan=\"3\">{renderInputField(formMapping.dataElements[\"pregnancy_conditions\"])}</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>)}\n              {(formMapping.sections.find(({name}) => name === \"Maternal death\") && isShowMaternalDeath()) && (<div className=\"stage-section\">\n                <div className=\"stage-section-title\">{t(\"maternal\")}</div>\n                <div className=\"stage-section-content\">\n                  <table className=\"maternal-death-table\">\n                    <tbody>\n                      <tr>\n                        <td>{t(\"pregnancyLastYear\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"pregnancy_inLastYear\"])}</td>\n                      </tr>\n                      <tr>\n                        <td>{t(\"timePregnancy\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"time_from_pregnancy\"])}</td>\n                      </tr>\n                      <tr>\n                        <td>{t(\"pregnancyToDeath\")}</td>\n                        <td>{renderInputField(formMapping.dataElements[\"pregnancy_contributed_to_death\"])}</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>)}\n              {formMapping.otherSections.frameB && formMapping.otherSections.frameB.map( section => renderOtherSection(section) )}\n              {formMapping.otherSections.form && formMapping.otherSections.form.map( section => renderOtherSection(section) )}\n            {/* </div> */}\n          {/* </TabPane>\n        </Tabs> */}\n        {/* <div className=\"stage-save-button-container\">\n          <ButtonGroup>\n            <Button\n              type=\"primary\"\n              onClick={async () => {\n                setLoading(true);\n                const { currentEvents } = generateDhis2Payload(data, programMetadata);\n                await dataApi.pushEvents({ events: currentEvents });\n\n                // Dirty Check\n                mutateEvent(currentEvents[0].event,\"isDirty\",false);\n\n                // Notification\n                setLoading(false);\n                message.success(\"Saved Successfully!\");\n              }}\n            >\n            {\n              t(\"save\")\n            }\n            </Button>\n            <Button\n              onClick={async () => {\n                setLoading(true);\n                const { currentEvents } = generateDhis2Payload(data, programMetadata);\n                mutateEvent(currentEvents[0].event,\"dataValues\",{});\n                setLoading(false);\n              }}\n            >{\n              t(\"clear\")\n            }</Button>\n          </ButtonGroup>\n        </div> */}\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    metadata: state.metadata,\n    data: state.data\n  };\n};\nconst mapDispatchToProps = { mutateEvent, mutateDataValue, initNewEvent };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Stage);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Form/Profile.js",["506","507","508","509"],"import { useEffect } from \"react\";\nimport InputField from \"../InputField\";\nimport { Col, Row, message } from \"antd\";\nimport moment from \"moment\";\n/* REDUX */\nimport { connect } from \"react-redux\";\nimport {\n  mutateTei,\n  mutateAttribute,\n  mutateEnrollment,\n  mutateEvent,\n} from \"../../redux/actions/data\";\n\nimport { useTranslation } from \"react-i18next\";\n\n/*       */\nimport { Hooks } from \"tracker-capture-app-core\";\n\nconst { useApi } = Hooks;\nconst Profile = ({\n  mutateAttribute,\n  mutateEnrollment,\n  mutateEvent,\n  metadata,\n  data,\n}) => {\n  const { t } = useTranslation();\n  const { metadataApi } = useApi();\n  const { currentTei, currentEnrollment, currentEvents, currentEnrollment: { status: enrollmentStatus } } = data;\n  const { programMetadata, formMapping, fullnameOption } = metadata;\n\n  useEffect(() => {\n    if ( getTeaValue(formMapping.attributes[\"system_id\"]) === \"\" ) {\n      metadataApi.get(`/api/trackedEntityAttributes/${formMapping.attributes[\"system_id\"]}/generate.json`)\n      .then(res => {\n        mutateAttribute(formMapping.attributes[\"system_id\"], res.value);\n      });\n    }\n  }, [data])\n\n  useEffect(() => {\n    if ( currentEnrollment[\"enrollmentDate\"] && currentEnrollment[\"incidentDate\"] ) {\n      if ( currentEnrollment[\"enrollmentDate\"] < currentEnrollment[\"incidentDate\"] ) {\n        message.error(\"ERROR!!! Reported Date must be greater than incidentDate\")\n      }\n    }\n  }, [currentEnrollment[\"enrollmentDate\"],currentEnrollment[\"incidentDate\"]]);\n\n  const getTeaMetadata = (attribute) =>\n    programMetadata.trackedEntityAttributes.find(\n      (tea) => tea.id === attribute\n    );\n\n  const getTeaValue = (attribute) => currentTei.attributes[attribute] ? currentTei.attributes[attribute] : \"\";\n\n  const populateInputField = attribute => {\n    const tea = getTeaMetadata(attribute);\n    const value = getTeaValue(attribute);\n    \n    return (\n      <InputField\n        value={ value }\n        valueType={tea.valueType}\n        label={tea.displayFormName}\n        valueSet={tea.valueSet}\n        change={(value) => {\n          mutateAttribute(tea.id, value);\n        }}\n        disabled={attribute === formMapping.attributes[\"system_id\"] || enrollmentStatus === \"COMPLETED\"}\n        mandatory={tea.compulsory}\n      />\n    );\n  };\n\n  /*\n  const hasUnderlying = () => {\n    const currentEvent = data.currentEvents.find((event) => {\n      return event.programStage === formMapping.programStage;\n    });\n    return (\n      currentEvent &&\n      currentEvent.dataValues &&\n      currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD\"]]\n    );\n  };\n  */\n\n  const renderDOBGroup = () => {\n    const dob = getTeaMetadata(formMapping.attributes[\"dob\"]);\n    const age = getTeaMetadata(formMapping.attributes[\"age\"]);\n    const isEstimated = getTeaMetadata(formMapping.attributes[\"estimated_dob\"]);\n    const estimatedAge = getTeaMetadata(formMapping.attributes[\"estimated_age\"]);\n    const ageUnit = getTeaMetadata(formMapping.attributes[\"age_unit\"]);\n    return (\n      <>\n        <Row justify=\"start\" align=\"middle\">\n          <Col>\n            <InputField\n              value={getTeaValue(formMapping.attributes[\"estimated_dob\"])}\n              valueType={isEstimated.valueType}\n              // label={}\n              valueSet={isEstimated.valueSet}\n              change={(value) => {\n                mutateAttribute(isEstimated.id, value);\n              }}\n              disabled={enrollmentStatus === \"COMPLETED\"}\n            />\n          </Col>\n          <Col>\n            <div className=\"input-label\">{`${isEstimated.displayFormName}${isEstimated.compulsory ? \" *\" : \"\"}`}</div>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <InputField\n              value={getTeaValue(formMapping.attributes[\"dob\"])}\n              // valueType={dob.valueType}\n              valueType={\"DATE_WITH_RANGE\"}\n              label={dob.displayFormName}\n              valueSet={dob.valueSet}\n              change={(value) => {\n                console.log(value)\n                mutateAttribute(dob.id, value);\n                const age_cal = parseInt(moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").diff(\n                  moment(getTeaValue(formMapping.attributes[\"dob\"]), \"YYYY-MM-DD\"),\n                  \"years\",\n                  true\n                ));\n                if (age_cal > 150) \n                  message.error(\"Age can't be greater than 150\")\n                else if (age_cal < 0)\n                  message.error(\"Age can't be negative number\")\n                else if (!isNaN(age_cal)) {\n                  mutateAttribute(formMapping.attributes[\"age\"], age_cal + \"\");\n                  if (age_cal === 0) {\n                    const age_cal_in_months = parseInt(moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").diff(\n                      moment(getTeaValue(formMapping.attributes[\"dob\"]), \"YYYY-MM-DD\"),\n                      \"months\",\n                      true\n                    ));\n                    if (age_cal_in_months === 0) {\n                      const age_cal_in_days = parseInt(moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").diff(\n                        moment(getTeaValue(formMapping.attributes[\"dob\"]), \"YYYY-MM-DD\"),\n                        \"days\",\n                        true\n                      ));\n                      mutateAttribute(formMapping.attributes[\"estimated_age\"], age_cal_in_days + \"\");\n                      mutateAttribute(formMapping.attributes[\"age_unit\"], \"P_D\");\n                    }\n                    else {\n                      mutateAttribute(formMapping.attributes[\"estimated_age\"], age_cal_in_months + \"\");\n                      mutateAttribute(formMapping.attributes[\"age_unit\"], \"P_M\");\n                    }\n                  }\n                  else {\n                    mutateAttribute(formMapping.attributes[\"estimated_age\"], age_cal + \"\");\n                    mutateAttribute(formMapping.attributes[\"age_unit\"], \"P_YD\");\n                  }\n                }\n              }}\n              disabledDate={current => current && current >= moment().startOf('day')}\n              disabled={enrollmentStatus === \"COMPLETED\" || getTeaValue((formMapping.attributes[\"estimated_dob\"])) === true || getTeaValue((formMapping.attributes[\"estimated_dob\"])) === \"true\"}\n              mandatory={dob.compulsory}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={24} sm={12}>\n            <InputField\n              label={ageUnit.displayFormName}\n              valueType={ageUnit.valueType}\n              valueSet={ageUnit.valueSet}\n              value={getTeaValue(formMapping.attributes[\"age_unit\"])}\n              disabled={enrollmentStatus === \"COMPLETED\" || (getTeaValue((formMapping.attributes[\"estimated_dob\"])) !== true && getTeaValue((formMapping.attributes[\"estimated_dob\"])) !== \"true\")}\n              mandatory={ageUnit.compulsory}\n              change={(value) => {\n                mutateAttribute(ageUnit.id, value);\n                if ( getTeaValue(estimatedAge.id) !== \"\" ) {\n                  if (value === \"P_YD\") {\n                    mutateAttribute(age.id, getTeaValue(estimatedAge.id));\n                    if (currentEnrollment.incidentDate) {\n                      mutateAttribute(dob.id, moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").subtract(parseInt(getTeaValue(estimatedAge.id)), \"years\").format(\"YYYY-MM-DD\"));\n                    }\n                  } \n                  else if (value === \"P_M\") {\n                    mutateAttribute(age.id, \"0\");\n                    if (currentEnrollment.incidentDate) {\n                      mutateAttribute(dob.id, moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").subtract(parseInt(getTeaValue(estimatedAge.id)), \"months\").format(\"YYYY-MM-DD\"));\n                    }\n                  }\n                  else if (value === \"P_D\") {\n                    mutateAttribute(age.id, \"0\");\n                    if (currentEnrollment.incidentDate) {\n                      mutateAttribute(dob.id, moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").subtract(parseInt(getTeaValue(estimatedAge.id)), \"days\").format(\"YYYY-MM-DD\"));\n                    }\n                  }\n                  else {\n                    mutateAttribute(age.id, \"0\");\n                    if (currentEnrollment.incidentDate) {\n                      mutateAttribute(dob.id, currentEnrollment.incidentDate);\n                    }\n                  }\n                }\n              }}\n            />\n          </Col>\n          <Col xs={24} sm={12}>\n            <InputField\n              label={estimatedAge.displayFormName}\n              valueType={estimatedAge.valueType}\n              value={getTeaValue(formMapping.attributes[\"estimated_age\"])}\n              disabled={enrollmentStatus === \"COMPLETED\" || (getTeaValue((formMapping.attributes[\"estimated_dob\"])) !== true && getTeaValue((formMapping.attributes[\"estimated_dob\"])) !== \"true\")}\n              mandatory={estimatedAge.compulsory}\n              change={(value) => {\n                if (value > 0) {\n                  mutateAttribute(estimatedAge.id, value);\n                  if (getTeaValue(ageUnit.id) === \"P_YD\") {\n                    mutateAttribute(age.id, value);\n                    if (currentEnrollment.incidentDate) {\n                      mutateAttribute(dob.id, moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").subtract(parseInt(value), \"years\").format(\"YYYY-MM-DD\"));\n                    }\n                  }\n                  else if (getTeaValue(ageUnit.id) === \"P_M\") {\n                    mutateAttribute(age.id, \"0\");\n                    if (currentEnrollment.incidentDate) {\n                      mutateAttribute(dob.id, moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").subtract(parseInt(value), \"months\").format(\"YYYY-MM-DD\"));\n                    }\n                  }\n                  else if (getTeaValue(ageUnit.id) === \"P_D\") {\n                    mutateAttribute(age.id, \"0\");\n                    if (currentEnrollment.incidentDate) {\n                      mutateAttribute(dob.id, moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").subtract(parseInt(value), \"days\").format(\"YYYY-MM-DD\"));\n                    }\n                  }\n                  else {\n                    mutateAttribute(age.id, \"0\");\n                    if (currentEnrollment.incidentDate) {\n                      mutateAttribute(dob.id, currentEnrollment.incidentDate);\n                    }\n                  }\n                }\n              }}\n            />\n          </Col>\n        </Row>\n      </>\n    );\n  };\n\n  return (\n    <div>\n      <InputField\n        value={currentEnrollment.enrollmentDate || \"\"}\n        label={t(\"reportedDate\")}\n        valueType={\"DATE_WITH_RANGE\"}\n        disabledDate={current => current && current > moment().endOf('day')}\n        change={(value) => {\n          mutateEnrollment(\"enrollmentDate\", value);\n        }}\n        disabled={enrollmentStatus === \"COMPLETED\"}\n        mandatory={true}\n      />\n      <InputField\n        value={currentEnrollment.incidentDate || \"\"}\n        label={t(\"incidentDate\")}\n        valueType={\"DATE_WITH_RANGE\"}\n        disabledDate={current => current && current > moment().endOf('day')}\n        change={(value) => {\n          mutateEnrollment(\"incidentDate\", value);\n          currentEvents.forEach((event) => {\n            mutateEvent(event.event, \"eventDate\", value);\n            mutateEvent(event.event, \"dueDate\", value);\n          });\n          if ( \n            currentTei.attributes[formMapping.attributes[\"dob\"]]\n          ) {\n            console.log(\"calculate age\")\n            const age_cal = parseInt(moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").diff(\n              moment(getTeaValue(formMapping.attributes[\"dob\"]), \"YYYY-MM-DD\"),\n              \"years\",\n              true\n            ));\n            if (age_cal > 150) \n              message.error(\"Age can't be greater than 150\")\n            else if (age_cal < 0)\n              message.error(\"Age can't be negative number\")\n            else if (!isNaN(age_cal)) {\n              mutateAttribute(formMapping.attributes[\"age\"], age_cal + \"\");\n              if (age_cal === 0) {\n                const age_cal_in_months = parseInt(moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").diff(\n                  moment(getTeaValue(formMapping.attributes[\"dob\"]), \"YYYY-MM-DD\"),\n                  \"months\",\n                  true\n                ));\n                if (age_cal_in_months === 0) {\n                  const age_cal_in_days = parseInt(moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").diff(\n                    moment(getTeaValue(formMapping.attributes[\"dob\"]), \"YYYY-MM-DD\"),\n                    \"days\",\n                    true\n                  ));\n                  mutateAttribute(formMapping.attributes[\"estimated_age\"], age_cal_in_days + \"\");\n                  mutateAttribute(formMapping.attributes[\"age_unit\"], \"P_D\");\n                }\n                else {\n                  mutateAttribute(formMapping.attributes[\"estimated_age\"], age_cal_in_months + \"\");\n                  mutateAttribute(formMapping.attributes[\"age_unit\"], \"P_M\");\n                }\n              }\n              else {\n                mutateAttribute(formMapping.attributes[\"estimated_age\"], age_cal + \"\");\n                mutateAttribute(formMapping.attributes[\"age_unit\"], \"P_YD\");\n              }\n            }\n          }\n          else if (currentTei.attributes[formMapping.attributes[\"estimated_age\"]] && currentTei.attributes[formMapping.attributes[\"age_unit\"]]) {\n            if (getTeaValue(formMapping.attributes[\"age_unit\"]) === \"P_YD\") {\n              mutateAttribute(formMapping.attributes[\"age\"], getTeaValue(formMapping.attributes[\"estimated_age\"]));\n              if (currentEnrollment.incidentDate) {\n                mutateAttribute(formMapping.attributes[\"dob\"], moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").subtract(parseInt(getTeaValue(formMapping.attributes[\"estimated_age\"])), \"years\").format(\"YYYY-MM-DD\"));\n              }\n            }\n            else if (getTeaValue(formMapping.attributes[\"age_unit\"]) === \"P_M\") {\n              mutateAttribute(formMapping.attributes[\"age\"], 0);\n              if (currentEnrollment.incidentDate) {\n                mutateAttribute(formMapping.attributes[\"dob\"], moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").subtract(parseInt(getTeaValue(formMapping.attributes[\"estimated_age\"])), \"months\").format(\"YYYY-MM-DD\"));\n              }\n            }\n            else if (getTeaValue(formMapping.attributes[\"age_unit\"]) === \"P_D\") {\n              mutateAttribute(formMapping.attributes[\"age\"], 0);\n              if (currentEnrollment.incidentDate) {\n                mutateAttribute(formMapping.attributes[\"dob\"], moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").subtract(parseInt(getTeaValue(formMapping.attributes[\"estimated_age\"])), \"days\").format(\"YYYY-MM-DD\"));\n              }\n            }\n            else {\n              mutateAttribute(formMapping.attributes[\"age\"], 0);\n              if (currentEnrollment.incidentDate) {\n                mutateAttribute(formMapping.attributes[\"dob\"], currentEnrollment.incidentDate);\n              }\n            }\n          }\n        }}\n        disabled={enrollmentStatus === \"COMPLETED\"}\n        mandatory={true}\n      />\n      {/* {attributes\n        .slice(0, 3)\n        .map((attribute) => populateInputField(attribute))} */}\n      {populateInputField(formMapping.attributes[\"system_id\"])}\n      {fullnameOption !== \"noname\" && populateInputField(formMapping.attributes[\"given_name\"])}\n      {fullnameOption === \"firstmidlastname\" && populateInputField(formMapping.attributes[\"middle_name\"])}\n      {(fullnameOption !== \"noname\" && fullnameOption !== \"fullname\") && populateInputField(formMapping.attributes[\"family_name\"])}\n      {renderDOBGroup()}\n      {/* {attributes.slice(3).map((attribute) => populateInputField(attribute))} */}\n      {populateInputField(formMapping.attributes[\"sex\"])}\n      {populateInputField(formMapping.attributes[\"address\"])}\n\n\n      {/* For other attributes */}\n      {programMetadata.trackedEntityAttributes.filter( \n        ({id}) => !Object.values(formMapping.attributes).find( tea => tea === id ) \n      ).map( tea => populateInputField(tea.id) )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    metadata: state.metadata,\n    data: state.data,\n  };\n};\nconst mapDispatchToProps = {\n  mutateTei,\n  mutateAttribute,\n  mutateEnrollment,\n  mutateEvent,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Form/DeathCertificate.js",["510","511"],"import React, { useEffect, useState } from \"react\";\nimport { Modal, Button, Row, Col, Typography, Space } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { Hooks } from \"tracker-capture-app-core\";\nimport { convertPdfDoc2FileURL, fillPdf, showPage } from \"../../utils/certificate\";\nimport \"./certificate.css\";\nimport { CheckSquareFilled, CloseSquareFilled } from \"@ant-design/icons\";\n\nimport { useTranslation } from \"react-i18next\";\n\nconst { useApi } = Hooks;\n\nconst DeathCertificate = ({\n  data: { currentEvents, currentEnrollment, currentTei },\n  certificateTemplate,\n  customCertificateTemplate,\n  formMapping,\n  programMetadata,\n  open,\n  onCancel,\n  onLoading\n}) => {\n  const { metadataApi } = useApi();\n  const [pdfURL, setPdfURL] = useState(null);\n  const { t } = useTranslation();\n  const currentEvent = currentEvents.find((event) => {\n    return event.programStage === formMapping.programStage;\n  });\n  const isBoolean = val => (val === undefined) ? \"\"\n                                                  : (typeof val !== \"boolean\" ) ? val \n                                                    : (val) ? <CheckSquareFilled style={{ fontSize: 20, color: \"#1890ff\", }} /> \n                                                      : <CloseSquareFilled style={{ fontSize: 20, color: \"#d3d3d3\", }} />\n\n  const getVal_defaultCert = row => {\n    if (row.enrollment) {\n      return currentEnrollment[row.enrollment === \"orgUnit\" ? \"orgUnitName\" : row.enrollment];\n    } else if (row.trackedEntityAttribute) {\n      const foundTea = programMetadata.trackedEntityAttributes.find( tea => tea.id === row.trackedEntityAttribute );\n      return !foundTea.valueSet ? isBoolean(currentTei.attributes[row.trackedEntityAttribute]) \n        : foundTea.valueSet.find( vs => vs.value === currentTei.attributes[row.trackedEntityAttribute] )?.label ?? currentTei.attributes[row.trackedEntityAttribute];\n    } else if (currentEvent && currentEvent.dataValues) {\n      const foundDe = programMetadata.programStages.find( ps => ps.id === formMapping.programStage ).dataElements.find( de => de.id === row.dataElement );\n      return !foundDe.valueSet ? isBoolean(currentEvent.dataValues[row.dataElement]) : foundDe.valueSet.find( vs => vs.value === currentEvent.dataValues[row.dataElement] )?.label ?? currentEvent.dataValues[row.dataElement];\n    }\n  }\n\n  const getVal_customCert = (uid, datatype) => {\n    if (datatype === \"de\") {\n      if (currentEvent && currentEvent.dataValues[uid]) {\n        const foundDe = programMetadata.programStages.find( ps => ps.id === formMapping.programStage ).dataElements.find( de => de.id === uid );\n        return !foundDe.valueSet ? currentEvent.dataValues[uid] : foundDe.valueSet.find( vs => vs.value === currentEvent.dataValues[uid] )?.label ?? currentEvent.dataValues[uid];\n      }\n      else {\n        return \"\";\n      }\n    }\n    else if (datatype === \"tea\") {\n      if (currentTei && currentTei.attributes[uid]) {\n        const foundTea = programMetadata.trackedEntityAttributes.find( tea => tea.id === uid );\n        return !foundTea.valueSet ? currentTei.attributes[uid] : foundTea.valueSet.find( vs => vs.value === currentTei.attributes[uid] )?.label ?? currentTei.attributes[uid];\n      }\n      else {\n        return \"\";\n      }\n    }\n  }\n  const convertToValue = (val,valType) => {\n    if (valType === \"text\") {\n      return val.split(\"#{\").map( str => {\n        if( currentEvent && str.startsWith(\"de.\") ) {\n          return str.replace(`de.${str.slice(3,14)}}`,getVal_customCert(str.slice(3,14),\"de\"));\n        }\n        else if( currentTei && str.startsWith(\"tea.\") ) {\n          return str.replace(`tea.${str.slice(4,15)}}`,getVal_customCert(str.slice(4,15),\"tea\"));\n        }\n        else if( str.startsWith(\"orgUnitName\") ) {\n          return str.replace(`orgUnitName}`,currentEnrollment[\"orgUnitName\"]);\n        }\n        else if( str.startsWith(\"enrollmentDate\") ) {\n          return str.replace(`enrollmentDate}`,currentEnrollment[\"enrollmentDate\"]);\n        }\n        else if( str.startsWith(\"incidentDate\") ) {\n          return str.replace(`incidentDate}`,currentEnrollment[\"incidentDate\"]);\n        }\n        else {\n          return str;\n        }\n      }).join(\"\");\n    }\n    else if (valType === \"check\") {\n      if( val.startsWith(\"#{de.\") ) {\n        if(currentEvent.dataValues[val.slice(5,16)]) {\n          return currentEvent.dataValues[val.slice(5,16)] === val.slice(18) ? \"X\" : \"\"\n        }\n        else {\n          return \"\";\n        }\n      }\n      else if( val.startsWith(\"#{tea.\") ) {\n        if(currentTei.attributes[val.slice(6,17)]) {\n          return currentTei.attributes[val.slice(6,17)] === val.slice(19) ? \"X\" : \"\"\n        }\n        else {\n          return \"\";\n        }\n      }\n    }\n    else {\n      return \"\";\n    }\n  }\n\n  useEffect(() => {\n    if ( open ) {\n      if ( customCertificateTemplate ) {\n        // const font = customCertificateTemplate.customFont && customCertificateTemplate.customFont !== null ?\n        //                 await metadataApi.pullNotForJson(`/api/documents/${customCertificateTemplate.customFont}/data.ttf`) : null;\n        // if ( font !== null ) setCustomFont(font.arrayBuffer());\n        if (customCertificateTemplate.customFont && customCertificateTemplate.customFont !== null) {\n          Promise.all([\n            metadataApi.pullNotForJson(`/api/documents/${customCertificateTemplate.template}/data.pdf`),\n            metadataApi.pullNotForJson(`/api/documents/${customCertificateTemplate.customFont}/data.ttf`)\n          ])\n          .then( async (res) => {\n            const font = await res[1].arrayBuffer();\n            const pdfDoc = await fillPdf(\n              res[0],\n              customCertificateTemplate.labels.map( l => ({\n                ...l,\n                value: convertToValue(l.value,l.valueType)\n              })),\n              font\n            );\n            // const pdfDoc = await fillPdf(res[0],[]);\n            const fileURL = await convertPdfDoc2FileURL(pdfDoc);\n            setPdfURL(fileURL);\n            // await showPage(pdfDoc, 1);\n            onLoading();\n          });\n        }\n        else {\n          Promise.all([\n            metadataApi.pullNotForJson(`/api/documents/${customCertificateTemplate.template}/data.pdf`)\n          ])\n          .then( async (res) => {\n            const pdfDoc = await fillPdf(\n              res[0],\n              customCertificateTemplate.labels.map( l => ({\n                ...l,\n                value: convertToValue(l.value,l.valueType)\n              })),\n              null\n            );\n            // const pdfDoc = await fillPdf(res[0],[]);\n            const fileURL = await convertPdfDoc2FileURL(pdfDoc);\n            setPdfURL(fileURL);\n            // await showPage(pdfDoc, 1);\n            onLoading();\n          });\n        }\n      }\n      else {\n        onLoading();\n      }\n    }\n  }, [open])\n\n  return (\n    <Modal\n      wrapClassName=\"certificate-modal\"\n      bodyStyle={{\n        height: \"100%\",\n      }}\n      style={{\n        top: 20,\n      }}\n      width={1000}\n      visible={open}\n      footer={false}\n      closable={false}\n      onCancel={onCancel}\n      title={\n        <Row className=\"no-print\" gutter={8} justify=\"end\">\n          <Col>\n            <Button \n              type=\"primary\" \n              onClick={() => {\n                if(customCertificateTemplate) {\n                  window.frames[\"certificate\"].focus();\n                  window.frames[\"certificate\"].print();\n                }\n                else {\n                  window.print();\n                }\n              }}\n            >\n            {\n              t(\"print\")\n            }\n            </Button>\n          </Col>\n          <Col>\n            <Button onClick={onCancel}>{t(\"close\")}</Button>\n          </Col>\n        </Row>\n      }\n    >\n    {\n      (customCertificateTemplate) ? <iframe \n          // hidden\n          id=\"certificate\"\n          name=\"certificate\"\n          title=\"Certificate\"\n          src={pdfURL + \"#toolbar=0&navpanes=0&scrollbar=0\"}\n          frameBorder=\"0\" \n          height={800}\n          width={\"100%\"}\n          scrolling=\"auto\"\n          type=\"application/pdf\"\n      />\n      :\n      <Space size=\"large\" style={{ width: \"100%\" }} direction=\"vertical\">\n        <div style={{ position: \"relative\" }}>\n          <div\n            style={{\n              padding: \"4px 8px\",\n              position: \"absolute\",\n              top: \"50%\",\n              left: 0,\n              transform: \"translateY(-50%)\",\n            }}\n          >\n            <img src={certificateTemplate.logo} alt=\"logo\" style={{width: \"20%\"}} />\n          </div>\n          <Typography.Title\n            style={{ marginBottom: 0, textAlign: \"center\" }}\n            level={2}\n          >\n            {certificateTemplate.title}\n          </Typography.Title>\n        </div>\n        <div />\n        {\n          certificateTemplate.info.map( row => \n            <Row>\n              <Col span={8}>\n                <div style={{fontSize: 20}}><strong>{row.label}:</strong></div>\n              </Col>\n              <Col span={16}>\n                <div style={{fontSize: 20}}>{getVal_defaultCert(row)}</div>\n              </Col>\n            </Row>\n          )\n        }\n        <div />\n        <div />\n        {\n          certificateTemplate.footer.map( row => \n            <Row gutter={8}>\n              <Col style={{ textAlign: \"right\" }} offset={8} span={8}>\n                <div style={{fontSize: 20}}><strong>{row.label}:</strong></div>\n              </Col>\n              <Col style={{ textAlign: \"right\" }} span={8}>\n                <div style={{fontSize: 20}}>{getVal_defaultCert(row)}</div>\n              </Col>\n            </Row>\n          )\n        }\n      </Space>\n    }\n    </Modal>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.data,\n    certificateTemplate: state.metadata.certificateTemplate,\n    customCertificateTemplate: state.metadata.customCertificate,\n    formMapping: state.metadata.formMapping,\n    programMetadata: state.metadata.programMetadata\n  };\n};\n\nexport default connect(mapStateToProps)(DeathCertificate);","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/admin/type.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/data/type.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/Selections.jsx",["512"],"import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faCog } from \"@fortawesome/free-solid-svg-icons\";\nimport { Radio, Input, Result, Button } from \"antd\";\n/* REDUX */\nimport { connect } from \"react-redux\";\nimport { changeStep, changeIcd11ToolUrl, changeInstallationType } from \"../../redux/actions/admin\";\nimport { useTranslation } from \"react-i18next\";\n/*       */\n\nconst Selections = ({ \n  changeStep, \n  changeIcd11ToolUrl, \n  changeInstallationType, \n  admin,\n  metadata: {\n    orgUnits,\n    users\n  } \n}) => {\n  const { t } = useTranslation();\n  const onChangeRadio = (e) => {\n    if (e.target.value === \"global\") {\n      changeIcd11ToolUrl(\"https://id.who.int/icd/\", \"global\");\n    } else {\n      changeIcd11ToolUrl(\"\", e.target.value);\n    }\n  };\n  const onChangeInput = (e) => {\n    let type = admin.icd11ToolUrl.type;\n    changeIcd11ToolUrl(e.target.value, type);\n  };\n  return (\n    <div className=\"administration-selections-container\">\n      {( orgUnits.length > 0 && users.filter(({organisationUnits}) => organisationUnits > 0).length > 0 ) ? \n          <>  \n            <div className=\"administration-selections-title\">{t(\"selectionTitle\")}</div>\n            <div className=\"administration-selections-title\">\n              <Radio.Group name=\"radiogroup\" onChange={onChangeRadio} value={admin.icd11ToolUrl.type}>\n                <Radio value={\"global\"}>{t(\"globalICDTool\")}</Radio>\n                <Radio value={\"other\"}>{t(\"otherICDTool\")}</Radio>\n              </Radio.Group>\n            </div>\n            <div className=\"administration-selections-title\">\n              <Input\n                placeholder=\"Input Url\"\n                style={{ width: \"400px\" }}\n                value={admin.icd11ToolUrl.url}\n                disabled={admin.icd11ToolUrl.type === \"global\" ? true : false}\n                onChange={onChangeInput}\n              />\n            </div>\n            <div className=\"administration-selections-buttons-container\">\n              <div\n                onClick={() => {\n                  changeInstallationType(\"default\");\n                  changeStep(3);\n                }}\n              >\n                <div className=\"administration-selection\">{t(\"defaultInstallation\")}</div>\n                <FontAwesomeIcon icon={faCheck} style={{ fontSize: 80, color: \"#ffffff\" }} />\n                <div className=\"administration-selection-info\">{t(\"defaultInstallationInfo\")}</div>\n              </div>\n              <div\n                onClick={() => {\n                  changeInstallationType(\"custom\");\n                  changeStep(1);\n                }}\n              >\n                <div className=\"administration-selection\">{t(\"customInstallation\")}</div>\n                <FontAwesomeIcon icon={faCog} style={{ fontSize: 80, color: \"#ffffff\" }} />\n                <div className=\"administration-selection-info\">{t(\"customInstallationInfo\")}</div>\n              </div>\n            </div>\n            <div className=\"administration-selections-title\">{t(\"installWithDocker\")}</div>\n            <div style={{ width: \"100%\", textAlign: \"center\" }}>\n              <a target=\"_blank\" href=\"https://icd.who.int/icdapi/docs2/ICDAPI-DockerContainer\">\n                https://icd.who.int/icdapi/docs2/ICDAPI-DockerContainer\n              </a>\n            </div>\n          </> :\n          <Result\n            status=\"warning\"\n            title={t(\"installationWarning\")}\n            subTitle={t(\"installationWarningTitle\")}\n            extra={\n              <Button type=\"primary\"\n                onClick={() => {\n                  window.location.href = \"../../../dhis-web-maintenance/\";\n                }}\n              >\n                {t(\"backToMaintenance\")}\n              </Button>\n            }\n          />\n      }\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    admin: state.admin,\n    metadata: state.metadata\n  };\n};\n\nconst mapDispatchToProps = {\n  changeStep,\n  changeIcd11ToolUrl,\n  changeInstallationType\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Selections);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/AssignOrgUnits.jsx",["513"],"import { useState } from \"react\";\nimport { Select, Button } from \"antd\";\nimport _ from \"lodash\";\n/* REDUX */\nimport { connect } from \"react-redux\";\nimport { assignOrgUnits } from \"../../redux/actions/admin\";\nimport { useTranslation } from \"react-i18next\";\n/*       */\nimport { Components } from \"tracker-capture-app-core\";\nconst { Option } = Select;\nconst { MultipleOrgUnitSelector } = Components;\n\nconst AssignOrgUnits = ({ admin, metadata, assignOrgUnits }) => {\n  const { t } = useTranslation();\n  const [selectedOrgUnitLevel, setSelectedOrgUnitLevel] = useState(\"\");\n  const [selectedOrgUnitGroup, setSelectedOrgUnitGroup] = useState(\"\");\n\n  const { assignedOrgUnits } = admin;\n  const { orgUnitGroups, orgUnitLevels, orgUnits } = metadata;\n\n  const selectOrgUnits = (orgUnits) => {\n    const selectedPaths = orgUnits.map((ou) => ou.path);\n    const newAssignOrgUnits = _.compact([\n      ...assignedOrgUnits,\n      ...selectedPaths\n    ]);\n    assignOrgUnits(newAssignOrgUnits);\n  };\n  const deselectOrgUnits = (orgUnits) => {\n    const selectedPaths = orgUnits.map((ou) => ou.path);\n    const newAssignOrgUnits = assignedOrgUnits.filter(\n      (ao) => !selectedPaths.includes(ao)\n    );\n    assignOrgUnits(newAssignOrgUnits);\n  };\n\n  return (\n    <div className=\"administration-orgunit-container\">\n      <div className=\"administration-multiorgunit-selector-container\">\n        <MultipleOrgUnitSelector\n          selectedOrgUnits={assignedOrgUnits}\n          handleSelectOrgUnits={(selected) => {\n            assignOrgUnits(selected.selected);\n          }}\n        />\n      </div>\n      <div className=\"administration-multiorgunit-selection-container\">\n        <div>\n          <div>{t(\"OULevel\")}</div>\n          <div>\n            <Select\n              value={selectedOrgUnitLevel.value}\n              placeholder=\"Select organisation unit level\"\n              style={{ width: 250 }}\n              onChange={(value, option) => {\n                setSelectedOrgUnitLevel({ ...option });\n              }}\n              options={orgUnitLevels.map((oul) => {\n                return {\n                  value: oul.id,\n                  level: oul.level,\n                  label: oul.displayName\n                };\n              })}\n            />\n          </div>\n          <div>\n            <Button\n              onClick={() => {\n                selectOrgUnits(\n                  orgUnits.filter(\n                    (ou) => ou.level === selectedOrgUnitLevel.level\n                  )\n                );\n              }}\n            >\n            { \n              t(\"Select\")\n            }\n            </Button>\n            <Button\n              onClick={() => {\n                deselectOrgUnits(\n                  orgUnits.filter(\n                    (ou) => ou.level === selectedOrgUnitLevel.level\n                  )\n                );\n              }}\n            >\n            {\n              t(\"deselect\")\n            }\n            </Button>\n          </div>\n        </div>\n        <div>\n          <div>{t(\"OUGroup\")}</div>\n          <div>\n            <Select\n              value={selectedOrgUnitGroup.value}\n              placeholder=\"Select organisation unit group\"\n              style={{ width: 250 }}\n              onChange={(value, option) => {\n                setSelectedOrgUnitGroup({ ...option });\n              }}\n              options={orgUnitGroups.map((oug) => {\n                return {\n                  value: oug.id,\n                  orgUnitList: oug.organisationUnits.map((ou) => ou.id),\n                  label: oug.displayName\n                };\n              })}\n            />\n          </div>\n          <div>\n            <Button\n              onClick={() => {\n                if (!selectedOrgUnitGroup) return;\n                selectOrgUnits(\n                  orgUnits.filter((ou) =>\n                    selectedOrgUnitGroup.orgUnitList.includes(ou.id)\n                  )\n                );\n              }}\n            >\n            { \n              t(\"select\")\n            }\n            </Button>\n            <Button\n              onClick={() => {\n                if (!selectedOrgUnitGroup) return;\n                deselectOrgUnits(\n                  orgUnits.filter((ou) =>\n                    selectedOrgUnitGroup.orgUnitList.includes(ou.id)\n                  )\n                );\n              }}\n            >\n            {\n              t(\"deselect\")\n            }\n            </Button>\n          </div>\n        </div>\n        <div>\n          <div>\n            <Button\n              onClick={() => {\n                selectOrgUnits(orgUnits);\n              }}\n            >\n            { \n              t(\"selectAll\")\n            }\n            </Button>\n            <Button\n              onClick={() => {\n                deselectOrgUnits(orgUnits);\n              }}\n            >\n            {\n              t(\"deselectAll\")\n            }\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    admin: state.admin,\n    metadata: state.metadata\n  };\n};\nconst mapDispatchToProps = { assignOrgUnits };\nexport default connect(mapStateToProps, mapDispatchToProps)(AssignOrgUnits);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/FrameA.jsx",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/Attributes.jsx",["514","515"],"import { Card, Select, Transfer, Button, Radio, Space } from \"antd\";\nimport { Hooks } from \"tracker-capture-app-core\";\nimport { defaultAttributes } from \"../../utils/const\";\n\n/* REDUX */\nimport { connect } from \"react-redux\";\nimport { useState, useEffect } from \"react\";\nimport { changeTrackedEntityTypes, changeTrackedEntityType, setFemaleOption, setFullnameOption } from \"../../redux/actions/admin\";\nimport { setTeas } from \"../../redux/actions/metadata\";\n\nimport { useTranslation } from \"react-i18next\";\n/*       */\n\nconst { useApi } = Hooks;\n\n\nconst { Option } = Select;\n\nconst Attributes = ({\n  admin: { \n    trackedEntityAttributes: selectedTrackedEntityAttributes,\n    trackedEntityType: selectedTrackedEntityType,\n    femaleOption: selectedFemaleOption,\n    fullnameOption: selectedFullnameOption,\n    type\n  },\n  allExistedTrackedEntityAttributes,\n  allExistedTrackedEntityTypes,\n  programMetadata,\n  formMapping,\n  femaleCode,\n  fullnameOption,\n  changeTrackedEntityTypes,\n  changeTrackedEntityType,\n  setTeas,\n  setFemaleOption,\n  setFullnameOption\n}) => {\n  const { t } = useTranslation();\n  const { metadataApi } = useApi();\n  const [isReloading, setIsReloading] = useState(false);\n  const [selectedKeys, setSelectedKeys] = useState([]);\n  // const [fullname, setFullname] = useState(false);\n  const [femaleOptions, setFemaleOptions] = useState([]);\n  \n  const getDefaultTEAName = defaultName => defaultName === \"First Name\" ? \"Given Name\" :\n    defaultName === \"Middle Name\" ? \"Middle Name\" :\n    defaultName === \"Last Name\" ? \"Fammily Name\" :\n    defaultName === \"Date of Birth\" ? \"Date of Birth\" :\n    defaultName === \"Date of Birth is estimated\" ? \"Date of Birth is estimated\" :\n    defaultName === \"Age in years\" ? \"Age (years)\" :\n    defaultName === \"Address\" ? \"Address (current)\" :\n    defaultName === \"Sex\" ? \"Sex\" :\n    defaultName === \"Female Option\" ? \"Female\" :\n    defaultName === \"Person\" ? \"Person\" : \"\";\n\n  const showedTrackedEntityAttributes = (attribute) => {\n    return allExistedTrackedEntityAttributes.filter(({ id }) =>\n      selectedTrackedEntityAttributes.every(\n        ([des, source]) => des !== id || source === null || (attribute ? source === attribute : false)\n      )\n    )\n  };\n\n  useEffect(() => {\n    if ( (selectedTrackedEntityAttributes.filter( ([,source]) => source === \"Sex\" ).length > 0) ) {\n      metadataApi.get(`/api/trackedEntityAttributes/${selectedTrackedEntityAttributes.find( ([,source]) => source === \"Sex\" )[0]}.json`, {} ,[\n        \"fields=optionSet[options[id,name,code]]\"\n      ]).then( json => {\n        setFemaleOptions(json.optionSet.options)\n      })\n    }\n  },[selectedTrackedEntityAttributes])\n\n  useEffect(() => {\n    if (programMetadata) {\n      let selectedAttrs = [];\n      selectedAttrs = defaultAttributes.map( ({name,code}) => [formMapping.attributes[code],name]);\n      selectedAttrs = [\n        ...selectedAttrs,\n        ...programMetadata.trackedEntityAttributes.filter( ({id}) => \n          !selectedAttrs.find( ([des,]) => des === id ) )\n        .map(({id}) => [id,null])\n      ]\n      changeTrackedEntityTypes(selectedAttrs); // This is for TEAs\n      changeTrackedEntityType(programMetadata.trackedEntityType);\n      setFemaleOption(femaleCode);\n      setFullnameOption(fullnameOption);\n    }\n  },[programMetadata])\n\n  const onChange = (nextTargetKeys, direction, moveKeys) => {\n    changeTrackedEntityTypes(\n      selectedTrackedEntityAttributes.filter(([, source]) => source).concat(nextTargetKeys.map((key) => [key, null]))\n    );\n  };\n\n  const onSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\n    setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\n  };\n\n  const getSelectValue = (attrId) => {\n    const selectedAttr = selectedTrackedEntityAttributes.find(([, source]) => source === attrId);\n    return selectedAttr ? selectedAttr[0] : null;\n  };\n\n  return (\n    <div className=\"administration-transfer-container\">\n      <div>\n        <Card size=\"small\" style={{marginBottom: \"10px\"}}>\n          <div className=\"administration-tet\">\n            <div><strong>{t(\"trackedEntityType\")}</strong></div>\n            <div>\n            {\n              type === 'default' && programMetadata === null ? getDefaultTEAName(\"Person\") :\n              <Select\n                style={{\n                  width: \"100%\"\n                }}\n                placeholder={t(\"selectTrackedEntityType\")}\n                value={selectedTrackedEntityType}\n                onChange={(value) => changeTrackedEntityType(value)}\n                disabled={programMetadata}\n              >\n                {\n                  allExistedTrackedEntityTypes.map( tet => \n                    <Option key={tet.id} value={tet.id}>{tet.displayName}</Option>\n                  )\n                }\n              </Select>\n            }\n            </div>\n          </div>\n        </Card>\n        <Card size=\"small\" title={t(\"defaultAttribute\")}>\n          <div className=\"administration-attribute\">\n            <div>{defaultAttributes[0].name}</div>\n            <div>{\n              (!programMetadata) ?\n                t(\"systemID\")\n                :\n                allExistedTrackedEntityAttributes.find(({id}) => getSelectValue(defaultAttributes[0].name) === id) ? \n                  allExistedTrackedEntityAttributes.find(({id}) => getSelectValue(defaultAttributes[0].name) === id).displayName\n                  :\n                  getSelectValue(defaultAttributes[0].name)\n            }</div>\n          </div>\n          {\n            programMetadata === null ? \n            <>\n              <div className=\"administration-fullnameOption\">\n                <div><strong>{t(\"selectNameOption\")}</strong></div>\n                <div>\n                  \n                </div>\n              </div>\n              <div className=\"administration-attribute\">\n                <div>\n                {\n                  type === 'default' ? \"Full Name\" : \n                  <Radio.Group \n                    size=\"small\"\n                    onChange={({ target: { value } }) => {\n                      setFullnameOption(value);\n\n                      if (value === \"noname\") {\n                        changeTrackedEntityTypes(selectedTrackedEntityAttributes.filter(\n                          ([,source]) => source !== \"First Name\" && source !== \"Middle Name\" && source !== \"Last Name\"\n                        ))\n                      }\n                      else if (value === \"fullname\") {\n                        changeTrackedEntityTypes(selectedTrackedEntityAttributes.filter(\n                          ([,source]) => source !== \"Middle Name\" && source !== \"Last Name\"\n                        ))\n                      }\n                      else if (value === \"firstlastname\") {\n                        changeTrackedEntityTypes(selectedTrackedEntityAttributes.filter(\n                          ([,source]) => source !== \"Middle Name\"\n                        ))\n                      }\n                    }}\n                    value={selectedFullnameOption}\n                    optionType=\"button\"\n                    buttonStyle=\"solid\"\n                  >\n                    <Space direction=\"vertical\">\n                      <Space>\n                        <Radio value=\"noname\">{t(\"noname\")}</Radio>\n                        <Radio value=\"fullname\">{t(\"fullname\")}</Radio>\n                        <Radio value=\"firstlastname\">{t(\"firstlastname\")}</Radio>\n                      </Space>\n                      <Radio value=\"firstmidlastname\">{t(\"firstmiddlelastname\")}</Radio>\n                    </Space>\n                  </Radio.Group>\n                }\n                </div>\n                <div className=\"administration-fullnameOption-inputs\">\n                  <div>\n                    {\n                      type === 'default' ? getDefaultTEAName(\"First Name\") :\n                        <Select\n                          filterOption={(inputValue, option) => {\n                            return option.children.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase());\n                          }}\n                          style={{\n                            width: \"100%\"\n                          }}\n                          showSearch\n                          onChange={(value) => {\n                            const existedIndex = selectedTrackedEntityAttributes.findIndex(\n                              ([, source]) => source === \"First Name\"\n                            );\n                            let newSelectedAttributes = selectedTrackedEntityAttributes.filter(\n                              ([destination, source]) => source || destination !== value\n                            );\n                            if (existedIndex < 0) {\n                              newSelectedAttributes.push([value, \"First Name\"]);\n                            } else {\n                              newSelectedAttributes.splice(existedIndex, 1, [value, \"First Name\"]);\n                            }\n                            changeTrackedEntityTypes(newSelectedAttributes);\n                          }}\n                          value={getSelectValue(\"First Name\")}\n                          placeholder={t(\"firstname\")}\n                          disabled={selectedFullnameOption === \"noname\" }\n                        >\n                          {showedTrackedEntityAttributes(\"First Name\")\n                          .filter(({ valueType }) => valueType === \"TEXT\")\n                          .map(({ id, displayName }) => (\n                            <Option key={id} value={id}>{displayName}</Option>\n                          ))}\n                        </Select>\n                    }\n                  </div>\n                  <div>\n                  {\n                    type === 'default' ? getDefaultTEAName(\"Middle Name\") :\n                      <Select\n                        filterOption={(inputValue, option) => {\n                          return option.children.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase());\n                        }}\n                        style={{\n                          width: \"100%\"\n                        }}\n                        showSearch\n                        onChange={(value) => {\n                          const existedIndex = selectedTrackedEntityAttributes.findIndex(\n                            ([, source]) => source === \"Middle Name\"\n                          );\n                          let newSelectedAttributes = selectedTrackedEntityAttributes.filter(\n                            ([destination, source]) => source || destination !== value\n                          );\n                          if (existedIndex < 0) {\n                            newSelectedAttributes.push([value, \"Middle Name\"]);\n                          } else {\n                            newSelectedAttributes.splice(existedIndex, 1, [value, \"Middle Name\"]);\n                          }\n                          changeTrackedEntityTypes(newSelectedAttributes);\n                        }}\n                        value={getSelectValue(\"Middle Name\")}\n                        placeholder={t(\"middlename\")}\n                        disabled={selectedFullnameOption === \"noname\" || selectedFullnameOption === \"fullname\" || selectedFullnameOption === \"firstlastname\"}\n                      >\n                        {showedTrackedEntityAttributes(\"Middle Name\")\n                        .filter(({ valueType }) => valueType === \"TEXT\")\n                        .map(({ id, displayName }) => (\n                          <Option key={id} value={id}>{displayName}</Option>\n                        ))}\n                      </Select>\n                  }\n                  </div>\n                  <div>\n                  {\n                    type === 'default' ? getDefaultTEAName(\"Last Name\") :\n                      <Select\n                        filterOption={(inputValue, option) => {\n                          return option.children.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase());\n                        }}\n                        style={{\n                          width: \"100%\"\n                        }}\n                        showSearch\n                        onChange={(value) => {\n                          const existedIndex = selectedTrackedEntityAttributes.findIndex(\n                            ([, source]) => source === \"Last Name\"\n                          );\n                          let newSelectedAttributes = selectedTrackedEntityAttributes.filter(\n                            ([destination, source]) => source || destination !== value\n                          );\n                          if (existedIndex < 0) {\n                            newSelectedAttributes.push([value, \"Last Name\"]);\n                          } else {\n                            newSelectedAttributes.splice(existedIndex, 1, [value, \"Last Name\"]);\n                          }\n                          changeTrackedEntityTypes(newSelectedAttributes);\n                        }}\n                        value={getSelectValue(\"Last Name\")}\n                        placeholder={t(\"lastname\")}\n                        disabled={selectedFullnameOption === \"noname\" || selectedFullnameOption === \"fullname\"}\n                      >\n                        {showedTrackedEntityAttributes(\"Last Name\")\n                        .filter(({ valueType }) => valueType === \"TEXT\")\n                        .map(({ id, displayName }) => (\n                          <Option key={id} value={id}>{displayName}</Option>\n                        ))}\n                      </Select>\n                  }\n                  </div>\n                </div>\n              </div>\n            </>\n            :\n            <>\n              <div className=\"administration-attribute\">\n                <div>\n                {\n                  fullnameOption === \"noname\" ? \"No Name\" : \n                    fullnameOption === \"fullname\" ? \"Fullname\" : \n                      fullnameOption === \"firstlastname\" ? \"First & Last Name\" : \"First, Middle & Last Name\"\n                }\n                </div>\n                <div className=\"administration-fullnameOption-inputs\">\n                  <div>\n                  {\n                    (fullnameOption === \"fullname\" || fullnameOption === \"firstlastname\" || fullnameOption === \"firstmidlastname\") ?\n                      allExistedTrackedEntityAttributes.find(({ id }) => formMapping.attributes[\"given_name\"] === id).displayName : \"\"\n                  }\n                  </div>\n                  <div>\n                  {\n                    (fullnameOption === \"firstmidlastname\") ?\n                      allExistedTrackedEntityAttributes.find(({ id }) => formMapping.attributes[\"middle_name\"] === id).displayName : \"\"\n                  }\n                  </div>\n                  <div>\n                  {\n                    (fullnameOption === \"firstlastname\" || fullnameOption === \"firstmidlastname\") ?\n                      allExistedTrackedEntityAttributes.find(({ id }) => formMapping.attributes[\"family_name\"] === id).displayName : \"\"\n                  }\n                  </div>\n                </div>\n              </div>\n            </>\n          }\n          \n          {defaultAttributes.slice(4,9).map((attribute,index) => {\n            return (\n              <div key={index} className=\"administration-attribute\">\n                <div>{attribute.name}</div>\n                <div>\n                {\n                  type === 'default' && programMetadata === null ? getDefaultTEAName(attribute.name) :\n                    <Select\n                      filterOption={(inputValue, option) => {\n                        return option.children.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase());\n                      }}\n                      style={{\n                        width: \"100%\"\n                      }}\n                      showSearch\n                      onChange={(value) => {\n                        const existedIndex = selectedTrackedEntityAttributes.findIndex(\n                          ([, source]) => source === attribute.name\n                        );\n                        let newSelectedAttributes = selectedTrackedEntityAttributes.filter(\n                          ([destination, source]) => source || destination !== value\n                        );\n                        if (existedIndex < 0) {\n                          newSelectedAttributes.push([value, attribute.name]);\n                        } else {\n                          newSelectedAttributes.splice(existedIndex, 1, [value, attribute.name]);\n                        }\n                        changeTrackedEntityTypes(newSelectedAttributes);\n                      }}\n                      value={getSelectValue(attribute.name)}\n                      placeholder={t(\"selectAttribute\")}\n                      disabled={programMetadata}\n                    >\n                      {showedTrackedEntityAttributes(attribute.name)\n                      .filter(({ valueType, optionSet }) => (optionSet) ? attribute.valueType === \"optionSet\" : valueType === attribute.valueType)\n                      .map(({ id, displayName }) => (\n                        <Option key={id} value={id}>{displayName}</Option>\n                      ))}\n                    </Select>\n                }\n                </div>\n              </div>\n            );\n          })}\n          {\n            (selectedTrackedEntityAttributes.filter( ([,source]) => source === \"Sex\" ).length > 0) && <div className=\"administration-femaleOption\">\n              <div className=\"administration-femaleOption-name\">{t(\"femaleOption\")}</div>\n              <div>\n                {\n                  <Select\n                    style={{\n                      width: \"100%\"\n                    }}\n                    placeholder={t(\"selectOption\")}\n                    value={selectedFemaleOption}\n                    onChange={(value) => setFemaleOption(value)}\n                    disabled={programMetadata}\n                  >\n                    {\n                      (femaleOptions.length > 0) && femaleOptions.map( opt => <Option key={opt.id} value={opt.code}>{opt.name}</Option> )\n                    }\n                  </Select>\n                }\n              </div>\n            </div>\n          }\n          {\n            (type === 'default' && programMetadata === null) && <div className=\"administration-femaleOption\">\n              <div className=\"administration-femaleOption-name\">{t(\"femaleOption\")}</div>\n              <div>\n              {\n                getDefaultTEAName(\"Female Option\")\n              }\n              </div>\n            </div>\n          }\n        </Card>\n      </div>\n      <div>\n        <Card size=\"small\" title={t(\"otherAttributes\")}>\n          <Transfer\n            showSearch\n            pagination={{\n              pageSize: 20\n            }}\n            listStyle={{\n              width: \"100%\",\n              height: 500\n            }}\n            dataSource={showedTrackedEntityAttributes().map(({ id, displayName }) => ({\n              title: displayName,\n              key: id\n            }))}\n            targetKeys={selectedTrackedEntityAttributes.filter(([, source]) => !source).map(([key]) => key)}\n            selectedKeys={selectedKeys}\n            onChange={onChange}\n            onSelectChange={onSelectChange}\n            titles={[t(\"otherAvailableAttributes\"), t(\"otherSelectedAttributes\")]}\n            render={(item) => item.title}\n            footer={(props) => {\n              if (props.titleText === t(\"otherAvailableAttributes\"))\n                return (\n                  <div\n                    style={{\n                      display: \"flex\",\n                      padding: 5,\n                      justifyContent: \"flex-end\"\n                    }}\n                  >\n                    <Button\n                      onClick={() => {\n                        window.open(\n                          \"../../../dhis-web-maintenance/index.html#/list/programSection/trackedEntityAttribute\"\n                        );\n                      }}\n                      style={{\n                        marginRight: 5\n                      }}\n                      size=\"small\"\n                      type=\"primary\"\n                      disabled={type === 'default' && programMetadata === null}\n                    >{\n                      t(\"add\")\n                    }</Button>\n                    <Button\n                      loading={isReloading}\n                      size=\"small\"\n                      onClick={async () => {\n                        setIsReloading(true);\n                        const { trackedEntityAttributes } = await metadataApi.get(\n                          \"/api/trackedEntityAttributes.json\",\n                          { paging: false },\n                          [\"fields=id,displayName,valueType,optionSet,formName\"]\n                        );\n                        setIsReloading(false);\n                        setTeas(trackedEntityAttributes);\n                      }}\n                      disabled={type === 'default' && programMetadata === null}\n                    >{\n                      t(\"reload\")\n                    }</Button>\n                  </div>\n                );\n              return null;\n            }}\n            disabled={type === 'default' && programMetadata === null}\n          />\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    admin: state.admin,\n    allExistedTrackedEntityAttributes: state.metadata.trackedEntityAttributes,\n    allExistedTrackedEntityTypes: state.metadata.trackedEntityTypes,\n    programMetadata: state.metadata.programMetadata,\n    formMapping: state.metadata.formMapping,\n    femaleCode: state.metadata.femaleCode,\n    fullnameOption: state.metadata.fullnameOption\n  };\n};\n\nconst mapDispatchToProps = {\n  changeTrackedEntityTypes,\n  changeTrackedEntityType,\n  setTeas,\n  setFemaleOption,\n  setFullnameOption\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Attributes);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/Certificate.jsx",["516"],"import { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Stepper, Step, StepButton, StepContent } from \"@mui/material\";\nimport { \n    Row, Col, Divider, \n    Typography, \n    Input, Upload, Button,\n    List,\n    Modal, message\n} from \"antd\";\nimport CustomCertificate from \"./CustomCertificate\";\nimport { UploadOutlined, CaretUpFilled, CaretDownFilled, CloseCircleFilled } from '@ant-design/icons';\nimport { changeCerticateTemplate, setCertificateLogo } from \"../../redux/actions/admin\";\nimport { useTranslation } from \"react-i18next\";\n\nconst Certificate = props => {\n    const { t } = useTranslation();\n    const [type,setType] = useState(0);\n\n    const [open, setOpen] = useState(null); // Body, Footer, null\n    const [search, setSearch] = useState(\"\");\n    const [label, setLabel] = useState(\"\");\n    const [selected, setSelected] = useState({});\n\n    const { Search } = Input;\n\n    useEffect(() => {\n        props.changeCerticateTemplate(props.certificateTemplateMetadata);\n    },[])\n\n    const handleMoveUp = (part, index) => {\n        // part: info | footer\n        let arr = props.certificateTemplateAdmin[part];\n        const temp = arr[index];\n        arr[index] = arr[index-1];\n        arr[index-1]=temp;\n        props.changeCerticateTemplate({\n            ...props.certificateTemplateAdmin,\n            [part]: arr\n        });\n    }\n\n    const handleMoveDown = (part, index) => {\n        // part: info | footer\n        let arr = props.certificateTemplateAdmin[part];\n        const temp = arr[index];\n        arr[index] = arr[index+1];\n        arr[index+1]=temp;\n        props.changeCerticateTemplate({\n            ...props.certificateTemplateAdmin,\n            [part]: arr\n        });\n    }\n\n    const handleRemoveItem = (part, index) => {\n        let arr = props.certificateTemplateAdmin[part];\n        arr.splice(index,1);\n        props.changeCerticateTemplate({\n            ...props.certificateTemplateAdmin,\n            [part]: arr\n        });\n    }\n\n    const handleUpdateTitle = value => {\n        props.changeCerticateTemplate({\n            ...props.certificateTemplateAdmin,\n            title: value\n        })\n    }\n\n    const handleAddItem = () => {\n        if ( label === \"\" || selected === {} ) {\n            message.error('ERROR Please enter the label and selected an item.');\n        } else {\n            const key = open === \"Body\" ? \"info\" : \"footer\";\n            props.changeCerticateTemplate({\n                ...props.certificateTemplateAdmin,\n                [key]: [...props.certificateTemplateAdmin[key],...[{\n                    ...selected,\n                    label: label\n                }]]\n            });\n            handleCloseModal();\n        }\n    }\n\n    const handleCloseModal = () => {\n        setOpen(null);\n        setSelected({});\n        setLabel(\"\");\n        setSearch(\"\");\n    }\n\n    const handleUploadLogo = img => {\n        const reader = new FileReader();\n        reader.onload = e => {\n            props.setCertificateLogo({ image: e.target.result });\n        };\n\n        reader.readAsDataURL(img);\n    }\n\n    const getDisplayName = data => {\n        if (data) return data.displayName;\n        else return \"undefined\";\n    }\n\n    return (\n        <div className=\"administration-certificate-container\">\n            {(props.certificateTemplateAdmin) && <Stepper nonLinear activeStep={type} orientation=\"vertical\">\n                <Step>\n                    <StepButton onClick={() => setType(0)}>{t(\"defaultCertificate\")}</StepButton>\n                    <StepContent>\n                        <Row gutter={[16, 16]}>\n                            <Col span={12}>\n                                <div className=\"administration-certificate-box\">\n                                    <div className=\"administration-certificate-title-setup\">\n                                        <div>{t(\"certificateTitle\")}</div>\n                                        <div><Input placeholder=\"Certificate Name\" value={props.certificateTemplateAdmin.title} onChange={e => handleUpdateTitle(e.target.value)}/></div>\n                                    </div>\n                                    <div className=\"administration-certificate-title-setup\">\n                                        <div>{t(\"certificateLogo\")}</div>\n                                        <div>\n                                            <Upload\n                                                name=\"uploadLogo\"\n                                                showUploadList={false}\n                                                beforeUpload={handleUploadLogo}\n                                            >\n                                                <Button icon={<UploadOutlined />}>{t(\"upload\")}</Button>\n                                            </Upload>\n                                        </div>\n                                    </div>\n                                    <Divider plain orientation=\"right\"><Button onClick={() => setOpen(\"Body\")}>{t(\"addItemBody\")}</Button></Divider>\n                                    <div className=\"administration-certificate-setup\">\n                                        <List \n                                            size=\"small\"\n                                            split={false}\n                                            dataSource={props.certificateTemplateAdmin.info}\n                                            renderItem={(item,index) => (\n                                                <List.Item\n                                                    actions={[\n                                                        <Button type=\"text\" icon={<CaretUpFilled />} disabled={( index === 0 )} onClick={() => handleMoveUp(\"info\",index)} />,\n                                                        <Button type=\"text\" icon={<CaretDownFilled />} disabled={( (index + 1) === props.certificateTemplateAdmin.info.length )} onClick={() => handleMoveDown(\"info\",index)} />,\n                                                        <Button type=\"text\" danger icon={<CloseCircleFilled />} onClick={() => handleRemoveItem(\"info\",index)} />\n                                                    ]}\n                                                >\n                                                    <List.Item.Meta \n                                                        title={item.label}\n                                                        description={(item.dataElement) ? `Data Element: ${item.dataElement}` : (item.trackedEntityAttribute) ? `Attribute: ${item.trackedEntityAttribute}` : `Enrollment: ${item.enrollment}`}\n                                                    />\n                                                </List.Item>\n                                            )}\n                                        />\n                                    </div>\n                                    <Divider plain orientation=\"right\"><Button onClick={() => setOpen(\"Footer\")}>{t(\"addItemFooter\")}</Button></Divider>\n                                    <div className=\"administration-certificate-setup\">\n                                        <List \n                                            size=\"small\"\n                                            split={false}\n                                            dataSource={props.certificateTemplateAdmin.footer}\n                                            renderItem={(item,index) => (\n                                                <List.Item\n                                                    actions={[\n                                                        <Button type=\"text\" icon={<CaretUpFilled />} disabled={( index === 0 )} onClick={() => handleMoveUp(\"footer\",index)} />,\n                                                        <Button type=\"text\" icon={<CaretDownFilled />} disabled={( (index + 1) === props.certificateTemplateAdmin.footer.length )} onClick={() => handleMoveDown(\"footer\",index)} />,\n                                                        <Button type=\"text\" danger icon={<CloseCircleFilled />} onClick={() => handleRemoveItem(\"footer\",index)} />\n                                                    ]}\n                                                >\n                                                    <List.Item.Meta \n                                                        title={item.label}\n                                                        description={(item.dataElement) ? `Data Element: ${item.dataElement}` : (item.trackedEntityAttribute) ? `Attribute: ${item.trackedEntityAttribute}` : `Enrollment: ${item.enrollment}`}\n                                                    />\n                                                </List.Item>\n                                            )}\n                                        />\n                                    </div>\n                                </div>\n                            </Col>\n                            <Col span={12}>\n                                <div className=\"administration-certificate-box\">\n                                    <Divider orientation=\"center\">{t(\"reviewDefaultCertificate\")}</Divider>\n                                    <div style={{margin: \"20x 0px\"}}>\n                                        <Row gutter={[16, 16]}>\n                                            <Col span={4}>\n                                                <div className=\"administration-certificate-logo\">\n                                                    { props.certificateTemplateAdmin.logo !== null && <img src={props.certificateTemplateAdmin.logo} alt=\"logo\" /> }\n                                                </div>\n                                            </Col>\n                                            <Col span={16}>\n                                                <Typography.Title\n                                                    style={{ marginBottom: 0, textAlign: \"center\" }}\n                                                    level={2}\n                                                >\n                                                    {props.certificateTemplateAdmin.title}\n                                                </Typography.Title>\n                                            </Col>\n                                            <Col span={4}></Col>\n                                        </Row>\n                                    </div>\n                                    <div style={{margin: \"50px 0px\"}}>\n                                        {/* <Divider orientation=\"left\">Body</Divider> */}\n                                        <Row gutter={[16, 33]}>\n                                            {\n                                                props.certificateTemplateAdmin.info.map( row => <>\n                                                    <Col span={10}><strong>{row.label}</strong></Col>\n                                                    <Col span={14}>\n                                                    {\n                                                        (row.dataElement) ? getDisplayName(props.programMetadata.programStages[0].dataElements.find(de => de.id === row.dataElement)) :\n                                                            (row.trackedEntityAttribute) ? getDisplayName(props.programMetadata.trackedEntityAttributes.find(attr => attr.id === row.trackedEntityAttribute)) : row.enrollment\n                                                    }\n                                                    </Col>\n                                                </>)\n                                            }\n                                        </Row>\n                                    </div>\n                                    <div style={{margin: \"50px 0px\"}}>\n                                        {/* <Divider orientation=\"left\">Footer</Divider> */}\n                                        <Row gutter={[8, 25]}>\n                                            {\n                                                props.certificateTemplateAdmin.footer.map( row => <>\n                                                    <Col style={{ textAlign: \"right\" }} offset={10} span={8}><strong>{row.label}</strong></Col>\n                                                    <Col style={{ textAlign: \"right\" }} span={6}>\n                                                    {\n                                                        (row.dataElement) ? getDisplayName(props.programMetadata.programStages[0].dataElements.find(de => de.id === row.dataElement)) :\n                                                            (row.trackedEntityAttribute) ? getDisplayName(props.programMetadata.trackedEntityAttributes.find(attr => attr.id === row.trackedEntityAttribute)) : row.enrollment\n                                                    }\n                                                    </Col>\n                                                </>)\n                                            }\n                                        </Row>\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </StepContent>\n                </Step>\n                <Step>\n                    <StepButton onClick={() => setType(1)}>{t(\"customCertificate\")}</StepButton>\n                    <StepContent>\n                        <div className=\"administration-custom-certificate-container\">\n                            <CustomCertificate />\n                        </div>\n                    </StepContent>\n                </Step>\n            </Stepper>}\n            <Modal\n                width={\"50%\"}\n                centered\n                title={`${t(\"certificateAddItemTitle\")} ${open}`}\n                visible={open !== null}\n                onCancel={handleCloseModal}\n                onOk={handleAddItem}\n            >\n                <div className=\"administration-certificate-modal\">\n                    <Input style={{ width: \"100%\" }} value={label} placeholder=\"Enter Label\" onChange={e => setLabel(e.target.value)} />\n                </div>\n                <div className=\"administration-certificate-modal\">\n                    <Input style={{ width: \"100%\" }} disabled={true} value={selected.displayName} placeholder=\"Selected Data\" />\n                </div>\n                <div className=\"administration-certificate-modal\">\n                    <div className=\"administration-certificate-modal-box\">\n                        <div className=\"administration-certificate-modal\">\n                            <Search placeholder=\"Search\" style={{ width: \"100%\" }} value={search} onChange={e => setSearch(e.target.value)} />\n                        </div>\n                        <div className=\"administration-certificate-modal-list\">\n                            {\n                            [\n                                {id: \"enrollmentDate\", displayName: \"Enrolment Date\"}, \n                                {id: \"incidentDate\", displayName: \"Incident Date\"},\n                                {id: \"orgUnitName\", displayName: \"Organisation Unit\"}\n                            ].filter( it => it.displayName.toLowerCase().includes(search.toLowerCase())).length > 0 && \n                            <>\n                                <Divider orientation=\"left\">Enrollment</Divider>\n                                <List \n                                    size=\"small\"\n                                    split={false}\n                                    dataSource={[\n                                        {id: \"enrollmentDate\", displayName: \"Enrolment Date\"}, \n                                        {id: \"incidentDate\", displayName: \"Incident Date\"},\n                                        {id: \"orgUnitName\", displayName: \"Organisation Unit\"}\n                                    ].filter( it => it.displayName.toLowerCase().includes(search.toLowerCase()))}\n                                    renderItem={(item) => (\n                                        <List.Item>\n                                            <div className=\"administration-certificate-modal-item\" onClick={() => setSelected({\n                                                enrollment: item.id,\n                                                displayName: item.displayName\n                                            })}>{item.displayName}</div>\n                                        </List.Item>\n                                    )}\n                                />\n                            </>}\n                            {props.programMetadata.trackedEntityAttributes.filter( it => it.displayName.toLowerCase().includes(search.toLowerCase())).length > 0 && \n                            <>\n                                <Divider orientation=\"left\">Tracked Entity Attributes</Divider>\n                                <List \n                                    size=\"small\"\n                                    split={false}\n                                    dataSource={props.programMetadata.trackedEntityAttributes.filter( it => it.displayName.toLowerCase().includes(search.toLowerCase()))}\n                                    renderItem={(item) => (\n                                        <List.Item>\n                                            <div className=\"administration-certificate-modal-item\" onClick={() => setSelected({\n                                                trackedEntityAttribute: item.id,\n                                                displayName: item.displayName\n                                            })}>{item.displayName}</div>\n                                        </List.Item>\n                                    )}\n                                />\n                            </>}\n                            {props.programMetadata.programStages[0].dataElements.filter( it => it.displayName.toLowerCase().includes(search.toLowerCase())).length > 0 && \n                            <>\n                                <Divider orientation=\"left\">Data Elements</Divider>\n                                <List \n                                    size=\"small\"\n                                    split={false}\n                                    dataSource={props.programMetadata.programStages[0].dataElements.filter( it => it.displayName.toLowerCase().includes(search.toLowerCase()))}\n                                    renderItem={(item) => (\n                                        <List.Item>\n                                            <div className=\"administration-certificate-modal-item\"\n                                                onClick={() => setSelected({\n                                                    dataElement: item.id,\n                                                    displayName: item.displayName\n                                                })}\n                                            >{item.displayName}</div>\n                                        </List.Item>\n                                    )}\n                                />\n                            </>}\n                        </div>\n                    </div>\n                </div>\n            </Modal>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        certificateTemplateAdmin: state.admin.certificateTemplate,\n        certificateTemplateMetadata: state.metadata.certificateTemplate,\n        programMetadata: state.metadata.programMetadata\n    }\n}\n\nconst mapDispatchToProps = {\n    changeCerticateTemplate,\n    setCertificateLogo\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Certificate);","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/AssignUsers.jsx",["517","518","519"],"import { Card, Select, Transfer, Button, Row, Col } from \"antd\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\n/* REDUX */\nimport { connect } from \"react-redux\";\nimport { changeAssignUsers } from \"../../redux/actions/admin\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n/*       */\n\nconst AssignUsers = ({\n  admin: {\n    users: { admin: adminUsers, capture: captureUsers, view: viewUsers },\n  },\n  existedUserGroups,\n  changeAssignAdminUsers,\n  changeAssignCaptureUsers,\n  changeAssignViewUsers,\n}) => {\n  const { t } = useTranslation();\n  const [selectedKeys, setSelectedKeys] = useState({\n    admin: [],\n    capture: [],\n    view: [],\n  });\n  const changeSelectedKeys = (group) => (\n    sourceSelectedKeys,\n    targetSelectedKeys\n  ) =>\n    setSelectedKeys({\n      ...selectedKeys,\n      [group]: [].concat(sourceSelectedKeys).concat(targetSelectedKeys),\n    });\n  const showedUsers = (group) => {\n    // const map = {\n    //   admin: adminUsers,\n    //   capture: captureUsers,\n    //   view: viewUsers,\n    // };\n    // const users = [];\n    // const arr = Object.entries(map).map(([name, groupUsers]) => {\n    //   if (name !== group) {\n    //     return;\n    //   }\n    //   users.concat(groupUsers);\n    // });\n    // return existedUsers.filter((user) => !arr.includes[user.id]);\n    return existedUserGroups;\n  };\n\n  const onChange = (group) => (nextTargetKeys, direction, moveKeys) => {\n    switch (group) {\n      case \"admin\": {\n        changeAssignAdminUsers(nextTargetKeys);\n        break;\n      }\n      case \"capture\": {\n        changeAssignCaptureUsers(nextTargetKeys);\n        break;\n      }\n      case \"view\": {\n        changeAssignViewUsers(nextTargetKeys);\n        break;\n      }\n    }\n  };\n\n  // const onSelectChange = (group) => (\n  //   sourceSelectedKeys,\n  //   targetSelectedKeys\n  // ) => {\n  //   setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\n  // };\n\n  return (\n    <div className=\"administration-users-container\">\n      <Row style={{ margin: 10, width: \"100%\", height: \"100%\" }} gutter={16}>\n        <Col xs={8}>\n          <Card\n            style={{ height: \"100%\" }}\n            size=\"small\"\n            title={\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                {t(\"adminGroup\")}\n                <FontAwesomeIcon\n                  onClick={() => {}}\n                  icon={faInfoCircle}\n                  style={{\n                    marginLeft: 5,\n                    fontSize: 17,\n                    color: \"#878787\",\n                    cursor: \"pointer\",\n                  }}\n                />\n              </div>\n            }\n          >\n            <Transfer\n              showSearch\n              pagination={{\n                pageSize: 20,\n              }}\n              listStyle={{\n                width: \"50%\",\n                height: \"63vh\"\n              }}\n              dataSource={existedUserGroups.map(({ id, displayName }) => ({\n                key: id,\n                title: displayName,\n              }))}\n              // dataSource={existedUsers}\n              targetKeys={adminUsers}\n              selectedKeys={selectedKeys.admin}\n              render={(item) => item.title}\n              onChange={onChange(\"admin\")}\n              onSelectChange={changeSelectedKeys(\"admin\")}\n            />\n          </Card>\n        </Col>\n        <Col xs={8}>\n          <Card\n            style={{ height: \"100%\" }}\n            size=\"small\"\n            title={\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                {t(\"captureGroup\")}\n                <FontAwesomeIcon\n                  onClick={() => {}}\n                  icon={faInfoCircle}\n                  style={{\n                    marginLeft: 5,\n                    fontSize: 17,\n                    color: \"#878787\",\n                    cursor: \"pointer\",\n                  }}\n                />\n              </div>\n            }\n          >\n            <Transfer\n              showSearch\n              pagination={{\n                pageSize: 20,\n              }}\n              listStyle={{\n                width: \"50%\",\n                height: \"63vh\"\n              }}\n              dataSource={showedUsers(\"capture\").map(({ id, displayName }) => ({\n                key: id,\n                title: displayName,\n              }))}\n              targetKeys={captureUsers}\n              selectedKeys={selectedKeys.capture}\n              render={(item) => item.title}\n              onChange={onChange(\"capture\")}\n              onSelectChange={changeSelectedKeys(\"capture\")}\n            />\n          </Card>\n        </Col>\n        <Col xs={8}>\n          <Card\n            style={{ height: \"100%\" }}\n            size=\"small\"\n            title={\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                {t(\"viewGroup\")}\n                <FontAwesomeIcon\n                  onClick={() => {}}\n                  icon={faInfoCircle}\n                  style={{\n                    marginLeft: 5,\n                    fontSize: 17,\n                    color: \"#878787\",\n                    cursor: \"pointer\",\n                  }}\n                />\n              </div>\n            }\n          >\n            <Transfer\n              showSearch\n              pagination={{\n                pageSize: 20,\n              }}\n              listStyle={{\n                width: \"50%\",\n                height: \"63vh\"\n              }}\n              dataSource={showedUsers(\"view\").map(({ id, displayName }) => ({\n                key: id,\n                title: displayName,\n              }))}\n              targetKeys={viewUsers}\n              selectedKeys={selectedKeys.view}\n              render={(item) => item.title}\n              onChange={onChange(\"view\")}\n              onSelectChange={changeSelectedKeys(\"view\")}\n            />\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    admin: state.admin,\n    existedUserGroups: state.metadata.userGroups,\n  };\n};\n\nconst mapDispatchToProps = {\n  changeAssignAdminUsers: changeAssignUsers(\"admin\"),\n  changeAssignCaptureUsers: changeAssignUsers(\"capture\"),\n  changeAssignViewUsers: changeAssignUsers(\"view\"),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AssignUsers);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/Review.jsx",["520","521","522","523","524","525"],"import {\n  Card,\n  Row,\n  Col,\n  Table,\n  Collapse,\n  Switch,\n  // Checkbox\n} from \"antd\";\nimport { Hooks, Components } from \"tracker-capture-app-core\";\n/* REDUX */\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { defaultAttributes } from \"../../utils/const\";\nimport { generateDefaultMetadata, generateCustomMetadata, updateProgramIndicators, updateSQLViews } from \"../../utils/generateMetadata\";\nimport { setInstallingFile } from \"../../redux/actions/admin\";\nimport { setFormMapping } from \"../../redux/actions/metadata\";\nimport { useTranslation } from \"react-i18next\";\n/*       */\nconst { useApi } = Hooks;\nconst { LoadingMask } = Components;\n\n// Temporally here\nconst fixedSections = require(\"../../asset/metadata/programStageSections.json\").programStageSections.slice(6,10);\nconst fixedDEs = require(\"../../asset/metadata/dataElements.json\").dataElements;\n\nconst Review = ({\n  admin: {\n    trackedEntityAttributes,\n    dataElements,\n    trackedEntityType,\n    assignedOrgUnits,\n    users,\n    type: installType,\n    fullnameOption,\n    femaleOption\n    // installingFile: metadata\n  },\n  allTeas,\n  allExistedDataElements,\n  allExistedUserGroups,\n  setInstallingFile,\n  setFormMapping\n}) => {\n  const { t } = useTranslation();\n  const { metadataApi } = useApi();\n\n  const [metadata, setMetadata] = useState(null);\n  const [generateNewUID, setgenerateNewUID] = useState(false);\n\n  const getAttr = (id) => allTeas.find(({ id: attrId }) => attrId === id);\n  const getUser = (id) => allExistedUserGroups.find(({ id: userId }) => userId === id);\n  const getDE = (id) => allExistedDataElements.find(({ id: deId }) => deId === id);\n  \n  const getUserGroupAccesses = () => {\n    let userAccesses = {};\n    for ( const group in users ) {\n      users[group].forEach( user => {\n        if ( !userAccesses[user] ) userAccesses[user] = [group];\n        else userAccesses[user].push(group);\n      });\n    }\n    let userGroupAccesses = [];\n    for ( const user in userAccesses ) {\n      let access = \"r-------\";\n      userAccesses[user].forEach( a => {\n        if ( a === \"admin\" ) access = access.substring(0,1) + \"wr\" + access.substring(3,8); \n        if ( a === \"capture\" ) access = access.substring(0,2) + \"rw\" + access.substring(4,8);\n        if ( a === \"view\" ) access = access.substring(0,2) + \"r\" + access.substring(3,8);\n      })\n      userGroupAccesses.push({\n        id: user,\n        access: access\n      })\n    }\n    return userGroupAccesses;\n  }\n\n  const getUserSharing = () => {\n    let userAccesses = {};\n    for ( const group in users ) {\n      users[group].forEach( user => {\n        if ( !userAccesses[user] ) userAccesses[user] = [group];\n        else userAccesses[user].push(group);\n      });\n    }\n    let sharing = { \n      \"public\": \"r-------\",\n      \"users\": {},\n      \"external\": false,\n      \"userGroups\": {} \n    };\n    for ( const user in userAccesses ) {\n      let access = \"r-------\";\n      userAccesses[user].forEach( a => {\n        if ( a === \"admin\" ) access = access.substring(0,1) + \"wr\" + access.substring(3,8); \n        if ( a === \"capture\" ) access = access.substring(0,2) + \"rw\" + access.substring(4,8);\n        if ( a === \"view\" ) access = access.substring(0,2) + \"r\" + access.substring(3,8);\n      })\n      sharing.userGroups[user] = {\n        id: user,\n        access: access\n      } \n    }\n    return sharing;\n  }\n    \n  useEffect( () => {\n    (async () => {\n      setMetadata(null);\n      let data = {};\n\n      // generate metadata (base on setting stored in redux)\n      if (installType === \"custom\") {\n        const ageAttribute = await metadataApi.get(`/api/trackedEntityAttributes.json`, { paging: false }, [`filter=id:eq:${trackedEntityAttributes.find(([,name]) => name === \"Age in years\")[0]}`,\"fields=:owner,!created,!lastUpdated,!createdBy,!lastUpdatedBy\"]);\n        data = generateCustomMetadata({trackedEntityAttributes,dataElements,trackedEntityType,fullnameOption}, generateNewUID,ageAttribute.trackedEntityAttributes[0]);\n        data.metadata.programIndicators = updateProgramIndicators(data.metadata.programIndicators,trackedEntityAttributes.find(([,name]) => name === \"Date of Birth\")[0],trackedEntityAttributes.find(([,name]) => name === \"Sex\")[0],femaleOption);\n        data.metadata.sqlViews = updateSQLViews(data.metadata.sqlViews,trackedEntityAttributes.find(([,name]) => name === \"Age in years\")[0],trackedEntityAttributes.find(([,name]) => name === \"Sex\")[0],femaleOption);\n      }\n      else {\n        data = generateDefaultMetadata(false,generateNewUID);\n      }\n\n      data.metadata = {\n        ...data.metadata,\n        programs: [{\n          ...data.metadata.programs[0],\n          organisationUnits: assignedOrgUnits.map( o => {return { id : o.substring(o.length-11,o.length) }}),\n          userGroupAccesses: getUserGroupAccesses(),\n          sharing: getUserSharing()\n        }]\n      };\n\n      // local state\n      setMetadata(data.metadata);\n\n      // redux\n      setInstallingFile(data.metadata);\n      setFormMapping(data.formMapping);\n\n      console.log(data)\n    })();\n  }, [generateNewUID]);\n  \n  const getSwitchValue = section => {\n    const sectionValue = dataElements.frameB.defaultSections.find(\n      ({name}) => section.name === name\n    );\n    if (sectionValue) {\n      return true;\n    }\n    return false;\n  };\n\n  const renderCustomAttributesStep = () => {\n    const otherAttributes = trackedEntityAttributes.filter(\n      ([, source]) => !source\n    );\n    const defAttrs = trackedEntityAttributes.filter(\n      ([des, source]) => source && des !== ''\n    );\n    return Array.from(\n      {\n        length: Math.max(otherAttributes.length, defAttrs.length),\n      },\n      (_, index) => {\n        const defaultAttr = defAttrs[index];\n        const defaultAttrName = !defaultAttr ? \"\" : (defaultAttr[1] === 'First Name' && fullnameOption === \"fullname\") ? \"Full Name\" : defaultAttr[1];\n        return {\n          key: index,\n          default: defaultAttrName,\n          name: defaultAttr && getAttr(defaultAttr[0]) ? getAttr(defaultAttr[0]).displayName : \"\",\n          other: otherAttributes[index]\n            ? getAttr(otherAttributes[index][0]).displayName\n            : \"\",\n        };\n      }\n    );\n  };\n\n  const renderDefaultAttributesStep = () => {\n    // return fullnameOption ? \n    // [\n    //   {key:0,default:\"Unique ID\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"COD System ID\").name,other:\"\"},\n    //   {key:1,default:\"Full Name\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Given name\").name,other:\"\"},\n    //   {key:2,default:\"Date of Birth\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Date of birth\").name,other:\"\"},\n    //   {key:3,default:\"Date of Birth is estimated\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Date of birth is estimated\").name,other:\"\"},\n    //   {key:4,default:\"Age in years\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Age (years)\").name,other:\"\"},\n    //   {key:5,default:\"Address\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Address (current)\").name,other:\"\"},\n    //   {key:6,default:\"Sex\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Sex\").name,other:\"\"}\n    // ] \n    // : \n    return [\n      {key:0,default:\"Unique ID\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"COD System ID\").name,other:\"\"},\n      {key:1,default:\"First Name\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Given name\").name,other:\"\"},\n      {key:2,default:\"Last Name\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Family name\").name,other:\"\"},\n      {key:3,default:\"Date of Birth\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Date of birth\").name,other:\"\"},\n      {key:4,default:\"Date of Birth is estimated\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Date of birth is estimated\").name,other:\"\"},\n      {key:5,default:\"Age in years\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Age (years)\").name,other:\"\"},\n      {key:6,default:\"Address\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Address (current)\").name,other:\"\"},\n      {key:7,default:\"Sex\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Sex\").name,other:\"\"}\n    ]\n  } \n\n  return (\n    <div className=\"administration-reviewfinish-container\">\n      {\n        (metadata === null) ? <LoadingMask /> : \n        <Row \n          style={{ \n            width: \"100%\", \n            height: \"100%\"\n          }} \n          gutter={[16, 24]}\n        >\n          {/* <Col span={18}\n            style={{ \n              width: \"100%\", \n              // height: \"100%\", \n              // overflow: \"auto\",\n              margin: \"auto\",\n              textAlign: \"center\"\n            }}  \n          >\n            <Checkbox checked={generateNewUID} onChange={() => setgenerateNewUID(!generateNewUID)}>Generate new UID for the installing metadata</Checkbox>\n          </Col> */}\n          <Col span={18}\n            style={{ \n              width: \"100%\", \n              height: \"100%\", \n              // overflow: \"auto\",\n              margin: \"auto\" \n            }} \n          >\n            <Card\n              style={{ marginBottom: 10 }}\n              type=\"inner\"\n              title={t(\"step2Attribute\")}\n            >\n              <Row>\n                <Table\n                  size=\"small\"\n                  bordered\n                  pagination={false}\n                  columns={[\n                    {\n                      title: t(\"defaultAttribute\"),\n                      colSpan: 2,\n                      dataIndex: \"default\"\n                    },\n                    {\n                      colSpan: 0,\n                      dataIndex: \"name\"\n                    },\n                    {\n                      title: t(\"otherAttributes\"),\n                      dataIndex: \"other\"\n                    },\n                  ]}\n                  dataSource={ installType === \"custom\" ? renderCustomAttributesStep() : renderDefaultAttributesStep()}\n                />\n              </Row>\n            </Card>\n            <Card style={{ marginBottom: 10 }} type=\"inner\" title={t(\"step3FrameA\")}>\n              <Row>\n                <Col xs={12}>\n                  <Card\n                    type=\"inner\"\n                    style={{ height: 255, overflow: \"auto\" }}\n                    size=\"small\"\n                    title={t(\"defaultSectionsInFrameB\")}\n                  >\n                    <Collapse\n                      // style={{ height: 500, overflow: \"auto\" }}\n                      defaultActiveKey={[]}\n                    >\n                      {/* {metadata.programStageSections.slice(0,6).map( section => { */}\n                      {metadata.programStageSections.slice(0,10).map( section => {\n                        return (\n                          <Collapse.Panel\n                            key={section.id}\n                            header={\n                              <div>\n                                <Switch\n                                  disabled\n                                  checked={true}\n                                  // onChange={changeSwitch(section)}\n                                  checkedChildren=\"Include\"\n                                  unCheckedChildren=\"Skip\"\n                                  style={{ marginRight: 8 }}\n                                />\n                                <strong>{section.name}</strong>\n                              </div>\n                            }\n                          >\n                            {section.dataElements.map( de => (\n                              <div key={de.id} className=\"administration-attribute\">\n                                {\n                                  metadata.dataElements.find(\n                                    ({ id }) => id === de.id\n                                  ).name\n                                }\n                              </div>\n                            ))}\n                          </Collapse.Panel>\n                        );\n                      })}\n                    </Collapse>\n                  </Card>\n                </Col>\n                <Col xs={12}>\n                  <Card\n                    type=\"inner\"\n                    style={{ height: 255, overflow: \"auto\" }}\n                    size=\"small\"\n                    title={t(\"otherSectionsInFrameA\")}\n                  >\n                    {(installType === \"custom\" ) && \n                      <Collapse defaultActiveKey={[\"1\"]}>\n                        {/* {dataElements.frameA.otherSections.map(([name, des], index) => ( */}\n                        {dataElements.form.otherSections.map(([name, des], index) => (\n                          <Collapse.Panel key={index} header={name}>\n                            <Table\n                              size=\"small\"\n                              bordered\n                              showHeader={false}\n                              pagination={false}\n                              columns={[\n                                {\n                                  dataIndex: 0\n                                }\n                              ]}\n                              dataSource={des.map((id) => [getDE(id).displayName])}\n                            />\n                          </Collapse.Panel>\n                        ))}\n                      </Collapse>\n                    }\n                  </Card>\n                </Col>\n              </Row>\n            </Card>\n            {/* <Card style={{ marginBottom: 10 }} type=\"inner\" title={t(\"step4FrameB\")}>\n              <Row>\n                <Col xs={12}>\n                  <Card\n                    type=\"inner\"\n                    style={{ height: 255, overflow: \"auto\" }}\n                    size=\"small\"\n                    title={t(\"defaultSectionsInFrameB\")}\n                  >\n                    <Collapse\n                      // style={{ height: 500, overflow: \"auto\" }}\n                      defaultActiveKey={[]}\n                    >\n                      {fixedSections.map( section => {\n                        return (\n                          <Collapse.Panel\n                            key={section.id}\n                            header={\n                              <div>\n                                <Switch\n                                  disabled\n                                  checked={installType === \"default\" ? true : getSwitchValue(section)}\n                                  // onChange={changeSwitch(section)}\n                                  checkedChildren=\"Include\"\n                                  unCheckedChildren=\"Skip\"\n                                  style={{ marginRight: 8 }}\n                                />\n                                <strong>{section.name}</strong>\n                              </div>\n                            }\n                          >\n                            {section.dataElements.map( de => (\n                              <div key={de.id} className=\"administration-attribute\">\n                                {\n                                  fixedDEs.find(\n                                    ({ id }) => id === de.id\n                                  ).name\n                                }\n                              </div>\n                            ))}\n                          </Collapse.Panel>\n                        );\n                      })}\n                    </Collapse>\n                  </Card>\n                </Col>\n                <Col xs={12}>\n                  <Card\n                    type=\"inner\"\n                    style={{ height: 255, overflow: \"auto\" }}\n                    size=\"small\"\n                    title={t(\"otherSectionsInFrameB\")}\n                  >\n                    {(installType === \"custom\" ) && \n                      <Collapse>\n                        {dataElements.frameB.otherSections.map(([name,des], index) => {\n                          return (\n                            <Collapse.Panel key={index} header={name}>\n                              <Table\n                                size=\"small\"\n                                bordered\n                                showHeader={false}\n                                pagination={false}\n                                columns={[\n                                  {\n                                    dataIndex: 0\n                                  }\n                                ]}\n                                dataSource={des.map( de => [\n                                  getDE(de).displayName\n                                ])}\n                              />\n                            </Collapse.Panel>\n                          );\n                        })}\n                      </Collapse>\n                    }\n                  </Card>\n                </Col>\n              </Row>\n            </Card> */}\n            <Card\n              style={{ marginBottom: 10 }}\n              type=\"inner\"\n              title={t(\"step5OUs\")}\n            >\n              <div>\n                Number of OrgUnits assigned:{\" \"}\n                <strong>{assignedOrgUnits.length}</strong> org units\n              </div>\n            </Card>\n            <Card\n              style={{ marginBottom: 10 }}\n              type=\"inner\"\n              title={t(\"step6Users\")}\n            >\n              <Row>\n                <Col xs={24}>\n                  <Table\n                    size=\"small\"\n                    scroll={{\n                      y: \"calc(255px - 39px)\",\n                    }}\n                    bordered\n                    // showHeader={false}\n                    header={t(\"adminGroup\")}\n                    pagination={false}\n                    columns={[\n                      {\n                        title: t(\"adminGroup\"),\n                        dataIndex: \"admin\",\n                      },\n                      {\n                        title: t(\"captureGroup\"),\n                        dataIndex: \"capture\",\n                      },\n                      {\n                        title: t(\"viewGroup\"),\n                        dataIndex: \"view\",\n                      },\n                    ]}\n                    dataSource={Array.from(\n                      {\n                        length: Math.max(\n                          users.admin.length,\n                          users.capture.length,\n                          users.view.length\n                        ),\n                      },\n                      (_, index) => {\n                        return {\n                          key: index,\n                          admin: users.admin[index]\n                            ? getUser(users.admin[index]).displayName\n                            : \"\",\n                          capture: users.capture[index]\n                            ? getUser(users.capture[index]).displayName\n                            : \"\",\n                          view: users.view[index]\n                            ? getUser(users.view[index]).displayName\n                            : \"\",\n                        };\n                      }\n                    )}\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        </Row>\n      }\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    admin: state.admin,\n    allTeas: state.metadata.trackedEntityAttributes,\n    allExistedDataElements: state.metadata.dataElements,\n    allExistedUserGroups: state.metadata.userGroups,\n  };\n};\n\nconst mapDispatchToProps = {\n  setInstallingFile,\n  setFormMapping\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Review);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/Finish.jsx",["526","527"],"import { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    Result,\n    Modal, \n    Button\n    // Row,\n    // Col,\n    // Button,\n    // Checkbox\n} from \"antd\";\nimport { CloseCircleOutlined, CheckCircleOutlined } from '@ant-design/icons';\nimport { Hooks, Components } from \"tracker-capture-app-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { setProgramMetadata, getICD11Options, setFemaleCode, setCertificateTemplate, setTeas, setTrackerDataElements } from \"../../redux/actions/metadata\";\nimport { setUserRole } from \"../../redux/actions/user\";\n// import { getICD11Options } from \"../../redux/actions/admin\";\nconst { useApi } = Hooks;\nconst { LoadingMask } = Components;\n\nconst Finish = ({\n    open,\n    metadata,\n    programMetadata,\n    formMapping,\n    femaleOption,\n    fullnameOption,\n    setProgramMetadata,\n    getICD11Options,\n    setFemaleCode,\n    setCertificateTemplate, setTeas, setTrackerDataElements, setUserRole\n}) => {\n    const { t } = useTranslation();\n    const { metadataApi } = useApi();\n    \n    const [results, setResults] = useState({});\n    const [status, setStatus] = useState({\n        title: t(\"installing\"),\n        subTitle: t(\"waitForInstalling\"),\n        status: \"installing\"\n    })\n\n    const importMetadata = async () => {\n        let temp = {};\n\n        setStatus({...status, subTitle: \"Loading metadata ...\"});\n        const icd11Options = require(\"../../asset/metadata/icd11_options.json\");\n        \n        if (metadata[\"attributes\"]) {\n            setStatus({...status, subTitle: t(\"importAttributes\")});\n            await metadataApi.push(`/api/metadata`, { attributes: metadata[\"attributes\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    attributes: response\n                };\n                setResults(temp);\n            });\n        }\n        if (metadata[\"legendSets\"]) {\n            setStatus({...status, subTitle: t(\"legendSets\")});\n            await metadataApi.push(`/api/metadata`, { legendSets: metadata[\"legendSets\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    legendSets: response\n                };\n                setResults(temp);\n            });\n        }\n        if (metadata[\"optionSets\"]) {\n            setStatus({...status, subTitle: t(\"importOptionSets\")});\n            await metadataApi.push(`/api/metadata`, { optionSets: metadata[\"optionSets\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    optionSets: response\n                };\n                setResults(temp);\n            });\n        }\n\n        // metadataApi.push(`/api/metadata`, icd11Options )\n        // .then(response => {\n        //     temp = {\n        //         ...temp,\n        //         icd11Options: response\n        //     };\n        //     setResults(temp);\n        // });\n        metadataApi.push(`/api/metadata?importStrategy=CREATE_AND_UPDATE&async=true`, icd11Options )\n        .then(async response => {\n            let importComplete = false;\n            while (!importComplete) {\n                const importReport = await metadataApi.get(response.response.relativeNotifierEndpoint);\n                if ( importReport.find(report => report.completed) ) {\n                    importComplete = true;\n                    temp = {\n                        ...temp,\n                        icd11Options: response\n                    };\n                    setResults(temp);\n                }\n                else {\n                    if ( Object.keys(results).length === Object.keys(metadata).length ) {\n                        setStatus({...status, subTitle: \"Import ICD11 options\"});\n                    }\n                }\n            }\n        });\n\n        if (metadata[\"options\"]) {\n            setStatus({...status, subTitle: t(\"importOptions\")});\n            await metadataApi.push(`/api/metadata`, { options: metadata[\"options\"]})\n            .then(async response => {\n                temp = {\n                    ...temp,\n                    options: response\n                };\n                setResults(temp);\n            });\n        }\n\n        if (metadata[\"trackedEntityAttributes\"]) {\n            setStatus({...status, subTitle: t(\"importTrackedEntityAttributes\")});\n            await metadataApi.push(`/api/metadata`, { trackedEntityAttributes: metadata[\"trackedEntityAttributes\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    trackedEntityAttributes: response\n                };\n                setResults(temp);\n            });\n        }\n        if (metadata[\"trackedEntityTypes\"]) {\n            setStatus({...status, subTitle: t(\"importTrackedEntityTypes\")});\n            await metadataApi.push(`/api/metadata`, { trackedEntityTypes: metadata[\"trackedEntityTypes\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    trackedEntityTypes: response\n                };\n                setResults(temp);\n            });\n        }\n        if (metadata[\"dataElements\"]) {\n            setStatus({...status, subTitle: t(\"importDataElements\")});\n            await metadataApi.push(`/api/metadata`, { dataElements: metadata[\"dataElements\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    dataElements: response\n                };\n                setResults(temp);\n            });\n        }\n        if (metadata[\"programs\"]) {\n            setStatus({...status, subTitle: t(\"importPrograms\")});\n            await metadataApi.push(`/api/metadata`, { programs: metadata[\"programs\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    programs: response\n                };\n                setResults(temp);\n            });\n        }\n        if (metadata[\"programStages\"]) {\n            setStatus({...status, subTitle: t(\"importProgramStages\")});\n            await metadataApi.push(`/api/metadata`, { programStages: metadata[\"programStages\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    programStages: response\n                };\n                setResults(temp);\n            });\n        }\n        if (metadata[\"programStageSections\"]) {\n            setStatus({...status, subTitle: t(\"importProgramStageSections\")});\n            await metadataApi.push(`/api/metadata`, { programStageSections: metadata[\"programStageSections\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    programStageSections: response\n                };\n                setResults(temp);\n            });\n        }\n        if (metadata[\"programIndicators\"]) {\n            setStatus({...status, subTitle: t(\"programIndicators\")});\n            await metadataApi.push(`/api/metadata`, { programIndicators: metadata[\"programIndicators\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    programIndicators: response\n                };\n                setResults(temp);\n            });\n        }\n        if (metadata[\"indicatorTypes\"]) {\n            setStatus({...status, subTitle: t(\"indicatorTypes\")});\n            await metadataApi.push(`/api/metadata`, { indicatorTypes: metadata[\"indicatorTypes\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    indicatorTypes: response\n                };\n                setResults(temp);\n            });\n        }\n        if (metadata[\"indicators\"]) {\n            setStatus({...status, subTitle: t(\"indicators\")});\n            await metadataApi.push(`/api/metadata`, { indicators: metadata[\"indicators\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    indicators: response\n                };\n                setResults(temp);\n            });\n        }\n        if (metadata[\"sqlViews\"]) {\n            setStatus({...status, subTitle: t(\"sqlViews\")});\n            await metadataApi.push(`/api/metadata`, { sqlViews: metadata[\"sqlViews\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    sqlViews: response\n                };\n                setResults(temp);\n            });\n        }\n        if (metadata[\"optionGroups\"]) {\n            setStatus({...status, subTitle: t(\"optionGroups\")});\n            await metadataApi.push(`/api/metadata`, { optionGroups: metadata[\"optionGroups\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    optionGroups: response\n                };\n                setResults(temp);\n            });\n        }\n        if (metadata[\"optionGroupSets\"]) {\n            setStatus({...status, subTitle: t(\"optionGroupSets\")});\n            await metadataApi.push(`/api/metadata`, { optionGroupSets: metadata[\"optionGroupSets\"]})\n            .then(response => {\n                temp = {\n                    ...temp,\n                    optionGroupSets: response\n                };\n                setResults(temp);\n            });\n        }\n    }\n\n    useEffect(() => {\n        if ( open ) {\n            if ( programMetadata === null && status.status === \"installing\" ) {\n                importMetadata();\n            } else {\n                setStatus({\n                    title: t(\"complete\"),\n                    subTitle: `${t(\"programID\")} ${programMetadata.id}`,\n                    status: \"finish\"\n                })\n            }\n        }\n    }, [open])\n\n    useEffect(() => {\n        if ( open && Object.keys(results).length === ( Object.keys(metadata).length + 1 ) ) {\n\n            const certtificateTemplate = {\n                title: \"Medical Certificate of Cause of Death - specimen\",\n                logo: null,\n                info: [{\n                    label: \"Date of Death\",\n                    enrollment: \"incidentDate\"\n                },\n                {\n                    label: \"Reported Date\",\n                    enrollment: \"enrollmentDate\"\n                },\n                {\n                    label: \"COD System ID\",\n                    trackedEntityAttribute: formMapping.attributes[\"system_id\"]\n                },\n                {\n                    label: \"Date of Birth\",\n                    trackedEntityAttribute: formMapping.attributes[\"dob\"]\n                },\n                {\n                    label: \"Date of Birth is estimated\",\n                    trackedEntityAttribute: formMapping.attributes[\"estimated_dob\"]\n                },\n                {\n                    label: \"Age in years\",\n                    trackedEntityAttribute: formMapping.attributes[\"age\"]\n                },\n                {\n                    label: \"Address\",\n                    trackedEntityAttribute: formMapping.attributes[\"address\"]\n                },\n                {\n                    label: \"Sex\",\n                    trackedEntityAttribute: formMapping.attributes[\"sex\"]\n                },\n                {\n                    label: \"Underlying Cause of Death\",\n                    dataElement: formMapping.dataElements[\"underlyingCOD\"]\n                },\n                {\n                    label: \"ICD-11\",\n                    dataElement: formMapping.dataElements[\"underlyingCOD_code\"]\n                }],\n                footer: [{\n                    label: \"Institution Name\",\n                    enrollment: \"orgUnit\"\n                },\n                {\n                    label: \"Certificate Date\",\n                    enrollment: \"enrollmentDate\"\n                }]\n            }\n\n            Promise.all([\n                metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/program\", {\n                    id: metadata[\"programs\"][0].id,\n                    metadataUpdatedDate: \"2025-05-05\", // Change to the date to the last updated date\n                    version: \"2.0.1\"\n                }, \"PUT\"),\n                metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/femaleOption\", {code: femaleOption}, \"PUT\"),\n                metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/icdOptionSet\", {id: metadata[\"optionSets\"].find( ({code}) => code === \"icd11\").id}, \"PUT\"),\n                metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/formMapping\", formMapping, \"PUT\"),\n                metadataApi.get(\"/api/options.json\", { paging: false }, [\n                    \"fields=id,name,code,attributeValues[value,attribute[id]]\",\n                    `filter=optionSet.id:eq:${metadata[\"optionSets\"].find( ({code}) => code === \"icd11\").id}`\n                ]),\n                metadataApi.push(\n                    \"/api/dataStore/WHO_ICD11_COD/certificateTemplate\",\n                    { certificate: certtificateTemplate },\n                    \"PUT\"\n                ),\n                metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/fullnameOption\", {fullnameOption: fullnameOption}, \"PUT\")\n            ])\n            .then( res => {\n                setFemaleCode(femaleOption);\n                setCertificateTemplate(certtificateTemplate);\n                getICD11Options(res[4].options);\n                setStatus({\n                    title: t(\"complete\"),\n                    subTitle: `${t(\"programID\")} ${metadata[\"programs\"][0].id}`,\n                    status: \"finish\"\n                });\n            });\n        }\n    }, [results])\n\n    return (\n        <Modal\n            width={\"50%\"}\n            bodyStyle={{\n                height: \"100%\",\n            }}\n            centered\n            visible={open}\n            closable={false}\n            footer={false}\n        >\n            <div style={{\n                height: \"55vh\"\n            }}>\n                <Result\n                icon={( status.status === \"installing\" ) ? <LoadingMask /> : <CheckCircleOutlined />}\n                title={status.title}\n                subTitle={status.subTitle}\n                extra={<Button \n                    disabled={status.status !== \"finish\"} \n                    type=\"primary\" key=\"complete\"\n                    onClick={() => {\n                        setStatus({\n                            ...status,\n                            status: \"installing\",\n                            title: \"Loading metadata\"\n                        });\n                        Promise.all([\n                            metadataApi.get(\"/api/trackedEntityAttributes.json\", { paging: false }, [\"fields=id,displayName,valueType,optionSet,formName\"]),\n                            metadataApi.getTrackerDataElements(),\n                            metadataApi.getProgramMetadata(metadata[\"programs\"][0].id),\n                            metadataApi.getMe()\n                        ]).then( results => {\n                            setTeas(results[0].trackedEntityAttributes);\n                            setTrackerDataElements(results[1].dataElements);\n                            setProgramMetadata(results[2]);\n                            setStatus({\n                                ...status,\n                                status: \"finish\",\n                                title: \"Install Complete\"\n                            });\n                            let roles = {\n                                admin: false,\n                                data: false,\n                                view: false\n                              };\n                            results[3].userGroups.forEach( userGroup => {\n                            const role = results[2].userGroupAccesses.find( ({id}) => id === userGroup.id );\n                            if ( role ) {\n                                if ( role.access.charAt(1) === 'w' ) {\n                                roles = {\n                                    ...roles,\n                                    admin: true\n                                }\n                                }\n                                if ( role.access.charAt(3) === 'w' ) {\n                                roles = {\n                                    ...roles,\n                                    data: true\n                                }\n                                }\n                                if ( role.access.charAt(0) === 'r' && role.access.charAt(2) === 'r'  ) {\n                                roles = {\n                                    ...roles,\n                                    view: true\n                                }\n                                }\n                            }\n                            });\n                            setUserRole(roles);\n                        });\n                    }}\n                >\n                    Finish\n                </Button>}\n            >\n                {\n                    ( programMetadata === null || Object.keys(results).length !== 0 ) && Object.keys(results).map( (key, index) => \n                    (<div key={index}>\n                    {\n                        (results[key].status === \"OK\") ? <CheckCircleOutlined style={{color: \"blue\"}} /> : <CloseCircleOutlined style={{color: \"red\"}} />\n                    }\n                    {\n                        ` ${key}`\n                    }\n                    </div>))\n                }\n            </Result>\n            </div>\n        </Modal>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        metadata: state.admin.installingFile,\n        formMapping: state.metadata.formMapping,\n        femaleOption: state.admin.femaleOption,\n        fullnameOption: state.admin.fullnameOption,\n        programMetadata: state.metadata.programMetadata\n    }\n}\n\nconst mapDispatchToProps = {\n    setProgramMetadata,\n    getICD11Options,\n    setFemaleCode,\n    setCertificateTemplate,\n    setTeas,\n    setTrackerDataElements,\n    setUserRole\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Finish);","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Search/Result.jsx",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Form/WarningDialog.jsx",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Form/DeleteDialog.jsx",["528","529"],"\nimport { useState } from \"react\";\nimport { \n    Button,\n    Dialog, DialogTitle, DialogContent, DialogActions,\n    Divider\n  } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\n\n  const DeleteTEIDialog = ({open,handleTEICancel,handleDeleteTEI}) => {\n    const { t } = useTranslation();\n    return <Dialog\n        open={open}\n    >\n        <DialogTitle>Delete Tracked Entity Instance</DialogTitle>\n        <DialogContent>\n            Delete this Tracked Entity Instance will delete its associate enrollments from other programs\n        </DialogContent>\n        <Divider />\n        <DialogActions>\n            <Button\n                variant=\"outlined\"\n                size=\"small\"\n                style={{ width: \"120px\" }}\n                onClick={() => {\n                    handleTEICancel()\n                }}\n            >Cancel</Button>\n            <Button\n                variant=\"contained\"\n                size=\"small\"\n                color=\"error\"\n                style={{ width: \"120px\" }}\n                onClick={() => {\n                    handleDeleteTEI()\n                }}\n            >Delete</Button>\n        </DialogActions>\n    </Dialog>\n  }\n\n  const DeleteDialog= ({open, handleDeleteEnrollment, handleDeleteTEI, handleCancel}) => {\n    const { t } = useTranslation();\n    const [openTEI, setOpenTEI] = useState(false);\n    return <><Dialog\n        open={open}\n        fullWidth\n        maxWidth=\"sm\"\n    >\n        <DialogTitle>Delete Confirmation</DialogTitle>\n        <DialogContent>\n            <table>\n                <tr>\n                    <td width=\"30%\"><strong>Unenrollment</strong></td>\n                    <td width=\"70%\">Remove this profile from the program.</td>\n                </tr>\n                <tr>\n                    <td><strong>Delete</strong></td>\n                    <td>Permanently remove this profile.</td>\n                </tr>\n            </table>\n        </DialogContent>\n        <Divider />\n        <DialogActions>\n            <Button\n                variant=\"outlined\"\n                size=\"small\"\n                onClick={() => {\n                    handleCancel();\n                }}\n                style={{ width: \"120px\" }}\n            >Cancel</Button>\n            <Button\n                variant=\"outlined\"\n                size=\"small\"\n                color=\"error\"\n                onClick={() => {\n                    handleDeleteEnrollment();\n                }}\n                style={{ width: \"120px\" }}\n            >Unenroll</Button>\n            <Button\n                variant=\"contained\"\n                size=\"small\"\n                color=\"error\"\n                onClick={() => {\n                    setOpenTEI(true)\n                }}\n                style={{ width: \"120px\" }}\n            >Delete</Button>\n        </DialogActions>\n    </Dialog>\n    <DeleteTEIDialog \n        open={openTEI}\n        handleTEICancel={() => setOpenTEI(false)}\n        handleDeleteTEI={handleDeleteTEI}\n    />\n    </>\n  }\n\n  export default DeleteDialog;","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/run.js",["530","531"],"import example from \"./pages/example\";\nimport page0 from \"./pages/page0\";\nimport page1 from \"./pages/page1\";\nimport page2 from \"./pages/page2\";\nimport page3 from \"./pages/page3\";\nimport page4 from \"./pages/page4\";\nimport page5 from \"./pages/page5\";\nimport page6 from \"./pages/page6\";\nimport page7 from \"./pages/page7\";\nimport page8 from \"./pages/page8\";\nimport page9 from \"./pages/page9\"\n\nconst run = (t) => {\n  return [\n    // example,\n    page1(t),\n    page2(t),\n    page3(t),\n    page4(t),\n    page5(t),\n    page6(t),\n    page7(t),\n    page8(t),\n    page9(t),\n    // page0\n  ];\n};\n\nexport default run;\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/utils/generateChildChart.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/utils.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/WidgetContainer/WidgetContainer.jsx",["532","533"],"import React, { useState, useEffect } from \"react\";\nimport { SyncLoader } from \"react-spinners\";\nimport { IoChevronDown } from \"react-icons/io5\";\nimport { Bar, StackedBarChart, VerticalStackedBarChart, DoubleStackedBarChart, CombinedChart, Map, Statistic, Line, Pie, Html, Treemap, Bublemap, Nodata } from \"../Widget\";\nimport { Menu, Dropdown, Tooltip } from \"antd\";\nimport IconButton from \"../IconButton\";\nimport \"./WidgetContainer.css\";\n\nimport { connect } from \"react-redux\";\n\nimport generateChildCharts from \"../utils/generateChildCharts\";\nimport { analyticData } from \"../../../utils/const\";\nimport { Hooks } from \"tracker-capture-app-core\";\nconst { useApi } = Hooks;\n\n//Why using forward ref: https://github.com/react-grid-layout/react-grid-layout#custom-child-components-and-draggable-handles\nconst WidgetContainer = React.forwardRef(({ style, className, selectedOrgUnit, formMapping, femaleCode, ...props }, ref) => {\n  const { metadataApi } = useApi();\n  \n  const [selectedChild, setSelectedChild] = useState(0);\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const { children } = props.widget;\n  const currentChild = children[selectedChild];\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n\n      // Generate template\n      const result = await currentChild.getData();\n\n      let flag = true;\n      if ( analyticData[`page${props.widget.i.split(\".\")[0]}`] ) {\n        const page = analyticData[`page${props.widget.i.split(\".\")[0]}`];\n        if ( page[props.widget.i] && props.widget.i.split(\".\")[0] !== \"2\" ) {\n          flag = false;\n\n          if ( page[props.widget.i] === \"no_data\" ) {\n            setData({\n              ...{\n                data: generateChildCharts(\n                  props.widget.i,\n                  null,\n                  result,\n                  femaleCode\n                )\n              }\n            })\n          }\n          else {\n            let url = currentChild[\"codes\"] ? page[props.widget.i].replace(\"[CAUSE_GROUP_CODE]\",currentChild[\"codes\"]).replaceAll(\"[YEAR]\",props.period) : page[props.widget.i].replaceAll(\"[YEAR]\",props.period);\n            if (url.includes(\"[ATTRIBUTE_SEX]\")) {\n              url = url.replace(\"[ATTRIBUTE_SEX]\",formMapping.attributes[\"sex\"]);\n            }\n            if (url.includes(\"[ATTRIBUTE_AGE]\")) {\n              url = url.replace(\"[ATTRIBUTE_AGE]\",formMapping.attributes[\"age\"]);\n            }\n            const data = await metadataApi.pull(url.replace(\"[ORG]\",selectedOrgUnit ? selectedOrgUnit.id : \"USER_ORGUNIT\"));\n\n            setData({ \n              ...{ \n                data: generateChildCharts(\n                  props.widget.i,\n                  data,\n                  result,\n                  femaleCode,\n                  formMapping.attributes[\"sex\"],\n                  formMapping.attributes[\"age\"]\n                ),\n                colors: result.colors\n              } \n            });\n          }\n        } else if ( props.widget.i.split(\".\")[0] === \"2\" ) {\n          flag = false;\n\n          let url = currentChild[\"codes\"] ? analyticData.page2[\"2.1\"].replace(\"[CAUSE_GROUP_CODE]\",currentChild[\"codes\"]).replaceAll(\"[YEAR]\",props.period) : page[props.widget.i].replaceAll(\"[YEAR]\",props.period);\n          if (url.includes(\"[ATTRIBUTE_SEX]\")) {\n            url = url.replace(\"[ATTRIBUTE_SEX]\",formMapping.attributes[\"sex\"]);\n          }\n          if (url.includes(\"[ATTRIBUTE_AGE]\")) {\n            url = url.replace(\"[ATTRIBUTE_AGE]\",formMapping.attributes[\"age\"]);\n          }\n          const data = await metadataApi.pull(url.replace(\"[ORG]\",selectedOrgUnit ? selectedOrgUnit.id : \"USER_ORGUNIT\"));\n\n          setData({ \n            ...{ \n              data: generateChildCharts(\n                \"2.1\",\n                data,\n                result,\n                femaleCode,\n                formMapping.attributes[\"sex\"],\n                formMapping.attributes[\"age\"]\n              ),\n              colors: result.colors\n            } \n          });\n        }\n      }\n\n      if ( flag ) {\n        setData({ ...result });\n      }\n      setLoading(false);\n    })();\n  }, [selectedChild,props.period]);\n\n  const generateWidget = () => {\n    switch (currentChild.type) {\n      case \"bar\":\n        return <Bar data={data} />;\n      case \"line\":\n        return <Line data={data} />;\n      case \"pie\":\n        return <Pie data={data} />;\n      case \"statistic\":\n        return <Statistic data={data} />;\n      case \"stackedBar\":\n        return <StackedBarChart data={data} />;\n      case \"verticalStackedBar\":\n        return <VerticalStackedBarChart data={data} />;\n      case \"doubleStackedBar\":\n        return <DoubleStackedBarChart data={data} />;\n      case \"combined\":\n        return <CombinedChart data={data} />;\n      case \"map\":\n        return <Map data={data} />;\n      case \"html\":\n        return <Html data={data} />;\n      case \"treemap\":\n        return <Treemap data={data} />;\n      case \"bubble\": \n        return <Bublemap data={data}/>\n      default:\n        return <Nodata data={data}/>;\n    }\n  };\n\n  return (\n    <div style={{ ...style }} className={\"widget-wrapper \" + className} ref={ref}>\n      <div className=\"widget-container\">\n        <div className=\"widget-header\">\n          <div className=\"widget-title-container\">\n            {children.length > 1 ? (\n              <Dropdown\n                overlay={\n                  <Menu>\n                    {children.map((child, index) => {\n                      return (\n                        <Menu.Item\n                          key={index}\n                          onClick={() => {\n                            if (index !== selectedChild) {\n                              setLoading(true);\n                              setSelectedChild(index);\n                            }\n                          }}\n                        >\n                          {child.title}\n                        </Menu.Item>\n                      );\n                    })}\n                  </Menu>\n                }\n              >\n                <div className=\"page-label\">\n                  <div className=\"widget-title\">{currentChild.title}</div>&nbsp;&nbsp;\n                  <IoChevronDown />\n                </div>\n              </Dropdown>\n            ) : (\n              <div className=\"widget-title\">{currentChild.title}</div>\n            )}\n            {currentChild.subTitle && <div className=\"widget-sub-title\">{currentChild.subTitle}</div>}\n          </div>\n          <div className=\"widget-menu-container\">\n            <IconButton icon=\"menu\" />\n          </div>\n        </div>\n        <div className=\"widget\">{loading ? <SyncLoader color=\"#757575\" margin={8} size={15} /> : generateWidget()}</div>\n      </div>\n    </div>\n  );\n});\n\nconst mapStateToProps = state => {\n  return {\n    selectedOrgUnit: state.metadata.selectedOrgUnit,\n    formMapping: state.metadata.formMapping,\n    femaleCode: state.metadata.femaleCode\n  }\n}\n\nexport default connect(mapStateToProps)(WidgetContainer);\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/redux/actions/data/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/InputField/index.js",["534","535"],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/utils/certificate.js",["536"],"import { PDFDocument, StandardFonts } from \"pdf-lib\";\nimport fontkit from '@pdf-lib/fontkit';\n\nasync function fillPdf(pdfFileTemplate,labels,customFont) {\n    const reponsePDFBuffer = await pdfFileTemplate.arrayBuffer();\n\n    const pdfDoc = await PDFDocument.load(reponsePDFBuffer);\n    pdfDoc.registerFontkit(fontkit);\n\n    const pages = pdfDoc.getPages();\n\n    const PAGE_HEIGHT = pages[0].getSize().height;\n\n    const font = await pdfDoc.embedFont(customFont !== null ? customFont : StandardFonts.Helvetica);\n    const standardFont = await pdfDoc.embedFont(StandardFonts.Helvetica);\n    \n\n    // const HelveticaBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);\n    // const FONT_SIZE = 12;\n    // const pages = pdfDoc.getPages();\n    // const PAGE_HEIGHT = pages[0].getSize().height;\n\n    // pages[0].drawText(value, {\n    //     x,\n    //     y: PAGE_HEIGHT - y,\n    //     size: FONT_SIZE,\n    //     font\n    // });\n\n    // const qrCodeImage = await pdfDoc.embedPng(qrCodeImageFile);\n    // pages[0].drawImage(qrCodeImage, {\n    //     x: layout.qr.x,\n    //     y: PAGE_HEIGHT - layout.qr.y,\n    //     width: layout.qr.width,\n    //     height: layout.qr.height,\n    // });\n\n    // const checkboxImageUrl = 'check-mark.jpg';\n    // const checkboxImageBytes = await fetch(checkboxImageUrl).then( res => res.arrayBuffer() );\n    // console.log(checkboxImageBytes);\n    // const checkboxImage = await pdfDoc.embedPng(checkboxImageBytes);\n    // console.log(\"image\");\n    // const checkmarkSymbol = '✓';\n    Object.values(labels).map(({ label, value, page, valueType, coordinates, size }) => {\n        if ( valueType === \"text\" ) {\n            pages[page - 1].drawText( value.indexOf(\"#{\") >= 0 ? label : value, {\n                x: coordinates[0],\n                y: PAGE_HEIGHT - coordinates[1],\n                size,\n                font: font\n            });\n        }\n        else if ( valueType === \"check\" ) {\n            pages[page - 1].drawText( value.indexOf(\"#{\") >= 0 ? \"X\" : value, {\n                x: coordinates[0],\n                y: PAGE_HEIGHT - coordinates[1],\n                size,\n                font: standardFont\n            });\n        }\n    });\n\n    return pdfDoc;\n}\n\nconst convertPdfDoc2FileURL = async pdfDoc => {\n    let byteArray = await pdfDoc.save();\n    let file = new Blob([byteArray], {\n        type: \"application/pdf;base64\",\n    });\n    return URL.createObjectURL(file);\n}\n\nconst showPage = async (pdfDoc, page_no) => {\n    if ( pdfDoc ) {\n        const binaryData = await pdfDoc.save();\n        let _PDF_DOC;\n        try {\n            _PDF_DOC = await window.pdfjsLib.getDocument(binaryData).promise;\n        } catch (e) {\n            console.log(e);\n        }\n\n\n\n        const _CANVAS = document.querySelector(\"#pdf-canvas\");\n        var page = await _PDF_DOC.getPage(page_no);\n\n        // original width of the pdf page at scale 1\n        var pdf_original_width = page.getViewport({ scale: 1 }).width;\n        // as the canvas is of a fixed width we need to adjust the scale of the viewport where page is rendered\n        var scale_required = _CANVAS.width / pdf_original_width;\n\n        // get viewport to render the page at required scale\n        var viewport = page.getViewport({ scale: scale_required });\n\n        // set canvas height same as viewport height\n        _CANVAS.height = viewport.height;\n\n        var render_context = {\n            canvasContext: _CANVAS.getContext(\"2d\"),\n            viewport: viewport,\n        };\n\n\n\n        // render the page contents in the canvas\n        try {\n            await page.render(render_context);\n            // await page_2.render(render_context_2);\n        } catch (error) {\n            alert(error.message);\n        }\n\n        \n\n        if (pdfDoc.getPages().length > 1) {\n            const _CANVAS_2 = document.querySelector(\"#pdf-canvas-2\");\n            var page_2 = await _PDF_DOC.getPage(2);\n            \n            // original width of the pdf page at scale 1\n            var pdf_original_width_2 = page_2.getViewport({ scale: 1 }).width;\n            // as the canvas is of a fixed width we need to adjust the scale of the viewport where page is rendered\n            var scale_required_2 = _CANVAS_2.width / pdf_original_width_2;\n\n            // get viewport to render the page at required scale\n            var viewport_2 = page_2.getViewport({ scale: scale_required_2 });\n\n            // set canvas height same as viewport height\n            _CANVAS_2.height = viewport_2.height;\n\n            var render_context_2 = {\n                canvasContext: _CANVAS_2.getContext(\"2d\"),\n                viewport: viewport_2,\n            };\n\n\n\n            // render the page contents in the canvas\n            try {\n                // await page.render(render_context);\n                await page_2.render(render_context_2);\n            } catch (error) {\n                alert(error.message);\n            }\n        }\n        \n    }\n}\n\nexport {\n    fillPdf,\n    convertPdfDoc2FileURL,\n    showPage\n}","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/hocs/withLoading.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/utils/const.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/utils/generateMetadata.js",["537","538"],"import { generateCode } from \".\";\n\nconst jsonFiles = [\n    \"attributes\",\n    \"legendSets\",\n    \"optionSets\",\n    \"trackedEntityAttributes\",\n    \"trackedEntityTypes\",\n    \"dataElements\",\n    \"programs\",\n    \"programStages\",\n    \"programStageSections\",\n    \"programIndicators\",\n    \"indicatorTypes\",\n    \"indicators\",\n    \"sqlViews\",\n    \"options\",\n    \"optionGroups\",\n    \"optionGroupSets\"\n]; // should order from child to parent dependenvies\n\nconst replaceUID = (mapping, data) => {\n    let res = data;\n    for( const uid in mapping) {\n        res = res.replaceAll(uid,mapping[uid]);\n    }\n    return res;\n}\n\nexport const generateDefaultMetadata = (fullnameOption, newUID) => {\n    let metadata = {};\n    let formMapping = require(\"../asset/metadata/mapping.json\");\n    let uidReplacement = {};\n\n    // Generate new id and map to old\n    jsonFiles.forEach( jsonFile => {\n        metadata[jsonFile] = require(`../asset/metadata/${jsonFile}.json`)[jsonFile];\n\n        if ( jsonFile === \"trackedEntityAttributes\" ) {\n            metadata[jsonFile] = metadata[jsonFile].filter( ({id}) => id !== \"A9yzNTl9G0f\" );\n        }\n        if ( jsonFile === \"programs\") {\n            metadata[jsonFile][0].programTrackedEntityAttributes = metadata[jsonFile][0].programTrackedEntityAttributes.filter( ({trackedEntityAttribute}) => trackedEntityAttribute.id !== \"A9yzNTl9G0f\");\n        }\n        \n        metadata[jsonFile].forEach( element => {\n            if (element.id) uidReplacement = {\n                ...uidReplacement,\n                [element.id]: generateCode()\n            }\n        });\n    });\n\n    formMapping[\"sections\"] = metadata.programStageSections;\n    formMapping[\"otherSections\"] = {};\n    // if (fullnameOption) formMapping.attributes.family_name = \"\";\n\n    if ( newUID ) {\n        // Replace metadata\n        const stringMetadata = replaceUID(uidReplacement,JSON.stringify(metadata));\n        metadata = JSON.parse(stringMetadata);\n\n        // Replace mapping\n        const stringFormMapping = replaceUID(uidReplacement,JSON.stringify(formMapping));\n        formMapping = JSON.parse(stringFormMapping);\n    }\n\n    return { \n        metadata: metadata,\n        formMapping: formMapping\n    };\n}\n\nexport const generateCustomMetadata = ( admin, newUID, ageAttribute ) => {\n    console.log(admin);\n    /** \n     * WHAT THIS FUNCTION DOES\n     * \n     * 1. Remove metadata\n     * ** TE Types\n     * ** TEAs\n     * CREATE NEW FILES (base dataelements in redux)\n     * ** DEs\n     * ** Options / Option Sets\n     * ** ProgramStageSections\n     * \n     * 2. Remove TEAs, DEs, [ProgramStageSections]-> use default in Redux, TE Type from Programs and Program Stages\n     * \n     * 3. Generate new UID\n     * \n     * 4. Add other DEs, sections and attributes, types to Programs and Program Stages (base on TEAs, TE Type and DEs in Redux)\n     */\n\n    // Check optionSet nbcADZuow7x\n\n    let formMapping = {\n        version: \"\",\n        dataElements: {},\n        attributes: {\n          system_id: \"BfkIayM14MF\",\n          status: \"rZSVLUfgHlD\",\n          estimated_age: \"dG792prxjrb\",\n          age_unit: \"p9hGfsmdve7\"\n        },\n        programStage: \"WlWJt4lVSWw\",\n        optionAttributes: {\n          group: \"UBT4QSKzYo4\",\n          chapter: \"QUYTAqoXnje\"\n        },\n        sections: [],\n        otherSections: {}\n    };\n    \n\n    // 1. Filter DEs, optionSets and options\n    let metadata = {};\n    metadata[\"attributes\"] = require(`../asset/metadata/attributes.json`)[\"attributes\"];\n    metadata[\"programIndicators\"] = require(`../asset/metadata/programIndicators.json`)[\"programIndicators\"];\n\n    metadata[\"programs\"] = require(`../asset/metadata/programs.json`)[\"programs\"];\n    metadata[\"programStages\"] = require(`../asset/metadata/programStages.json`)[\"programStages\"];\n\n    metadata[\"optionSets\"] = require(`../asset/metadata/optionSets.json`)[\"optionSets\"];\n    metadata[\"dataElements\"] = require(`../asset/metadata/dataElements.json`)[\"dataElements\"];\n    metadata[\"options\"] = require(`../asset/metadata/options.json`)[\"options\"];\n\n    metadata[\"indicatorTypes\"] = require(`../asset/metadata/indicatorTypes.json`)[\"indicatorTypes\"];\n    metadata[\"indicators\"] = require(`../asset/metadata/indicators.json`)[\"indicators\"];\n    metadata[\"sqlViews\"] = require(`../asset/metadata/sqlViews.json`)[\"sqlViews\"];\n    metadata[\"optionGroups\"] = require(`../asset/metadata/optionGroups.json`)[\"optionGroups\"];\n    metadata[\"optionGroupSets\"] = require(`../asset/metadata/optionGroupSets.json`)[\"optionGroupSets\"];\n    metadata[\"legendSets\"] = require(`../asset/metadata/legendSets.json`)[\"legendSets\"];\n\n    // add system_id, cod status, age unit and estimated age\n    metadata[\"trackedEntityAttributes\"] = require(`../asset/metadata/trackedEntityAttributes.json`)[\"trackedEntityAttributes\"].slice(0,4);\n    metadata[\"trackedEntityAttributes\"].push({\n        ...ageAttribute,\n        legendSets: [\n            ...ageAttribute.legendSets,\n            ...[\n                {\n                    id: \"bHqcKIS01OI\"\n                },\n                {\n                    id: \"S0CP6RzDx4c\"\n                },\n                {\n                    id: \"McFG08e1aEd\"\n                },\n                {\n                    id: \"YVz7lS5F4So\"\n                },\n                {\n                    id: \"VVnrNTCrxB1\"\n                }\n            ]\n        ]\n    });\n\n    // const admin = require(\"./admin.json\");\n    let dataElements = [];\n    let optionSets = [];\n    let options = [];\n\n    const ageUnitOptionSet = metadata.optionSets.find( ({id}) => id === \"b9QWoApPuYD\" );\n    const ageUnitOptions = metadata.options.filter( opt => opt.optionSet.id === \"b9QWoApPuYD\" );\n\n    for ( const frame in admin.dataElements ) {\n        admin.dataElements[frame].defaultSections.forEach( section => {\n            dataElements = [\n                ...dataElements,\n                ...section.dataElements.map( de => {\n                    const findedDE = metadata.dataElements.find( ({id}) => de.id === id )\n                    if ( findedDE.optionSet && findedDE.optionSet.id ) {\n                        if ( !optionSets.find( ({id}) => id === findedDE.optionSet.id ) )  {\n                            optionSets.push(metadata.optionSets.find( ({id}) => id === findedDE.optionSet.id ));\n                            options = [\n                                ...options,\n                                ...metadata.options.filter( opt => opt.optionSet.id === findedDE.optionSet.id )\n                            ];\n                        }\n                    }\n                    return findedDE;\n                })\n            ]\n        });\n    }\n\n    metadata[\"dataElements\"] = dataElements;\n    metadata[\"optionSets\"] = [\n        ...optionSets,\n        ...[ageUnitOptionSet]\n    ];\n    metadata[\"options\"] = [\n        ...options,\n        ...ageUnitOptions\n    ];\n    const entryForm = require(\"../asset/metadata/mapping.json\");\n    for ( const key in entryForm.dataElements ) {\n        if ( metadata[\"dataElements\"].find( ({id}) => id === entryForm.dataElements[key] ) ) {\n            formMapping.dataElements[key] = entryForm.dataElements[key];\n        }\n    }\n\n    // add version\n    formMapping.version = entryForm.version;\n\n\n\n\n\n    // 2. Remove DEs from programStages, TEAs/TE_Type from programs, and programStageSections\n    // metadata.programStageSections = [\n    //     ...admin.dataElements.frameA.defaultSections,\n    //     ...admin.dataElements.frameB.defaultSections,\n    // ];\n    metadata.programStageSections = admin.dataElements.form.defaultSections.map( section => section );\n\n    delete metadata.programs[0].trackedEntityType;\n    metadata.programs[0].programTrackedEntityAttributes = [];\n\n    metadata.programStages[0].programStageDataElements = metadata.programStages[0].programStageDataElements.filter( ({dataElement}) =>\n        metadata.dataElements.find( ({id}) => id === dataElement.id )\n    )\n\n\n\n    // 3. Generate new UID\n    let uidReplacement = {};\n    for ( const jsonFile in metadata ) {\n        metadata[jsonFile].forEach( element => {\n            if (element.id) uidReplacement = {\n                ...uidReplacement,\n                [element.id]: generateCode()\n            }\n        });\n    }\n\n    if ( newUID ) {\n        // Replace metadata\n        const stringMetadata = replaceUID(uidReplacement,JSON.stringify(metadata));\n        metadata = JSON.parse(stringMetadata);\n\n        // Replace mapping\n        const stringFormMapping = replaceUID(uidReplacement,JSON.stringify(formMapping));\n        formMapping = JSON.parse(stringFormMapping);\n    }\n    \n\n    // 3.b Mapping for entry form**************\n    admin.trackedEntityAttributes.forEach( defaultAttribute => {\n        // if (defaultAttribute[1] === \"Unique ID\") formMapping.attributes[\"system_id\"] = defaultAttribute[0];\n        if (defaultAttribute[1] === \"First Name\") formMapping.attributes[\"given_name\"] = defaultAttribute[0];\n        if (defaultAttribute[1] === \"Last Name\") formMapping.attributes[\"family_name\"] = defaultAttribute[0];\n        if (defaultAttribute[1] === \"Middle Name\") formMapping.attributes[\"middle_name\"] = defaultAttribute[0];\n        if (defaultAttribute[1] === \"Date of Birth\") formMapping.attributes[\"dob\"] = defaultAttribute[0];\n        if (defaultAttribute[1] === \"Date of Birth is estimated\") formMapping.attributes[\"estimated_dob\"] = defaultAttribute[0];\n        if (defaultAttribute[1] === \"Age in years\") formMapping.attributes[\"age\"] = defaultAttribute[0];\n        if (defaultAttribute[1] === \"Address\") formMapping.attributes[\"address\"] = defaultAttribute[0];\n        if (defaultAttribute[1] === \"Sex\") formMapping.attributes[\"sex\"] = defaultAttribute[0];\n    })\n\n\n\n    // 4.a Add other attributes, types to Programs\n    metadata.programs[0][\"trackedEntityType\"] = { id: admin.trackedEntityType };\n    metadata.programs[0].programTrackedEntityAttributes = [\n        ...[{\n            \"mandatory\": true,\n            \"searchable\": true,\n            \"renderOptionsAsRadio\": false,\n            \"displayInList\": true,\n            \"sortOrder\": 1,\n            \"program\": { \"id\": metadata.programs[0].id },\n            // \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[0][0] },\n            \"trackedEntityAttribute\": { \"id\": metadata[\"trackedEntityAttributes\"][0].id },\n            \"programTrackedEntityAttributeGroups\": []\n          }],\n          ...admin.trackedEntityAttributes.filter( ([des,]) => des !== '' ).map( (tea,index) => ({\n            \"mandatory\": tea[1] === \"Age in years\",\n            \"searchable\": tea[1] === \"First Name\" || tea[1] === \"Last Name\" || tea[1] === \"Date of Birth\" || tea[1] === \"Address\",\n            \"renderOptionsAsRadio\": false,\n            \"displayInList\": tea[1] === \"First Name\" || tea[1] === \"Last Name\" || tea[1] === \"Date of Birth\" || tea[1] === \"Address\",\n            \"sortOrder\": index+2,\n            \"program\": { \"id\": metadata.programs[0].id  },\n            \"trackedEntityAttribute\": { \"id\": tea[0] },\n            \"programTrackedEntityAttributeGroups\": []\n          })),\n          ...[{\n            \"mandatory\": false,\n            \"searchable\": true,\n            \"renderOptionsAsRadio\": false,\n            \"displayInList\": true,\n            \"sortOrder\": admin.trackedEntityAttributes.filter( ([des,]) => des !== '' ).length + 2,\n            \"program\": { \"id\": metadata.programs[0].id },\n            // \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[0][0] },\n            \"trackedEntityAttribute\": { \"id\": metadata[\"trackedEntityAttributes\"][1].id },\n            \"programTrackedEntityAttributeGroups\": []\n          }],\n          ...[{\n            \"mandatory\": false,\n            \"searchable\": true,\n            \"renderOptionsAsRadio\": false,\n            \"displayInList\": true,\n            \"sortOrder\": admin.trackedEntityAttributes.filter( ([des,]) => des !== '' ).length + 3,\n            \"program\": { \"id\": metadata.programs[0].id },\n            // \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[0][0] },\n            \"trackedEntityAttribute\": { \"id\": metadata[\"trackedEntityAttributes\"][2].id },\n            \"programTrackedEntityAttributeGroups\": []\n          }],\n          ...[{\n            \"mandatory\": false,\n            \"searchable\": true,\n            \"renderOptionsAsRadio\": false,\n            \"displayInList\": true,\n            \"sortOrder\": admin.trackedEntityAttributes.filter( ([des,]) => des !== '' ).length + 4,\n            \"program\": { \"id\": metadata.programs[0].id },\n            // \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[0][0] },\n            \"trackedEntityAttribute\": { \"id\": metadata[\"trackedEntityAttributes\"][3].id },\n            \"programTrackedEntityAttributeGroups\": []\n          }]\n        //   ...[{\n        //     \"mandatory\": false,\n        //     \"searchable\": true,\n        //     \"renderOptionsAsRadio\": false,\n        //     \"displayInList\": true,\n        //     \"sortOrder\": 2,\n        //     \"program\": { \"id\": metadata.programs[0].id  },\n        //     \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[0][0] },\n        //     \"programTrackedEntityAttributeGroups\": []\n        //   },\n        //   {\n        //     \"mandatory\": false,\n        //     \"searchable\": true,\n        //     \"renderOptionsAsRadio\": false,\n        //     \"displayInList\": true,\n        //     \"sortOrder\": 3,\n        //     \"program\": { \"id\": metadata.programs[0].id  },\n        //     \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[1][0] },\n        //     \"programTrackedEntityAttributeGroups\": []\n        //   },\n        //   {\n        //     \"mandatory\": false,\n        //     \"searchable\": true,\n        //     \"renderOptionsAsRadio\": false,\n        //     \"displayInList\": true,\n        //     \"sortOrder\": 4,\n        //     \"program\": { \"id\": metadata.programs[0].id  },\n        //     \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[2][0] },\n        //     \"programTrackedEntityAttributeGroups\": []\n        //   },\n        //   {\n        //     \"mandatory\": false,\n        //     \"searchable\": false,\n        //     \"renderOptionsAsRadio\": false,\n        //     \"displayInList\": false,\n        //     \"sortOrder\": 5,\n        //     \"program\": { \"id\": metadata.programs[0].id  },\n        //     \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[3][0] },\n        //     \"programTrackedEntityAttributeGroups\": []\n        //   },\n        //   {\n        //     \"mandatory\": false,\n        //     \"searchable\": false,\n        //     \"renderOptionsAsRadio\": false,\n        //     \"displayInList\": false,\n        //     \"sortOrder\": 6,\n        //     \"program\": { \"id\": metadata.programs[0].id  },\n        //     \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[4][0] },\n        //     \"programTrackedEntityAttributeGroups\": []\n        //   },\n        //   {\n        //     \"mandatory\": false,\n        //     \"searchable\": true,\n        //     \"renderOptionsAsRadio\": false,\n        //     \"displayInList\": true,\n        //     \"sortOrder\": 7,\n        //     \"program\": { \"id\": metadata.programs[0].id  },\n        //     \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[5][0] },\n        //     \"programTrackedEntityAttributeGroups\": []\n        //   },\n        //   {\n        //     \"mandatory\": false,\n        //     \"searchable\": false,\n        //     \"renderOptionsAsRadio\": false,\n        //     \"displayInList\": false,\n        //     \"sortOrder\": 8,\n        //     \"program\": { \"id\": metadata.programs[0].id  },\n        //     \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[6][0] },\n        //     \"programTrackedEntityAttributeGroups\": []\n        //   }]\n    ];\n    // metadata.programs[0].programTrackedEntityAttributes = [\n    //     ...metadata.programs[0].programTrackedEntityAttributes,\n    //     ...admin.trackedEntityAttributes.slice(8,admin.trackedEntityAttributes.length).map( (tea, index) => {\n    //         return {\n    //             \"mandatory\": false,\n    //             \"searchable\": false,\n    //             \"renderOptionsAsRadio\": false,\n    //             \"displayInList\": false,\n    //             \"sortOrder\": (9 + index),\n    //             \"program\": { \"id\": metadata.programs[0].id  },\n    //             \"trackedEntityAttribute\": { \"id\": tea[0] },\n    //             \"programTrackedEntityAttributeGroups\": []\n    //         }\n    //     })\n    // ];\n\n    // 4.b Add other DEs, sections and and Program Stages\n    for (const frame in admin.dataElements) {\n        formMapping.otherSections[frame] = [];\n        admin.dataElements[frame].otherSections.forEach((section, index) => {\n            section[1].forEach( de => {\n                metadata.programStages[0].programStageDataElements.push({\n                    \"displayInReports\": false,\n                    \"skipSynchronization\": false,\n                    \"renderOptionsAsRadio\": false,\n                    \"compulsory\": false,\n                    \"allowProvidedElsewhere\": false,\n                    \"allowFutureDate\": false,\n                    \"programStage\": { \"id\": metadata.programStages[0].id },\n                    \"dataElement\": { \"id\": de }\n                })\n            });\n\n            metadata.programStageSections.push({\n                \"name\": section[0],\n                \"sortOrder\": 10 + index,\n                \"programStage\": { \"id\": metadata.programStages[0].id },\n                \"dataElements\": section[1].map( de => {\n                    return {\n                        \"id\": de\n                    }\n                })\n            });\n\n            formMapping[\"otherSections\"][frame].push({\n                \"name\": section[0],\n                \"dataElements\": section[1].map( de => {\n                    return {\n                        \"id\": de\n                    }\n                })\n            });\n        })\n    }\n    formMapping.sections = metadata.programStageSections;\n    \n    return { \n        metadata: metadata,\n        formMapping: formMapping\n    };\n}\n\nexport const updateProgramIndicators = (programIndicators, dobAttribute, sexAttribute, femaleCode) => programIndicators.map( pi => {\n    return {\n        ...pi,\n        filter: pi[\"filter\"].replaceAll(\"revZcilpJvK\",dobAttribute)\n            .replaceAll(\"F6qFXT44qay\",sexAttribute)\n            .replaceAll(\"FEMALE\",femaleCode)\n    }\n});\n\nexport const updateSQLViews = (sqlViews, ageAttribute, sexAttribute, femaleCode) => sqlViews.map( sv => {\n    return {\n        ...sv,\n        sqlQuery: sv[\"sqlQuery\"].replaceAll(\"z4jIMvqs0ff\",ageAttribute)\n        .replaceAll(\"F6qFXT44qay\",sexAttribute)\n        .replaceAll(\"FEMALE\",femaleCode)\n    }\n});","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Administration/CustomCertificate.jsx",["539","540","541","542"],"import { useState, useEffect, useLayoutEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { \n    Button,\n    Row, Col,\n    Input,\n    Select,\n    List,\n    Divider,\n    Modal,\n    Checkbox\n} from \"antd\";\nimport { Backdrop, CircularProgress } from '@mui/material';\n// import fileSaver from \"file-saver\";\nimport { changeCustomCertificate } from \"../../redux/actions/admin\";\nimport { Hooks } from \"tracker-capture-app-core\";\nimport { convertPdfDoc2FileURL, fillPdf, showPage } from \"../../utils/certificate\";\n// import { Image, PictureAsPdf, Print } from \"@material-ui/icons\";\n\nconst { useApi } = Hooks;\n\nconst { Option } = Select;\n\nconst CustomCertificate = props => { \n    const { metadataApi } = useApi();\n    const [pdfURL, setPdfURL] = useState(null);\n\n    const [ templates, setTemplates ] = useState([]);\n\n    const [ pages, setPages ] = useState(1);\n\n    const [ template, setTemplate ] = useState(null);\n    const [ customFont, setCustomFont ] = useState(null);\n    const [ openModal, setOpenModal ] = useState(null);\n    const [ currentLabel, setCurrentlabel ] = useState({\n        label: \"\",\n        page: 1,\n        size: 11,\n        valueType: \"text\",\n        value: \"\",\n        coordinates: [100,100],\n    });\n\n    const [ loading, setLoading ] = useState(false);\n\n    const generateData = async (pdfFileTemplate) => {\n        const pdfDoc = await fillPdf(pdfFileTemplate,props.certificateTemplateAdmin.labels,customFont);\n        const fileURL = await convertPdfDoc2FileURL(pdfDoc);\n        setPdfURL(fileURL);\n        setPages(pdfDoc.getPages().length);\n        // await showPage(pdfDoc, 1);\n    };\n\n    const previewTemplate = async () => {\n        if ( props.certificateTemplateAdmin ) {\n            setLoading(true);\n            const pdfFileTemplate = await metadataApi.pullNotForJson(`/api/documents/${props.certificateTemplateAdmin.template}/data.pdf`);\n            await generateData(pdfFileTemplate);\n            setLoading(false);\n        }\n    }\n\n    useEffect( () => {\n        setLoading(true);\n        (async () => {\n            const font = props.certificateTemplateMetadata.customFont && props.certificateTemplateMetadata.customFont !== null ?\n                            await metadataApi.pullNotForJson(`/api/documents/${props.certificateTemplateMetadata.customFont}/data.ttf`) : null;\n            let font1 = null;\n            if ( font !== null ) {\n                font1 = await font.arrayBuffer();\n                setCustomFont(font1);\n            }\n            props.changeCustomCertificate(props.certificateTemplateMetadata);\n            if ( props.certificateTemplateMetadata ) {\n                Promise.all([\n                    metadataApi.get(\"/api/documents.json\"),\n                    metadataApi.pullNotForJson(`/api/documents/${props.certificateTemplateMetadata.template}/data.pdf`)\n                ])\n                .then( async (res) => {\n                    setTemplates(res[0].documents);                \n                    setTemplate(props.certificateTemplateMetadata.template);\n\n                    console.log(customFont === null);\n                    const pdfDoc = await fillPdf(res[1],props.certificateTemplateMetadata.labels,font1);\n                    const fileURL = await convertPdfDoc2FileURL(pdfDoc);\n                    setPdfURL(fileURL);\n                    setPages(pdfDoc.getPages().length);\n                    // await showPage(pdfDoc, 1);\n\n                    setLoading(false);\n                });\n            }\n            else {\n                Promise.all([\n                    metadataApi.get(\"/api/documents.json\"),\n                ])\n                .then( res => {\n                    setTemplates(res[0].documents);\n                    setLoading(false);\n                });\n            }\n        })();\n    }, []);\n\n    return (\n        <div>\n            <Backdrop\n                sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n                open={loading}\n            >\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n            <Row gutter={[16, 16]}>\n                <Col span={12}>\n                    <div className=\"administration-certificate-box\">\n                        <Divider plain orientation=\"right\">\n                            <Button\n                                type=\"primary\"\n                                onClick={ async () => {\n                                    previewTemplate();\n                                }}\n                                style={{\n                                    width: \"150px\"\n                                }}\n                            >\n                                Preview\n                            </Button>\n                        </Divider>\n                        <div className=\"administration-certificate-title-setup\">\n                            <div>Template UID</div>\n                            <div>\n                                <Select\n                                    style={{\n                                        width: \"100%\"\n                                    }}\n                                    value={template ? template : \"\"}\n                                    onChange={ val => {\n                                        setTemplate(val);\n                                    }}\n                                >\n                                {\n                                    templates.map( template => <Option value={template.id}>{template.displayName}</Option>)\n                                }\n                                </Select>\n                            </div>\n                        </div>\n                        <div className=\"administration-certificate-title-setup\">\n                            <div><i>Note: Changing a new template will reset/clear all labels</i></div>\n                            <div>\n                                <Button\n                                    onClick={() => {\n                                        props.changeCustomCertificate({\n                                            template: template,\n                                            labels: []\n                                        });\n                                    }}\n                                >\n                                    Change Template\n                                </Button>\n                            </div>\n                        </div>\n                        <Divider plain orientation=\"right\">\n                            <Button \n                                onClick={() => {\n                                    setOpenModal(\"Add\");\n                                    setCurrentlabel({\n                                        label: \"\",\n                                        page: 1,\n                                        size: 11,\n                                        valueType: \"text\",\n                                        value: \"\",\n                                        coordinates: [100,100],\n                                    });\n                                }}\n                                style={{\n                                    width: \"150px\"\n                                }}\n                            >\n                                Add\n                            </Button>\n                        </Divider>\n                        { props.certificateTemplateAdmin !== null && <List \n                            size=\"small\"\n                            split={false}\n                            dataSource={props.certificateTemplateAdmin ? props.certificateTemplateAdmin.labels : []}\n                            renderItem={ item => \n                                <List.Item\n                                    actions={[\n                                        <Button \n                                            type=\"text\" \n                                            onClick={() => {\n                                                setOpenModal(\"Edit\");\n                                                setCurrentlabel(item);\n                                            }}\n                                        >\n                                            Edit\n                                        </Button>,\n                                        <Button \n                                            type=\"text\" \n                                            onClick={ () => { \n                                                props.changeCustomCertificate({\n                                                    ...props.certificateTemplateAdmin,\n                                                    labels: props.certificateTemplateAdmin.labels.filter( ({label}) => label !== item.label )\n                                                });\n                                            }}\n                                        >\n                                            Remove\n                                        </Button>\n                                    ]}\n                                >\n                                    <List.Item.Meta\n                                        title={item.label}\n                                        description={item.value}\n                                    />\n                                </List.Item>\n                            }\n                        /> }\n                        <Divider plain orientation=\"right\">\n                            <Button \n                                type=\"primary\" danger\n                                style={{\n                                    width: \"150px\"\n                                }}\n                                onClick={() => {\n                                    props.changeCustomCertificate(null);\n                                }}\n                            >\n                                Delete\n                            </Button>\n                        </Divider>\n                    </div>\n                </Col>\n                <Col span={12}>\n                    <div className=\"administration-certificate-box\">\n                        <iframe \n                            // hidden\n                            id=\"certificate\"\n                            title=\"Certificate\"\n                            src={pdfURL + \"#toolbar=0&navpanes=0&scrollbar=0\"}\n                            frameBorder=\"0\" \n                            height={1132}\n                            width={\"100%\"}\n                            scrolling=\"auto\"\n                            type=\"application/pdf\"\n                        />\n                        {/* <Row>\n                            <Col>\n                                <canvas\n                                    style={{ maxWidth: \"100%\" }}\n                                    id=\"pdf-canvas\"\n                                    width=\"800\"\n                                />\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <canvas\n                                    style={{ maxWidth: \"100%\" }}\n                                    id=\"pdf-canvas-2\"\n                                    width=\"800\"\n                                />\n                            </Col>\n                        </Row> */}\n                    </div>\n                </Col>\n            </Row>\n            <Modal\n                visible={ openModal !== null }\n                centered\n                onCancel={ () => {\n                    setCurrentlabel({\n                        label: \"\",\n                        page: 1,\n                        size: 11,\n                        valueType: \"text\",\n                        value: \"\",\n                        coordinates: [100,100],\n                    });\n                    setOpenModal(null);\n                }}\n                onOk={ () => {\n                    console.log(currentLabel);\n\n\n                    // Do something\n                    if (openModal === \"Add\") {\n                        props.changeCustomCertificate({\n                            ...props.certificateTemplateAdmin,\n                            labels: [\n                                ...props.certificateTemplateAdmin.labels,\n                                ...[currentLabel]\n                            ]\n                        });\n                    }\n                    else if (openModal === \"Edit\") {\n                        props.changeCustomCertificate({\n                            ...props.certificateTemplateAdmin,\n                            labels: props.certificateTemplateAdmin.labels.map( l => l.label === currentLabel.label ? currentLabel : l)\n                        });\n                    }\n\n                    // Reset currentLabel\n                    setCurrentlabel({\n                        label: \"\",\n                        page: 1,\n                        size: 11,\n                        valueType: \"text\",\n                        value: \"\",\n                        coordinates: [100,100],\n                    });\n                    setOpenModal(null);\n                }}\n                title={ openModal === \"Edit\" ? `Edit ${currentLabel.label}` : \"Add\" }\n            >\n                <div className=\"administration-customcertificate-modal\">\n                    <div>Label</div>\n                    <div>\n                        <Input \n                            disabled={openModal === \"Edit\"} \n                            value={currentLabel.label} \n                            onChange={ val => {\n                                setCurrentlabel({\n                                    ...currentLabel,\n                                    label: val.target.value\n                                })\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"administration-customcertificate-modal\">\n                    <div>Page</div>\n                    <div>\n                        <Select\n                            style={{\n                                width: \"100%\"\n                            }}\n                            value={currentLabel.page}\n                            onChange={ val => {\n                                setCurrentlabel({\n                                    ...currentLabel,\n                                    page: val\n                                })\n                            }}\n                        >\n                            <Option value={1}>Page 1</Option>\n                            { pages > 1 && <Option value={2}>Page 2</Option> }\n                        </Select>\n                    </div>\n                </div>\n                <div className=\"administration-customcertificate-modal\">\n                    <div>Value Type</div>\n                    <div>\n                        <Select\n                            style={{\n                                width: \"100%\"\n                            }}\n                            value={currentLabel.valueType}\n                            onChange={ val => {\n                                setCurrentlabel({\n                                    ...currentLabel,\n                                    valueType: val\n                                })\n                            }}\n                        >\n                            <Option value={\"text\"}>Text Field</Option>\n                            <Option value={\"check\"}>Check Mark</Option>\n                        </Select>\n                    </div>\n                </div>\n                <div className=\"administration-customcertificate-modal\">\n                    <div>Value</div>\n                    <div>\n                        <Input \n                            value={currentLabel.value} \n                            onChange={ val => {\n                                setCurrentlabel({\n                                    ...currentLabel,\n                                    value: val.target.value\n                                })\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"administration-customcertificate-modal\">\n                    <div>Size</div>\n                    <div>\n                    <Input \n                        value={currentLabel.size} \n                        onChange={ val => {\n                            setCurrentlabel({\n                                ...currentLabel,\n                                size: parseInt(val.target.value)\n                            })\n                        }}\n                    />\n                    </div>\n                </div>\n                <div className=\"administration-customcertificate-modal\">\n                    <div>Coordinate</div>\n                    <div className=\"administration-customcertificate-modal-2half\">\n                        <Input \n                            value={currentLabel.coordinates[0]} \n                            onChange={ val => {\n                                setCurrentlabel({\n                                    ...currentLabel,\n                                    coordinates: [parseInt(val.target.value), currentLabel.coordinates[1]]\n                                })\n                            }}\n                        />\n                        <Input \n                            value={currentLabel.coordinates[1]} \n                            onChange={ val => {\n                                setCurrentlabel({\n                                    ...currentLabel,\n                                    coordinates: [currentLabel.coordinates[0], parseInt(val.target.value)]\n                                })\n                            }}\n                        />\n                    </div>\n                </div>\n            </Modal>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        certificateTemplateMetadata: state.metadata.customCertificate,\n        certificateTemplateAdmin: state.admin.customCertificate,\n        // programMetadata: state.metadata.programMetadata\n    }\n}\n\nconst mapDispatchToProps = {\n    changeCustomCertificate\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(CustomCertificate);","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page9/index.js",["543"],"import { AGE_RANGES_SHORT, SEXES, randomNumber } from \"../utils\";\nimport generateChildChart from \"../../utils/generateChildChart\";\n\nconst page9 = (t) => {\n  const TITLES = [\n    t(\"numberOfDeathsFromTbAidsMalariaAndOtherCausesAgeGroup\"),\n    t(\"distributionOfDeathsByTbAidsAndMalariaBySexAndAge\"),\n    t(\n      \"percentageOfDeathsFromTbAidsAndMalariaOutOfAllDeathsFromCommunicableDiseases\"\n    ),\n    t(\n      \"numberOfTbAndAidsDeathsAndPercentOfTheseDeathsOutOfAllDeaths15YearsAndAbove\"\n    ),\n  ];\n  return {\n    id: \"page9\",\n    label: `${t(\"malaria\")} - ${t(\"tb\")} - ${t(\"aids\")}`,\n    layout: TITLES.map((v, index) => {\n      return {\n        i: `9.${index + 1}`,\n        x: index % 2 ? 49 : 0,\n        y: Math.floor(index / 2) * 50,\n        w: 49,\n        h: 50,\n      };\n    }),\n    widgets: [\n      {\n        i: \"9.1\",\n        children: [\n          generateChildChart(\"verticalStackedBar\", {\n            title: TITLES[0],\n            dataLabels: [t(\"tb\"), t(\"aids\"), t(\"malaria\"), t(\"other\")],\n            dataSets: AGE_RANGES_SHORT.map((name) => ({\n              name,\n              data: Array(4)\n                .fill()\n                .map(() => randomNumber(1, 2000)),\n            })),\n            colors: [\"#4C7FBC\", \"#ED7B2E\", \"#CBCBCB\", \"#E0DF40\"],\n          }),\n        ],\n      },\n      {\n        i: \"9.2\",\n        children: [\n          generateChildChart(\"doubleStackedBar\", {\n            title: TITLES[1],\n            dataLabels: [\n              \"Male - TB\",\n              \"Male - AIDS\",\n              \"Male - Malaria\",\n              \"Female - TB\",\n              \"Female - AIDS\",\n              \"Female - Malaria\",\n            ],\n            dataSets: AGE_RANGES_SHORT.map((name) => ({\n              name,\n              data: Array(6)\n                .fill()\n                .map(() => randomNumber(1, 2000)),\n            })),\n            colors: [\n              \"#225FAD\",\n              \"#79A4DA\",\n              \"#BFD7F5\",\n              \"#7F1590\",\n              \"#C971D7\",\n              \"#F4CCFA\",\n            ],\n          }),\n        ],\n      },\n      {\n        i: \"9.3\",\n        children: [\n          generateChildChart(\"bar\", {\n            title: TITLES[2],\n            dataLabels: [t(\"numberOfDeath\")],\n            dataSets: AGE_RANGES_SHORT.map((name) => ({\n              name,\n              data: [randomNumber(1, 100)],\n            })),\n            colors: [\"#3F6EC3\"],\n          }),\n        ],\n      },\n      {\n        i: \"9.4\",\n        children: [\n          generateChildChart(\n            \"combined\",\n            {\n              title: TITLES[3],\n              dataLabels: [\n                t(\"percentOfTotalDeathAllCauses\"),\n                t(\"tb\"),\n                t(\"aids\"),\n              ],\n              dataSets: [\"15 - 24\", \"35 - 49\", \"50 - 74\", \"75+\"].map((name) => {\n                const number1 = randomNumber(0, 600);\n                const number2 = randomNumber(0, 600);\n                return {\n                  name,\n                  data: [\n                    ((number1 + number2) /\n                      (number1 + number2 + randomNumber(0, 600))) *\n                      100,\n                    number1,\n                    number2,\n                  ],\n                };\n              }),\n              colors: [\"#21272D\", \"#4C7FBC\", \"#ED7B2E\"],\n            },\n            [\"line\", \"stackedBar\", \"stackedBar\"]\n          ),\n        ],\n      },\n    ],\n  };\n};\n\nexport default page9;\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page7/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page5/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page8/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page6/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page3/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page2/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page4/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page1/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page0/index.js",["544"],"import { randomNumber } from \"../utils\";\nimport generateChildChart from \"../../utils/generateChildChart\";\nconst allChartTitles = [\n  \"Mortality rate, all ages\",\n  \"Mortality rate, neonates (0-27 days)\",\n  \"Mortality rate, infant (< 1 year of age)\",\n  \"Mortality rate, children < 5 years of age\",\n  \"Mortality rate, age 0-14 years \",\n  \"Mortality rate, age 15-49 years \",\n  \"Mortality rate, 50 years and above\",\n  \"Mortality rate, age 30-70 years\"\n];\nconst page1 = {\n  id: \"page0\",\n  label: \"Mortality levels\",\n  layout: allChartTitles.map((v, index) => ({\n    i: `0.${index + 1}`,\n    x: index % 2 ? 49 : 0,\n    y: Math.floor(index / 2) * 50,\n    w: 49,\n    h: 50\n  })),\n\n  widgets: allChartTitles.map((keyName, index) =>\n    ({\n      i: `0.${index + 1}`,\n      children: [\n        // generateChildChart(\"bar\", {\n        //   title: `${keyName} - registration`,\n        //   dataLabels: [\n        //     `${keyName.split(\",\")[0]} - Males, ${keyName.split(\",\")[1].trim()} - registration`,\n        //     `${keyName.split(\",\")[0]} - Females, ${keyName.split(\",\")[1].trim()} - registration`\n        //   ],\n        //   dataSets: [\"Hospital A\", \"Hospital B\", \"Hospital C\", \"Hospital D\"].map((name) => ({\n        //     name: name,\n        //     data: Array(2)\n        //       .fill()\n        //       .map((v, index) => {\n        //         return randomNumber(1, 90);\n        //       })\n        //   })),\n        //   colors: [\"#3E95CD\", \"#48b53a\"]\n        // })\n        generateChildChart(\"no_data\",{\n          title: `${keyName} - registration`,\n        })\n      ]\n    })\n  )\n};\nexport default page1;\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page2/stackedBar-chart.js",["545"],"import { AGE_RANGES, generateData, randomNumber, SEXES } from \"../utils\";\nimport generateChildChart from \"../../utils/generateChildChart\";\n\nconst ALL_CAUSES = [\n  \"tuberculosis\",\n  \"sexuallyTransmittedDiseasesExcludingHiv\",\n  \"hiv\",\n  \"diarrhoealDiseases\",\n  \"pertussis\",\n  \"poliomyelitis\",\n  \"diphtheria\",\n  \"measles\",\n  \"tetanus\",\n  \"meningitis\",\n  \"hepatitisB\",\n  \"hepatitisC\",\n  \"malaria\",\n  \"tropicalClusterDiseases\",\n  \"lowerRespiratoryInfections\",\n  \"maternalConditions\",\n  \"conditionsArisingDuringThePerinatalPeriod\",\n  \"nutritionalDeficiencies\",\n  \"mouthAndOropharynxCancers\",\n  \"oesophagusCancer\",\n  \"stomachCancer\",\n  \"colonAndRectumCancers\",\n  \"liverCancer\",\n  \"pancreasCancer\",\n  \"tracheaBronchusAndLungCancers\",\n  \"melanomaAndOtherSkinCancers\",\n  \"breastCancer\",\n  \"cervixUteriCancer\",\n  \"corpusUteriCancer\",\n  \"ovaryCancer\",\n  \"prostateCancer\",\n  \"bladderCancer\",\n  \"lymphomasAndMultipleMyeloma\",\n  \"leukaemia\",\n  \"alzheimerAndOtherDementias\",\n  \"parkinsonDisease\",\n  \"hypertensiveDisease\",\n  \"ischaemicHeartDisease\",\n  \"cerebrovascularDisease\",\n  \"chronicObstructivePulmonaryDisease\",\n  \"asthma\",\n  \"digestiveDiseases\",\n  \"genitoUrinaryDiseases\",\n  \"congenitalAnomalies\",\n  \"roadTrafficAccidents\",\n  \"suicide\",\n  \"homicide\",\n];\nconst ALL_CAUSE_CODE = [\n  \"0030\",\n  \"0040;0050;0060;0070;0080\",\n  \"0090\",\n  \"0100\",\n  \"0120\",\n  \"0130\",\n  \"0140\",\n  \"0150\",\n  \"0160\",\n  \"0170\",\n  \"0180\",\n  \"0190\",\n  \"0200\",\n  \"0210;0220;0230;0240;0250;0260;0270\",\n  \"0390\",\n  \"0420;0430;0440;0450;0460;0470;0480\",\n  \"0490;0500;0510;0520\",\n  \"0530;0540;0550;0560;0570;0580\",\n  \"0610\",\n  \"0620\",\n  \"0630\",\n  \"0640\",\n  \"0650\",\n  \"0660\",\n  \"0670\",\n  \"0680\",\n  \"0690\",\n  \"0700\",\n  \"0710\",\n  \"0720\",\n  \"0730\",\n  \"0740\",\n  \"0750\",\n  \"0760\",\n  \"0870\",\n  \"0880\",\n  \"1060\",\n  \"1070\",\n  \"1080\",\n  \"1120\",\n  \"1130\",\n  \"1150\",\n  \"1200\",\n  \"1310\",\n  \"1500\",\n  \"1570\",\n  \"1580\",\n];\n\nconst generateStackedBarChart = (i, t) => {\n  return {\n    i,\n    children: ALL_CAUSES.map((cause, index) => {\n      return generateChildChart(\"stackedBar\", {\n        title: `${t(\"numberOfDeathBy\")} ${t(cause)}`,\n        dataLabels: SEXES,\n        dataSets: AGE_RANGES.map((name) => ({\n          name,\n          data: Array(SEXES.length)\n            .fill()\n            .map(() => randomNumber(0, 30)),\n        })),\n        colors: [\"#4C7FBC\", \"#ED7B2E\"],\n        codes: ALL_CAUSE_CODE[index],\n      });\n    }),\n  };\n};\nexport default generateStackedBarChart;\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/treemap-chart.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/pie-chart.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/combined-chart.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/html-chart.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/children-chart.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/line-chart.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/statistic.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/bar-chart.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/example/stacked-bar-chart.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/pages/page2/line-chart.js",["546"],"import { AGE_RANGES, generateData, randomNumber, SEXES } from \"../utils\";\nimport generateChildChart from \"../../utils/generateChildChart\";\n\nconst ALL_CAUSES = [\n  \"tuberculosis\",\n  \"sexuallyTransmittedDiseasesExcludingHiv\",\n  \"hiv\",\n  \"diarrhoealDiseases\",\n  \"pertussis\",\n  \"poliomyelitis\",\n  \"diphtheria\",\n  \"measles\",\n  \"tetanus\",\n  \"meningitis\",\n  \"hepatitisB\",\n  \"hepatitisC\",\n  \"malaria\",\n  \"tropicalClusterDiseases\",\n  \"lowerRespiratoryInfections\",\n  \"maternalConditions\",\n  \"conditionsArisingDuringThePerinatalPeriod\",\n  \"nutritionalDeficiencies\",\n  \"mouthAndOropharynxCancers\",\n  \"oesophagusCancer\",\n  \"stomachCancer\",\n  \"colonAndRectumCancers\",\n  \"liverCancer\",\n  \"pancreasCancer\",\n  \"tracheaBronchusAndLungCancers\",\n  \"melanomaAndOtherSkinCancers\",\n  \"breastCancer\",\n  \"cervixUteriCancer\",\n  \"corpusUteriCancer\",\n  \"ovaryCancer\",\n  \"prostateCancer\",\n  \"bladderCancer\",\n  \"lymphomasAndMultipleMyeloma\",\n  \"leukaemia\",\n  \"alzheimerAndOtherDementias\",\n  \"parkinsonDisease\",\n  \"hypertensiveDisease\",\n  \"ischaemicHeartDisease\",\n  \"cerebrovascularDisease\",\n  \"chronicObstructivePulmonaryDisease\",\n  \"asthma\",\n  \"digestiveDiseases\",\n  \"genitoUrinaryDiseases\",\n  \"congenitalAnomalies\",\n  \"roadTrafficAccidents\",\n  \"suicide\",\n  \"homicide\",\n];\nconst ALL_CAUSE_CODE = [\n  \"0030\",\n  \"0040;0050;0060;0070;0080\",\n  \"0090\",\n  \"0100\",\n  \"0120\",\n  \"0130\",\n  \"0140\",\n  \"0150\",\n  \"0160\",\n  \"0170\",\n  \"0180\",\n  \"0190\",\n  \"0200\",\n  \"0210;0220;0230;0240;0250;0260;0270\",\n  \"0390\",\n  \"0420;0430;0440;0450;0460;0470;0480\",\n  \"0490;0500;0510;0520\",\n  \"0530;0540;0550;0560;0570;0580\",\n  \"0610\",\n  \"0620\",\n  \"0630\",\n  \"0640\",\n  \"0650\",\n  \"0660\",\n  \"0670\",\n  \"0680\",\n  \"0690\",\n  \"0700\",\n  \"0710\",\n  \"0720\",\n  \"0730\",\n  \"0740\",\n  \"0750\",\n  \"0760\",\n  \"0870\",\n  \"0880\",\n  \"1060\",\n  \"1070\",\n  \"1080\",\n  \"1120\",\n  \"1130\",\n  \"1150\",\n  \"1200\",\n  \"1310\",\n  \"1500\",\n  \"1570\",\n  \"1580\",\n];\n\nconst generateLineChart = (i, t) => {\n  return {\n    i,\n    children: ALL_CAUSES.map((cause, index) => {\n      return generateChildChart(\"line\", {\n        title: `${t(\"numberOfDeathBy\")} ${t(cause)}`,\n        dataLabels: SEXES,\n        dataSets: AGE_RANGES.map((name) => ({\n          name,\n          data: Array(SEXES.length)\n            .fill()\n            .map(() => randomNumber(0, 30)),\n        })),\n        colors: [\"#4C7FBC\", \"#ED7B2E\"],\n        codes: ALL_CAUSE_CODE[index],\n      });\n    }),\n  };\n};\nexport default generateLineChart;\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/utils/generateChildCharts.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/index.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/IconButton/index.jsx",["547"],"import { Button, Radio } from \"antd\";\nimport { BUTTON_ICONS } from \"./const\";\nimport \"./index.css\";\n\nconst IconButton = (props) => {\n  return (\n    <div className=\"icon-button\">\n      <Button {...props} icon={BUTTON_ICONS[props.icon]}></Button>\n    </div>\n  );\n};\n\nexport default IconButton;\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/IconButton/const.js",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Nodata.jsx",["548"],"import {\n    Empty, Button\n  } from 'antd';\nimport { CloseCircleOutlined } from '@ant-design/icons';\n\nconst Nodata = ({ data }) => <Empty description={\n        <span>\n            <strong>Not Found Data</strong><br />\n            { data.data.message.map( m => <div>{m}</div> ) }\n        </span>\n    } >\n        <Button \n            type='primary'\n            onClick={ () => { window.location.href = \"../../../dhis-web-maintenance/\"; }}\n        >\n            Create Now\n        </Button>\n    </Empty>\n\n\nexport default Nodata;\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Html.jsx",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Treemap.jsx",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Bublemap.jsx",["549","550","551"],"import { useRef, useLayoutEffect } from 'react';\nimport * as am5 from \"@amcharts/amcharts5\";\nimport * as am5hierarchy from \"@amcharts/amcharts5/hierarchy\";\nimport * as am5xy from \"@amcharts/amcharts5/xy\";\nimport am5themes_Animated from \"@amcharts/amcharts5/themes/Animated\";\n\nconst BubbleMapWidget = ({ data }) => {\n\n    useLayoutEffect(() => {\n\n        // Create root element\n        let root = am5.Root.new(\"chartdiv\");\n\n        // Set themes\n        root.setThemes([\n            am5themes_Animated.new(root)\n        ]);\n\n        const chartData = { \n            ...data,\n            children: [{\n                ...data.data.children[0],\n                // x: am5.percent(80),\n                // y: am5.percent(20),\n            },\n            {\n                ...data.data.children[1],\n                // x: am5.percent(50),\n                // y: am5.percent(50),\n            },\n            {\n                ...data.data.children[2],\n                // x: am5.percent(20),\n                // y: am5.percent(40),\n            },\n            {\n                ...data.data.children[3],\n                // x: am5.percent(30),\n                // y: am5.percent(60),\n            }]\n        }\n\n        // Create wrapper container\n        const container = root.container.children.push(\n            am5.Container.new(root, {\n                width: am5.percent(100),\n                height: am5.percent(100),\n                layout: root.verticalLayout\n            })\n        );\n\n        // Create series\n        let series = container.children.push(\n            am5hierarchy.ForceDirected.new(root, {\n                topDepth: 1,\n                initialDepth: 0,\n                minRadius: 40,\n                maxRadius: am5.percent(20),\n                valueField: \"value\",\n                categoryField: \"name\",\n                shortNameField: \"shortName\",\n                childDataField: \"children\",\n                nodePadding: 10,\n                // xField: \"x\",\n                // yField: \"y\"\n            })\n        );\n\n        series.data.setAll([chartData]);\n\n        // Disable Toogle and Draggable\n        series.nodes.template.setAll({\n            // toggleKey: \"none\",\n            // cursorOverStyle: \"default\",\n            draggable: false\n        });\n\n        // Custom label\n        series.labels.template.setAll({\n            text: \"[fontSize: 15px]{shortName}[/]\\n[fontSize: 20px]{sum}[/]\",\n            fontSize: 14\n        });\n\n        // Outer circles\n        series.outerCircles.template.states.create(\"disabled\", {\n            fillOpacity: 0.5,\n            strokeOpacity: 0,\n            strokeDasharray: 0\n        });\n        series.outerCircles.template.states.create(\"hoverDisabled\", {\n            fillOpacity: 0.5,\n            strokeOpacity: 0,\n            strokeDasharray: 0\n        });\n\n        return () => {\n            root.dispose();\n        };\n    }, []);\n\n    return <div id=\"chartdiv\" style={{ width: \"100%\", height: \"100%\" }}></div>\n}\n\nexport default BubbleMapWidget;","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Pie.jsx",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Statistic.jsx",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Line.jsx",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/DoubleStackedBarChart.jsx",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/CombinedChart.jsx",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Bar.jsx",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/VerticalStackedBarChart.jsx",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/StackedBarChart.jsx",[],"/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Dashboard/Widget/Map.jsx",["552","553","554","555","556","557","558"],"import { control } from \"leaflet\";\nimport { useEffect, useRef } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, LayersControl, GeoJSON, useMap } from \"react-leaflet\";\nimport \"./Map.css\";\nconst GeoJsonLayer = ({ layer }) => {\n  const map = useMap();\n  const geoJson = useRef();\n\n  useEffect(() => {\n    map.fitBounds(geoJson.current.getBounds());\n  }, []);\n\n  return <GeoJSON ref={geoJson} data={layer.data} style={{ weight: 1, fill: false, color: \"#525252\" }} />;\n};\n\nconst ThematicLayer = ({ layer }) => {\n  const map = useMap();\n  const geoJson = useRef();\n\n  useEffect(() => {\n    map.fitBounds(geoJson.current.getBounds());\n  }, []);\n\n  return (\n    <GeoJSON\n      ref={geoJson}\n      data={layer.geoJson}\n      onEachFeature={(feature, currentLayer) => {\n        const currentValue = layer.data[feature.id];\n        const foundLegend = layer.legendSet.find((legend) => currentValue >= legend.min && currentValue <= legend.max);\n        const currentColor = foundLegend ? foundLegend.color : \"#ffffff\";\n        currentLayer.on(\"mouseover\", (thisLayer) => {\n          currentLayer.bindTooltip(\n            `<div class=\"map-tooltip\">${feature.properties.name}: <b>${\n              currentValue ? currentValue : \"No data\"\n            }</b></div>`\n          );\n        });\n\n        currentLayer.setStyle({\n          color: \"#525252\",\n          weight: 1,\n          fill: true,\n          fillOpacity: 1,\n          fillColor: currentColor\n        });\n      }}\n    />\n  );\n};\n\nconst ThematicLegendControl = ({ layer }) => {\n  return (\n    <div className=\"control-container thematic-legend-container\">\n      {layer.legendSet.map((legend) => {\n        return (\n          <div className=\"thematic-legend-row\">\n            <div style={{ width: 35, height: 15, backgroundColor: legend.color }}></div>\n            <div>\n              &nbsp;{legend.min} - {legend.max}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst Map = ({ data }) => {\n  const generateLayers = () => {\n    return data.layers.map((layer) => {\n      switch (layer.type) {\n        case \"boundary\":\n          return <GeoJsonLayer layer={layer} />;\n        case \"thematic\":\n          return <ThematicLayer layer={layer} />;\n        default:\n          return null;\n      }\n    });\n  };\n\n  const generateControls = () => {\n    const controls = [];\n    data.layers.forEach((layer) => {\n      if (layer.type === \"thematic\") {\n        controls.push(<ThematicLegendControl layer={layer} />);\n      }\n    });\n    return controls;\n  };\n\n  return (\n    <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false} style={{ height: \"100%\", width: \"100%\" }}>\n      {generateControls()}\n      {/* <TileLayer\n        attribution='&copy; <a href=\"https://carto.com/about-carto/\">CARTO</a>'\n        url=\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager_nolabels/{z}/{x}/{y}.png\"\n      /> */}\n      {generateLayers()}\n    </MapContainer>\n  );\n};\n\nexport default Map;\n","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Icd11Tool/EmbeddedIcd11Tool.js",["559"],"import { Modal } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./index.css\";\nimport RawCodingTool from \"./RawCodingTool\";\n\nconst Icd11Tool = ({ visible, setVisible, onSelect, defaultValue, freeText }) => {\n  const { t } = useTranslation();\n  const [selectedCod, setSelectedCod] = useState(null);\n  const [isClear, setIsClear] = useState(false);\n\n  useEffect(() => {\n    if (!visible) {\n      setIsClear(true);\n    } else {\n      setSelectedCod(defaultValue);\n      setIsClear(false);\n    }\n  }, [visible]);\n\n  return (\n    <Modal\n      title={t(\"icd11_tool\")}\n      maskClosable={false}\n      centered\n      open={visible}\n      onOk={() => {\n        setVisible(false);\n        onSelect(selectedCod);\n      }}\n      onCancel={() => setVisible(false)}\n      width=\"95%\"\n    >\n      <RawCodingTool\n        defaultValue={defaultValue}\n        isClear={isClear}\n        iNo={1}\n        onSelect={setSelectedCod}\n        freeText={freeText}\n      />\n    </Modal>\n  );\n};\n\nexport default Icd11Tool;","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/Icd11Tool/RawCodingTool.js",["560","561","562","563","564"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport * as ECT from \"@whoicd/icd11ect\";\nimport \"@whoicd/icd11ect/style.css\";\nimport \"./index.css\";\nimport PropTypes from \"prop-types\";\nimport { Input, Row, Col } from \"antd\";\nimport { debounce } from \"lodash\";\n\nconst { Search } = Input;\n\nlet apiUrl = process.env.REACT_APP_ICD11_API_URL;\n\nconst RawCodingTool = ({ onSelect, iNo, isClear, defaultValue, freeText, keyUILocale, icdApi_clientToken }) => {\n  const { t } = useTranslation();\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [selectedEntity, setSelectedEntity] = useState(null);\n\n  const ectSearch = (value) => value && ECT.Handler.search(iNo, value);\n\n  const search = (value) => ectSearch(value);\n\n  const debounceSearch = useCallback(debounce(search, 275), []);\n\n  useEffect(() => {\n    if (defaultValue.code === \"\") {\n      // if (freeText === \"\") {\n        setSearchValue(\"\");\n        setSelectedEntity(null);\n        ECT.Handler.clear(iNo);\n      // }\n      // else {\n      //   setSearchValue(freeText);\n      //   search(freeText);\n      //   setSelectedEntity(defaultValue || null);\n      // }\n    }\n    else {\n      setSearchValue(defaultValue ? defaultValue.title : \"\");\n      search(defaultValue ? defaultValue.title : \"\");\n      setSelectedEntity(defaultValue || null);\n    }\n  }, [defaultValue]);\n\n  useEffect(() => {\n    debounceSearch(searchValue);\n  }, [searchValue])\n\n  useEffect(() => {\n    const mySettings = {\n      autoBind: false,\n      apiServerUrl: \"https://id.who.int\",\n      apiSecured: true,\n      language: keyUILocale\n      // icdMinorVersion: \"2020-09\",\n      // icdLinearization: \"mms\",\n    };\n    const myCallbacks = {\n      selectedEntityFunction: (selectedEntity) => {\n        onSelect(selectedEntity);\n        setSelectedEntity(selectedEntity);\n      },\n      getNewTokenFunction: async () => {\n        return icdApi_clientToken;\n      }\n    };\n    ECT.Handler.configure(mySettings, myCallbacks);\n    ECT.Handler.bind(iNo);\n  }, []);\n  return (\n    <div>\n      <input hidden type=\"text\" className=\"ctw-input\" autoComplete=\"off\" data-ctw-ino={iNo} />\n      <Row gutter={12}>\n        <Col xs={12}>\n          <Search\n            width=\"50%\"\n            allowClear\n            onSearch={ectSearch(searchValue)}\n            value={searchValue}\n            placeholder={t(\"type_to_start_searching\")}\n            onChange={(event) => {\n              setSearchValue(event.target.value);\n            }}\n          />\n        </Col>\n        <Col xs={12}>\n          <Row wrap={false} justify=\"center\" align=\"center\" gutter={6}>\n            <Col xs={6}>\n              <div style={{ lineHeight: 2, float: \"right\" }}>{t(\"your_selection\")}</div>\n            </Col>\n            <Col xs={18}>\n              <Input\n                addonBefore={selectedEntity && selectedEntity.code}\n                value={selectedEntity && selectedEntity.title}\n                disabled\n              />\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n      <div className=\"ctw-window icd-window\" data-ctw-ino={iNo} />\n    </div>\n  );\n};\n\nRawCodingTool.propTypes = {\n  iNo: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  onSelect: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    keyUILocale: state.metadata.keyUiLocale,\n    icdApi_clientToken: state.metadata.icdApi_clientToken\n  };\n};\n\nexport default connect(mapStateToProps)(RawCodingTool);","/Users/thai/HISP/Apps/icd11-cause-of-death/cod-capture-app/src/components/App/UpdateDialog.jsx",["565","566"],"import { useEffect, useState } from \"react\";\nimport { \n    Button,\n    Dialog, DialogTitle, DialogContent, DialogActions,\n    Divider\n} from \"@mui/material\";\nimport moment from \"moment\";\nimport { Hooks, Components } from \"tracker-capture-app-core\";\nconst { useApi } = Hooks;\nconst { LoadingMask } = Components;\n  \nconst UpdateDialog = ({open, handleCloseUpdate, metadataUpdatedDate}) => {\n    const { metadataApi } = useApi();\n    const [loading, setLoading] = useState(false);\n    const [updatedDate, setUpdatedDate] = useState(\"Checking for updates...\");\n\n    useEffect(async () => {\n        if (open) {\n            setLoading(true);\n\n            // Update for version 2.0.1\n            if (moment(metadataUpdatedDate.metadataUpdatedDate, \"YYYY-MM-DD\").isBefore(moment(\"2025-05-05\", \"YYYY-MM-DD\"))) {\n                \n                setUpdatedDate(\"2025-05-05\");\n\n                const programIndicators = await metadataApi.get(\n                    \"/api/programIndicators.json\", \n                    { paging: false }, \n                    [\n                        \"fields=:owner\",\n                        `filter=program.id:eq:${metadataUpdatedDate.id}`,\n                    ]\n                );\n\n                const options = await metadataApi.get(\n                    \"/api/options.json\", \n                    { paging: false }, \n                    [\n                        \"fields=:owner\",\n                        `filter=id:eq:iuO3AfwamMA`,\n                    ]\n                );\n\n                const updatedProgramIndicators = programIndicators.programIndicators.map(indicator => {\n                    return {\n                        ...indicator,\n                        filter: indicator.filter.replaceAll(\"V{enrollment_date}\",\"V{incident_date}\"),\n                    };\n                });\n\n                const updatedOptions = [{\n                    ...options.options[0],\n                    code: \"DORIS mismatchs with the clinically selected cause of death\",\n                    name: \"The clinically selected cause of death does not always match the one most relevant for prevention that is selected by DORIS\"\n                }]\n\n                await metadataApi.push(`/api/metadata`, { \n                    programIndicators: updatedProgramIndicators,\n                    options: updatedOptions\n                })\n                .then(response => {\n                    \n                });\n\n                await metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/program\", {\n                    id: metadataUpdatedDate.id,\n                    metadataUpdatedDate: \"2025-05-05\",\n                    version: \"2.0.1\"\n                }, \"PUT\")\n            }\n\n            setLoading(false);\n        }\n    }, [open])\n\n    return (\n        <Dialog\n            open={open}\n        >\n            <DialogTitle>Metadata Update - version 2.0.1</DialogTitle>\n            <DialogContent>\n                {\n                    loading ? (\n                        <>\n                            <div style={{ marginBottom: \"10px\" }}>\n                                <strong>Last Updated:</strong> {updatedDate}\n                            </div>\n                            <div style={{ margin: \"20px 200px\" }}>\n                                <LoadingMask />\n                            </div>\n                        </>\n                    ) : (\n                        <div style={{ marginBottom: \"10px\" }}>\n                            <strong>Updated Done</strong>\n                        </div>\n                    )\n                }\n                \n            </DialogContent>\n            <Divider />\n            <DialogActions>\n                <Button\n                    variant=\"outlined\"\n                    size=\"small\"\n                    onClick={() => {\n                        handleCloseUpdate();\n                    }}\n                    style={{ width: \"120px\" }}\n                    disabled={loading}\n                >Close</Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default UpdateDialog;",{"ruleId":"567","replacedBy":"568"},{"ruleId":"569","replacedBy":"570"},{"ruleId":"571","severity":1,"message":"572","line":1,"column":31,"nodeType":"573","messageId":"574","endLine":1,"endColumn":38},{"ruleId":"575","severity":1,"message":"576","line":487,"column":6,"nodeType":"577","endLine":487,"endColumn":8,"suggestions":"578"},{"ruleId":"579","severity":1,"message":"580","line":2661,"column":3,"nodeType":"581","messageId":"582","endLine":2661,"endColumn":5},{"ruleId":"571","severity":1,"message":"583","line":8,"column":10,"nodeType":"573","messageId":"574","endLine":8,"endColumn":19},{"ruleId":"575","severity":1,"message":"584","line":65,"column":6,"nodeType":"577","endLine":65,"endColumn":8,"suggestions":"585"},{"ruleId":"571","severity":1,"message":"586","line":2,"column":17,"nodeType":"573","messageId":"574","endLine":2,"endColumn":20},{"ruleId":"571","severity":1,"message":"587","line":14,"column":10,"nodeType":"573","messageId":"574","endLine":14,"endColumn":24},{"ruleId":"575","severity":1,"message":"588","line":41,"column":6,"nodeType":"577","endLine":41,"endColumn":8,"suggestions":"589"},{"ruleId":"575","severity":1,"message":"590","line":66,"column":6,"nodeType":"577","endLine":69,"endColumn":4,"suggestions":"591"},{"ruleId":"575","severity":1,"message":"592","line":67,"column":5,"nodeType":"593","endLine":67,"endColumn":48},{"ruleId":"575","severity":1,"message":"592","line":68,"column":5,"nodeType":"593","endLine":68,"endColumn":48},{"ruleId":"575","severity":1,"message":"594","line":86,"column":6,"nodeType":"577","endLine":86,"endColumn":30,"suggestions":"595"},{"ruleId":"575","severity":1,"message":"596","line":49,"column":5,"nodeType":"577","endLine":49,"endColumn":22,"suggestions":"597"},{"ruleId":"571","severity":1,"message":"598","line":1,"column":20,"nodeType":"573","messageId":"574","endLine":1,"endColumn":29},{"ruleId":"571","severity":1,"message":"599","line":8,"column":8,"nodeType":"573","messageId":"574","endLine":8,"endColumn":19},{"ruleId":"571","severity":1,"message":"600","line":17,"column":11,"nodeType":"573","messageId":"574","endLine":17,"endColumn":12},{"ruleId":"575","severity":1,"message":"601","line":77,"column":6,"nodeType":"577","endLine":77,"endColumn":12,"suggestions":"602"},{"ruleId":"571","severity":1,"message":"603","line":185,"column":62,"nodeType":"573","messageId":"574","endLine":185,"endColumn":75},{"ruleId":"571","severity":1,"message":"604","line":32,"column":10,"nodeType":"573","messageId":"574","endLine":32,"endColumn":20},{"ruleId":"571","severity":1,"message":"605","line":32,"column":22,"nodeType":"573","messageId":"574","endLine":32,"endColumn":35},{"ruleId":"575","severity":1,"message":"606","line":58,"column":6,"nodeType":"577","endLine":58,"endColumn":8,"suggestions":"607"},{"ruleId":"608","severity":1,"message":"609","line":30,"column":1,"nodeType":"610","endLine":62,"endColumn":2},{"ruleId":"608","severity":1,"message":"609","line":5,"column":1,"nodeType":"610","endLine":13,"endColumn":2},{"ruleId":"608","severity":1,"message":"609","line":13,"column":1,"nodeType":"610","endLine":24,"endColumn":2},{"ruleId":"571","severity":1,"message":"611","line":2,"column":3,"nodeType":"573","messageId":"574","endLine":2,"endColumn":23},{"ruleId":"608","severity":1,"message":"609","line":64,"column":1,"nodeType":"610","endLine":204,"endColumn":2},{"ruleId":"608","severity":1,"message":"609","line":54,"column":1,"nodeType":"610","endLine":170,"endColumn":2},{"ruleId":"575","severity":1,"message":"612","line":90,"column":6,"nodeType":"577","endLine":90,"endColumn":16,"suggestions":"613"},{"ruleId":"614","severity":1,"message":"615","line":413,"column":19,"nodeType":"616","endLine":418,"endColumn":20},{"ruleId":"571","severity":1,"message":"598","line":1,"column":10,"nodeType":"573","messageId":"574","endLine":1,"endColumn":19},{"ruleId":"571","severity":1,"message":"617","line":73,"column":17,"nodeType":"573","messageId":"574","endLine":73,"endColumn":25},{"ruleId":"571","severity":1,"message":"618","line":6,"column":10,"nodeType":"573","messageId":"574","endLine":6,"endColumn":16},{"ruleId":"571","severity":1,"message":"619","line":17,"column":23,"nodeType":"573","messageId":"574","endLine":17,"endColumn":40},{"ruleId":"620","severity":1,"message":"621","line":148,"column":23,"nodeType":"622","messageId":"582","endLine":148,"endColumn":25},{"ruleId":"620","severity":1,"message":"621","line":148,"column":40,"nodeType":"622","messageId":"582","endLine":148,"endColumn":42},{"ruleId":"620","severity":1,"message":"621","line":151,"column":23,"nodeType":"622","messageId":"582","endLine":151,"endColumn":25},{"ruleId":"620","severity":1,"message":"621","line":151,"column":41,"nodeType":"622","messageId":"582","endLine":151,"endColumn":43},{"ruleId":"623","severity":1,"message":"624","line":92,"column":20,"nodeType":"625","messageId":"626","endLine":92,"endColumn":22},{"ruleId":"575","severity":1,"message":"627","line":97,"column":6,"nodeType":"577","endLine":97,"endColumn":11,"suggestions":"628"},{"ruleId":"623","severity":1,"message":"624","line":105,"column":20,"nodeType":"625","messageId":"626","endLine":105,"endColumn":22},{"ruleId":"575","severity":1,"message":"629","line":110,"column":6,"nodeType":"577","endLine":110,"endColumn":40,"suggestions":"630"},{"ruleId":"575","severity":1,"message":"631","line":156,"column":6,"nodeType":"577","endLine":156,"endColumn":8,"suggestions":"632"},{"ruleId":"575","severity":1,"message":"633","line":172,"column":6,"nodeType":"577","endLine":172,"endColumn":21,"suggestions":"634"},{"ruleId":"575","severity":1,"message":"635","line":176,"column":6,"nodeType":"577","endLine":176,"endColumn":26,"suggestions":"636"},{"ruleId":"575","severity":1,"message":"637","line":182,"column":6,"nodeType":"577","endLine":182,"endColumn":22,"suggestions":"638"},{"ruleId":"575","severity":1,"message":"637","line":188,"column":6,"nodeType":"577","endLine":188,"endColumn":24,"suggestions":"639"},{"ruleId":"575","severity":1,"message":"640","line":39,"column":6,"nodeType":"577","endLine":39,"endColumn":12,"suggestions":"641"},{"ruleId":"575","severity":1,"message":"642","line":47,"column":6,"nodeType":"577","endLine":47,"endColumn":77,"suggestions":"643"},{"ruleId":"575","severity":1,"message":"592","line":47,"column":7,"nodeType":"644","endLine":47,"endColumn":42},{"ruleId":"575","severity":1,"message":"592","line":47,"column":43,"nodeType":"644","endLine":47,"endColumn":76},{"ruleId":"571","severity":1,"message":"645","line":5,"column":42,"nodeType":"573","messageId":"574","endLine":5,"endColumn":50},{"ruleId":"575","severity":1,"message":"646","line":166,"column":6,"nodeType":"577","endLine":166,"endColumn":12,"suggestions":"647"},{"ruleId":"648","severity":1,"message":"649","line":76,"column":15,"nodeType":"616","messageId":"650","endLine":76,"endColumn":97,"fix":"651"},{"ruleId":"571","severity":1,"message":"652","line":10,"column":9,"nodeType":"573","messageId":"574","endLine":10,"endColumn":15},{"ruleId":"575","severity":1,"message":"584","line":73,"column":5,"nodeType":"577","endLine":73,"endColumn":38,"suggestions":"653"},{"ruleId":"575","severity":1,"message":"654","line":90,"column":5,"nodeType":"577","endLine":90,"endColumn":22,"suggestions":"655"},{"ruleId":"575","severity":1,"message":"656","line":29,"column":7,"nodeType":"577","endLine":29,"endColumn":9,"suggestions":"657"},{"ruleId":"571","severity":1,"message":"658","line":1,"column":16,"nodeType":"573","messageId":"574","endLine":1,"endColumn":22},{"ruleId":"571","severity":1,"message":"618","line":1,"column":34,"nodeType":"573","messageId":"574","endLine":1,"endColumn":40},{"ruleId":"659","severity":1,"message":"660","line":53,"column":5,"nodeType":"661","messageId":"662","endLine":66,"endColumn":6},{"ruleId":"571","severity":1,"message":"663","line":14,"column":10,"nodeType":"573","messageId":"574","endLine":14,"endColumn":27},{"ruleId":"571","severity":1,"message":"664","line":24,"column":7,"nodeType":"573","messageId":"574","endLine":24,"endColumn":20},{"ruleId":"571","severity":1,"message":"665","line":25,"column":7,"nodeType":"573","messageId":"574","endLine":25,"endColumn":15},{"ruleId":"571","severity":1,"message":"666","line":49,"column":26,"nodeType":"573","messageId":"574","endLine":49,"endColumn":43},{"ruleId":"575","severity":1,"message":"667","line":143,"column":6,"nodeType":"577","endLine":143,"endColumn":22,"suggestions":"668"},{"ruleId":"571","severity":1,"message":"669","line":145,"column":9,"nodeType":"573","messageId":"574","endLine":145,"endColumn":23},{"ruleId":"575","severity":1,"message":"670","line":270,"column":8,"nodeType":"577","endLine":270,"endColumn":14,"suggestions":"671"},{"ruleId":"575","severity":1,"message":"672","line":359,"column":8,"nodeType":"577","endLine":359,"endColumn":17,"suggestions":"673"},{"ruleId":"571","severity":1,"message":"600","line":11,"column":13,"nodeType":"573","messageId":"574","endLine":11,"endColumn":14},{"ruleId":"571","severity":1,"message":"600","line":43,"column":13,"nodeType":"573","messageId":"574","endLine":43,"endColumn":14},{"ruleId":"571","severity":1,"message":"674","line":1,"column":8,"nodeType":"573","messageId":"574","endLine":1,"endColumn":15},{"ruleId":"571","severity":1,"message":"675","line":2,"column":8,"nodeType":"573","messageId":"574","endLine":2,"endColumn":13},{"ruleId":"571","severity":1,"message":"676","line":5,"column":26,"nodeType":"573","messageId":"574","endLine":5,"endColumn":33},{"ruleId":"575","severity":1,"message":"677","line":108,"column":6,"nodeType":"577","endLine":108,"endColumn":34,"suggestions":"678"},{"ruleId":"571","severity":1,"message":"679","line":1,"column":17,"nodeType":"573","messageId":"574","endLine":1,"endColumn":28},{"ruleId":"571","severity":1,"message":"680","line":21,"column":5,"nodeType":"573","messageId":"574","endLine":21,"endColumn":15},{"ruleId":"623","severity":1,"message":"624","line":44,"column":86,"nodeType":"625","messageId":"626","endLine":44,"endColumn":88},{"ruleId":"681","severity":1,"message":"682","line":169,"column":60,"nodeType":"625","messageId":"683","endLine":186,"endColumn":10},{"ruleId":"681","severity":1,"message":"684","line":231,"column":37,"nodeType":"625","messageId":"683","endLine":236,"endColumn":10},{"ruleId":"571","severity":1,"message":"685","line":1,"column":31,"nodeType":"573","messageId":"574","endLine":1,"endColumn":46},{"ruleId":"571","severity":1,"message":"686","line":11,"column":5,"nodeType":"573","messageId":"574","endLine":11,"endColumn":13},{"ruleId":"571","severity":1,"message":"645","line":17,"column":42,"nodeType":"573","messageId":"574","endLine":17,"endColumn":50},{"ruleId":"575","severity":1,"message":"687","line":103,"column":8,"nodeType":"577","endLine":103,"endColumn":10,"suggestions":"688"},{"ruleId":"571","severity":1,"message":"689","line":1,"column":28,"nodeType":"573","messageId":"574","endLine":1,"endColumn":33},{"ruleId":"571","severity":1,"message":"690","line":1,"column":10,"nodeType":"573","messageId":"574","endLine":1,"endColumn":22},{"ruleId":"571","severity":1,"message":"691","line":1,"column":22,"nodeType":"573","messageId":"574","endLine":1,"endColumn":34},{"ruleId":"571","severity":1,"message":"691","line":1,"column":22,"nodeType":"573","messageId":"574","endLine":1,"endColumn":34},{"ruleId":"571","severity":1,"message":"692","line":1,"column":18,"nodeType":"573","messageId":"574","endLine":1,"endColumn":23},{"ruleId":"571","severity":1,"message":"693","line":4,"column":10,"nodeType":"573","messageId":"574","endLine":4,"endColumn":29},{"ruleId":"571","severity":1,"message":"694","line":1,"column":10,"nodeType":"573","messageId":"574","endLine":1,"endColumn":16},{"ruleId":"571","severity":1,"message":"695","line":4,"column":13,"nodeType":"573","messageId":"574","endLine":4,"endColumn":18},{"ruleId":"575","severity":1,"message":"696","line":99,"column":8,"nodeType":"577","endLine":99,"endColumn":10,"suggestions":"697"},{"ruleId":"571","severity":1,"message":"698","line":1,"column":10,"nodeType":"573","messageId":"574","endLine":1,"endColumn":17},{"ruleId":"571","severity":1,"message":"699","line":3,"column":24,"nodeType":"573","messageId":"574","endLine":3,"endColumn":33},{"ruleId":"571","severity":1,"message":"700","line":3,"column":35,"nodeType":"573","messageId":"574","endLine":3,"endColumn":41},{"ruleId":"571","severity":1,"message":"701","line":3,"column":43,"nodeType":"573","messageId":"574","endLine":3,"endColumn":48},{"ruleId":"571","severity":1,"message":"702","line":3,"column":50,"nodeType":"573","messageId":"574","endLine":3,"endColumn":63},{"ruleId":"575","severity":1,"message":"703","line":11,"column":6,"nodeType":"577","endLine":11,"endColumn":8,"suggestions":"704"},{"ruleId":"575","severity":1,"message":"703","line":22,"column":6,"nodeType":"577","endLine":22,"endColumn":8,"suggestions":"705"},{"ruleId":"575","severity":1,"message":"706","line":19,"column":6,"nodeType":"577","endLine":19,"endColumn":15,"suggestions":"707"},{"ruleId":"571","severity":1,"message":"708","line":13,"column":5,"nodeType":"573","messageId":"574","endLine":13,"endColumn":11},{"ruleId":"575","severity":1,"message":"709","line":24,"column":26,"nodeType":"573","endLine":24,"endColumn":37},{"ruleId":"575","severity":1,"message":"710","line":44,"column":6,"nodeType":"577","endLine":44,"endColumn":20,"suggestions":"711"},{"ruleId":"575","severity":1,"message":"712","line":48,"column":6,"nodeType":"577","endLine":48,"endColumn":19,"suggestions":"713"},{"ruleId":"575","severity":1,"message":"714","line":70,"column":6,"nodeType":"577","endLine":70,"endColumn":8,"suggestions":"715"},{"ruleId":"575","severity":1,"message":"716","line":17,"column":15,"nodeType":"625","endLine":74,"endColumn":6},{"ruleId":"575","severity":1,"message":"717","line":74,"column":8,"nodeType":"577","endLine":74,"endColumn":14,"suggestions":"718"},"no-native-reassign",["719"],"no-negated-in-lhs",["720"],"no-unused-vars","'version' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'changeRoute', 'getAllPrograms', 'getICD11Options', 'getTrackedEntityType', 'getTrackedEntityTypes', 'metadataApi', 'setCertificateTemplate', 'setCustomCertificate', 'setFemaleCode', 'setFormMapping', 'setFullnameOption', 'setIcdApiToken', 'setOrgUnitGroups', 'setOrgUnitLevels', 'setOrgUnits', 'setProgramMetadata', 'setTeas', 'setTrackerDataElements', 'setUILocale', 'setUserGroups', 'setUserRole', and 'setUsers'. Either include them or remove the dependency array. If 'setUILocale' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["721"],"no-dupe-keys","Duplicate key 'de'.","ObjectExpression","unexpected","'LANGUAGES' is defined but never used.","React Hook useEffect has a missing dependency: 'metadataApi'. Either include it or remove the dependency array.",["722"],"'Tag' is defined but never used.","'SearchOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'size'. Either include it or remove the dependency array. You can also do a functional update 'setSize(s => ...)' if you only need 'size' in the 'setSize' call.",["723"],"React Hook useEffect has missing dependencies: 'dataApi', 'programMetadata', 'selectedOrgUnit', 'setupUI', 'sortTable', and 'tableData'. Either include them or remove the dependency array. You can also do a functional update 'setTableData(t => ...)' if you only need 'tableData' in the 'setTableData' call.",["724"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","ConditionalExpression","React Hook useEffect has missing dependencies: 'dataApi', 'programMetadata.id', 'selectedOrgUnit', 'setupUI', 'tableData.page', and 'tableData.pager'. Either include them or remove the dependency array.",["725"],"React Hook useEffect has a missing dependency: 'changeStep'. Either include it or remove the dependency array. If 'changeStep' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["726"],"'useEffect' is defined but never used.","'SeartResult' is defined but never used.","'t' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentEvents' and 'formMapping.dataElements'. Either include them or remove the dependency array.",["727"],"'currentEvents' is assigned a value but never used.","'periodType' is assigned a value but never used.","'setPeriodType' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataApi' and 'orgUnits'. Either include them or remove the dependency array.",["728"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'GET_PROGRAM_METADATA' is defined but never used.","React Hook useEffect has a missing dependency: 'orgUnits'. Either include it or remove the dependency array.",["729"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'setPages' is assigned a value but never used.","'Button' is defined but never used.","'currentEnrollment' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'currentEvent', 'formMapping.dataElements', 'formMapping.sections', 'isShowFetalOrInfantDeath', 'mutateDataValue', and 'mutateEvent'. Either include them or remove the dependency array. If 'mutateEvent' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["730"],"React Hook useEffect has missing dependencies: 'currentEvent', 'formMapping.dataElements', 'formMapping.sections', 'isShowMaternalDeath', 'mutateDataValue', and 'mutateEvent'. Either include them or remove the dependency array. If 'mutateEvent' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["731"],"React Hook useEffect has missing dependencies: 'currentEnrollment.incidentDate', 'currentEvent', 'formMapping.dataElements', 'initNewEvent', 'mutateEvent', 'programStage.id', and 'returnInitValue'. Either include them or remove the dependency array. If 'initNewEvent' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["732"],"React Hook useEffect has a missing dependency: 'formMapping.dataElements'. Either include it or remove the dependency array.",["733"],"React Hook useEffect has a missing dependency: 'flagUnderlying'. Either include it or remove the dependency array. You can also do a functional update 'setFlagUnderlying(f => ...)' if you only need 'flagUnderlying' in the 'setFlagUnderlying' call.",["734"],"React Hook useEffect has missing dependencies: 'causeOfDeaths' and 'fillUpUnderlying'. Either include them or remove the dependency array.",["735"],["736"],"React Hook useEffect has missing dependencies: 'formMapping.attributes', 'getTeaValue', 'metadataApi', and 'mutateAttribute'. Either include them or remove the dependency array. If 'mutateAttribute' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["737"],"React Hook useEffect has a missing dependency: 'currentEnrollment'. Either include it or remove the dependency array.",["738"],"MemberExpression","'showPage' is defined but never used.","React Hook useEffect has missing dependencies: 'convertToValue', 'customCertificateTemplate', 'metadataApi', and 'onLoading'. Either include them or remove the dependency array. If 'onLoading' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["739"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"740","text":"741"},"'Option' is assigned a value but never used.",["742"],"React Hook useEffect has missing dependencies: 'changeTrackedEntityType', 'changeTrackedEntityTypes', 'femaleCode', 'formMapping.attributes', 'fullnameOption', 'setFemaleOption', and 'setFullnameOption'. Either include them or remove the dependency array. If 'changeTrackedEntityTypes' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["743"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["744"],"'Select' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'defaultAttributes' is defined but never used.","'fixedSections' is assigned a value but never used.","'fixedDEs' is assigned a value but never used.","'setgenerateNewUID' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'assignedOrgUnits', 'dataElements', 'femaleOption', 'fullnameOption', 'getUserGroupAccesses', 'getUserSharing', 'installType', 'metadataApi', 'setFormMapping', 'setInstallingFile', 'trackedEntityAttributes', and 'trackedEntityType'. Either include them or remove the dependency array. If 'setInstallingFile' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["745"],"'getSwitchValue' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'importMetadata', 'programMetadata', 'status.status', and 't'. Either include them or remove the dependency array.",["746"],"React Hook useEffect has missing dependencies: 'femaleOption', 'formMapping', 'fullnameOption', 'getICD11Options', 'metadata', 'metadataApi', 'open', 'setCertificateTemplate', 'setFemaleCode', and 't'. Either include them or remove the dependency array. If 'setFemaleCode' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["747"],"'example' is defined but never used.","'page0' is defined but never used.","'Tooltip' is defined but never used.","React Hook useEffect has missing dependencies: 'currentChild', 'femaleCode', 'formMapping.attributes', 'metadataApi', 'props.widget.i', and 'selectedOrgUnit'. Either include them or remove the dependency array. If 'setData' needs the current value of 'props.widget.i', you can also switch to useReducer instead of useState and read 'props.widget.i' in the reducer.",["748"],"'InputNumber' is defined but never used.","'date_limit' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'dataElements', 'dataElements', 'metadata', 'metadata', 'options', 'options', 'metadata'.","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'uidReplacement', 'uidReplacement'.","'useLayoutEffect' is defined but never used.","'Checkbox' is defined but never used.","React Hook useEffect has missing dependencies: 'customFont', 'metadataApi', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["749"],"'SEXES' is defined but never used.","'randomNumber' is defined but never used.","'generateData' is defined but never used.","'Radio' is defined but never used.","'CloseCircleOutlined' is defined but never used.","'useRef' is defined but never used.","'am5xy' is defined but never used.","React Hook useLayoutEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["750"],"'control' is defined but never used.","'TileLayer' is defined but never used.","'Marker' is defined but never used.","'Popup' is defined but never used.","'LayersControl' is defined but never used.","React Hook useEffect has a missing dependency: 'map'. Either include it or remove the dependency array.",["751"],["752"],"React Hook useEffect has a missing dependency: 'defaultValue'. Either include it or remove the dependency array. If 'setSelectedCod' needs the current value of 'defaultValue', you can also switch to useReducer instead of useState and read 'defaultValue' in the reducer.",["753"],"'apiUrl' is assigned a value but never used.","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useEffect has missing dependencies: 'iNo' and 'search'. Either include them or remove the dependency array.",["754"],"React Hook useEffect has a missing dependency: 'debounceSearch'. Either include it or remove the dependency array.",["755"],"React Hook useEffect has missing dependencies: 'iNo', 'icdApi_clientToken', 'keyUILocale', and 'onSelect'. Either include them or remove the dependency array. If 'onSelect' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["756"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'metadataApi', 'metadataUpdatedDate.id', and 'metadataUpdatedDate.metadataUpdatedDate'. Either include them or remove the dependency array.",["757"],"no-global-assign","no-unsafe-negation",{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},{"desc":"762","fix":"763"},{"desc":"764","fix":"765"},{"desc":"766","fix":"767"},{"desc":"768","fix":"769"},{"desc":"770","fix":"771"},{"desc":"772","fix":"773"},{"desc":"774","fix":"775"},{"desc":"776","fix":"777"},{"desc":"778","fix":"779"},{"desc":"780","fix":"781"},{"desc":"782","fix":"783"},{"desc":"784","fix":"785"},{"desc":"786","fix":"787"},{"desc":"788","fix":"789"},{"desc":"790","fix":"791"},{"desc":"792","fix":"793"},{"desc":"794","fix":"795"},[3208,3208]," rel=\"noreferrer\"",{"desc":"796","fix":"797"},{"desc":"798","fix":"799"},{"desc":"800","fix":"801"},{"desc":"802","fix":"803"},{"desc":"804","fix":"805"},{"desc":"806","fix":"807"},{"desc":"808","fix":"809"},{"desc":"810","fix":"811"},{"desc":"812","fix":"813"},{"desc":"814","fix":"815"},{"desc":"814","fix":"816"},{"desc":"817","fix":"818"},{"desc":"819","fix":"820"},{"desc":"821","fix":"822"},{"desc":"823","fix":"824"},{"desc":"825","fix":"826"},"Update the dependencies array to be: [changeRoute, getAllPrograms, getICD11Options, getTrackedEntityType, getTrackedEntityTypes, metadataApi, setCertificateTemplate, setCustomCertificate, setFemaleCode, setFormMapping, setFullnameOption, setIcdApiToken, setOrgUnitGroups, setOrgUnitLevels, setOrgUnits, setProgramMetadata, setTeas, setTrackerDataElements, setUILocale, setUserGroups, setUserRole, setUsers]",{"range":"827","text":"828"},"Update the dependencies array to be: [metadataApi]",{"range":"829","text":"830"},"Update the dependencies array to be: [size]",{"range":"831","text":"832"},"Update the dependencies array to be: [dataApi, programMetadata, selectedOrgUnit, setupUI, sortTable, tableData]",{"range":"833","text":"834"},"Update the dependencies array to be: [dataApi, filterTable, programMetadata.id, selectedOrgUnit, setupUI, sortTable, tableData.page, tableData.pager]",{"range":"835","text":"836"},"Update the dependencies array to be: [changeStep, programMetadata]",{"range":"837","text":"838"},"Update the dependencies array to be: [currentEvents, data, formMapping.dataElements]",{"range":"839","text":"840"},"Update the dependencies array to be: [dataApi, orgUnits]",{"range":"841","text":"842"},"Update the dependencies array to be: [orgUnits, searchOU]",{"range":"843","text":"844"},"Update the dependencies array to be: [age, currentEvent, formMapping.dataElements, formMapping.sections, isShowFetalOrInfantDeath, mutateDataValue, mutateEvent]",{"range":"845","text":"846"},"Update the dependencies array to be: [currentTeiSexAttributeValue, age, formMapping.sections, formMapping.dataElements, currentEvent, isShowMaternalDeath, mutateEvent, mutateDataValue]",{"range":"847","text":"848"},"Update the dependencies array to be: [currentEnrollment.incidentDate, currentEvent, formMapping.dataElements, initNewEvent, mutateEvent, programStage.id, returnInitValue]",{"range":"849","text":"850"},"Update the dependencies array to be: [causeOfDeaths, formMapping.dataElements]",{"range":"851","text":"852"},"Update the dependencies array to be: [checkBoxUnderlying, flagUnderlying]",{"range":"853","text":"854"},"Update the dependencies array to be: [causeOfDeaths, fillUpUnderlying, flagUnderlying]",{"range":"855","text":"856"},"Update the dependencies array to be: [causeOfDeaths, fillUpUnderlying, underlyingResult]",{"range":"857","text":"858"},"Update the dependencies array to be: [data, formMapping.attributes, getTeaValue, metadataApi, mutateAttribute]",{"range":"859","text":"860"},"Update the dependencies array to be: [currentEnrollment]",{"range":"861","text":"862"},"Update the dependencies array to be: [convertToValue, customCertificateTemplate, metadataApi, onLoading, open]",{"range":"863","text":"864"},"Update the dependencies array to be: [metadataApi, selectedTrackedEntityAttributes]",{"range":"865","text":"866"},"Update the dependencies array to be: [changeTrackedEntityType, changeTrackedEntityTypes, femaleCode, formMapping.attributes, fullnameOption, programMetadata, setFemaleOption, setFullnameOption]",{"range":"867","text":"868"},"Update the dependencies array to be: [props]",{"range":"869","text":"870"},"Update the dependencies array to be: [assignedOrgUnits, dataElements, femaleOption, fullnameOption, generateNewUID, getUserGroupAccesses, getUserSharing, installType, metadataApi, setFormMapping, setInstallingFile, trackedEntityAttributes, trackedEntityType]",{"range":"871","text":"872"},"Update the dependencies array to be: [importMetadata, open, programMetadata, status.status, t]",{"range":"873","text":"874"},"Update the dependencies array to be: [femaleOption, formMapping, fullnameOption, getICD11Options, metadata, metadataApi, open, results, setCertificateTemplate, setFemaleCode, t]",{"range":"875","text":"876"},"Update the dependencies array to be: [selectedChild, props.period, currentChild, props.widget.i, femaleCode, metadataApi, selectedOrgUnit, formMapping.attributes]",{"range":"877","text":"878"},"Update the dependencies array to be: [customFont, metadataApi, props]",{"range":"879","text":"880"},"Update the dependencies array to be: [data]",{"range":"881","text":"882"},"Update the dependencies array to be: [map]",{"range":"883","text":"884"},{"range":"885","text":"884"},"Update the dependencies array to be: [defaultValue, visible]",{"range":"886","text":"887"},"Update the dependencies array to be: [defaultValue, iNo, search]",{"range":"888","text":"889"},"Update the dependencies array to be: [debounceSearch, searchValue]",{"range":"890","text":"891"},"Update the dependencies array to be: [iNo, icdApi_clientToken, keyUILocale, onSelect]",{"range":"892","text":"893"},"Update the dependencies array to be: [metadataApi, metadataUpdatedDate.id, metadataUpdatedDate.metadataUpdatedDate, open]",{"range":"894","text":"895"},[19853,19855],"[changeRoute, getAllPrograms, getICD11Options, getTrackedEntityType, getTrackedEntityTypes, metadataApi, setCertificateTemplate, setCustomCertificate, setFemaleCode, setFormMapping, setFullnameOption, setIcdApiToken, setOrgUnitGroups, setOrgUnitLevels, setOrgUnits, setProgramMetadata, setTeas, setTrackerDataElements, setUILocale, setUserGroups, setUserRole, setUsers]",[2427,2429],"[metadataApi]",[1415,1417],"[size]",[2002,2105],"[dataApi, programMetadata, selectedOrgUnit, setupUI, sortTable, tableData]",[2588,2612],"[dataApi, filterTable, programMetadata.id, selectedOrgUnit, setupUI, sortTable, tableData.page, tableData.pager]",[1662,1679],"[changeStep, programMetadata]",[2143,2149],"[currentEvents, data, formMapping.dataElements]",[2076,2078],"[dataApi, orgUnits]",[2219,2229],"[orgUnits, searchOU]",[3303,3308],"[age, currentEvent, formMapping.dataElements, formMapping.sections, isShowFetalOrInfantDeath, mutateDataValue, mutateEvent]",[3799,3833],"[currentTeiSexAttributeValue, age, formMapping.sections, formMapping.dataElements, currentEvent, isShowMaternalDeath, mutateEvent, mutateDataValue]",[6083,6085],"[currentEnrollment.incidentDate, currentEvent, formMapping.dataElements, initNewEvent, mutateEvent, programStage.id, returnInitValue]",[6789,6804],"[causeOfDeaths, formMapping.dataElements]",[6872,6892],"[checkBoxUnderlying, flagUnderlying]",[6992,7008],"[causeOfDeaths, fillUpUnderlying, flagUnderlying]",[7119,7137],"[causeOfDeaths, fillUpUnderlying, underlyingResult]",[1113,1119],"[data, formMapping.attributes, getTeaValue, metadataApi, mutateAttribute]",[1416,1487],"[currentEnrollment]",[6876,6882],"[convertToValue, customCertificateTemplate, metadataApi, onLoading, open]",[2630,2663],"[metadataApi, selectedTrackedEntityAttributes]",[3282,3299],"[changeTrackedEntityType, changeTrackedEntityTypes, femaleCode, formMapping.attributes, fullnameOption, programMetadata, setFemaleOption, setFullnameOption]",[1020,1022],"[props]",[5089,5105],"[assignedOrgUnits, dataElements, femaleOption, fullnameOption, generateNewUID, getUserGroupAccesses, getUserSharing, installType, metadataApi, setFormMapping, setInstallingFile, trackedEntityAttributes, trackedEntityType]",[9703,9709],"[importMetadata, open, programMetadata, status.status, t]",[13527,13536],"[femaleOption, formMapping, fullnameOption, getICD11Options, metadata, metadataApi, open, results, setCertificateTemplate, setFemaleCode, t]",[4144,4172],"[selectedChild, props.period, currentChild, props.widget.i, femaleCode, metadataApi, selectedOrgUnit, formMapping.attributes]",[3806,3808],"[customFont, metadataApi, props]",[2879,2881],"[data]",[366,368],"[map]",[648,650],[563,572],"[defaultValue, visible]",[1420,1434],"[defaultValue, iNo, search]",[1496,1509],"[debounceSearch, searchValue]",[2091,2093],"[iNo, icdApi_clientToken, keyUILocale, onSelect]",[2735,2741],"[metadataApi, metadataUpdatedDate.id, metadataUpdatedDate.metadataUpdatedDate, open]"]